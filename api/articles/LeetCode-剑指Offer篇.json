{"title":"LeetCode-剑指Offer篇","uid":"aad8a83fde81c29db907afa89d192a10","slug":"LeetCode-剑指Offer篇","date":"2022-04-08T08:41:11.000Z","updated":"2022-04-08T08:45:52.702Z","comments":true,"path":"api/articles/LeetCode-剑指Offer篇.json","keywords":null,"cover":[],"content":"<h1 id=\"剑指-Offer\"><a href=\"#剑指-Offer\" class=\"headerlink\" title=\"剑指 Offer\"></a>剑指 Offer</h1><h2 id=\"剑指-Offer-II-4-只出现一次的数字\"><a href=\"#剑指-Offer-II-4-只出现一次的数字\" class=\"headerlink\" title=\"剑指 Offer II 4. 只出现一次的数字 \"></a><a href=\"https://leetcode-cn.com/problems/WGki4K/\">剑指 Offer II 4. 只出现一次的数字 </a></h2><p>给你一个整数数组 <code>nums</code> ，除某个元素仅出现 <strong>一次</strong> 外，其余每个元素都恰出现 <strong>三次 。</strong>请你找出并返回那个只出现了一次的元素。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [0,1,0,1,0,1,100]</span><br><span class=\"line\">输出：100</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路：</p>\n<ul>\n<li><p>状态机 不会。</p>\n</li>\n<li><p>位运算</p>\n<img src=\"LeetCode-%E5%89%91%E6%8C%87Offer%E7%AF%87/1629341475-GhErJW-image.png\" alt=\"image.png\" style=\"zoom:50%;\" /></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">singleNumber</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">cnt</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//计算每一位和</span></span><br><span class=\"line\">                cnt += (nums[j] &gt;&gt; i) &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cnt % <span class=\"number\">3</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//取余后只有 0 1 两种情况</span></span><br><span class=\"line\">                <span class=\"comment\">//边保存边左移。</span></span><br><span class=\"line\">                ans = ans | <span class=\"number\">1</span> &lt;&lt; i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-14-剪绳子-II\"><a href=\"#剑指-Offer-II-14-剪绳子-II\" class=\"headerlink\" title=\"剑指 Offer II 14. 剪绳子 II\"></a><a href=\"https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/\">剑指 Offer II 14. 剪绳子 II</a></h2><p>给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 k[0],k[1]…k[m - 1] 。请问 k[0]<em>k[1]</em>…*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p>\n<p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 10</span><br><span class=\"line\">输出: 36</span><br><span class=\"line\">解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36</span><br><span class=\"line\">2 &lt;= n &lt;= 1000</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><p>基本不等式+快速幂</p>\n<p>大数求余解法：<br>大数越界： 当 a 增大时，最后返回的 $3^a$大小以指数级别增长，可能超出 int32 甚至 int64 的取值范围，导致返回值错误。<br>大数求余问题： 在仅使用 int32 类型存储的前提下，正确计算 $x^a$ 对 p 求余（即 $x^a \\odot p$）的值。解决方案： 循环求余 、 快速幂求余 ，其中后者的时间复杂度更低，两种方法均基于以下求余运算规则推出：$(xy) \\odot p &#x3D; [(x \\odot p)(y \\odot p)] \\odot p<br>(xy)⊙p&#x3D;[(x⊙p)(y⊙p)]⊙p$</p>\n<ul>\n<li><p>循环求余 可通过循环操作依次求 $x^1, x^2, …, x^{a-1}, x^a$  对 p 的余数，保证每轮中间值 rem 都在 int32 取值范围中。</p>\n</li>\n<li><p>快速幂求余</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 求 (x^a) % p —— 快速幂求余</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">remainder</span><span class=\"params\">(<span class=\"type\">long</span> num, <span class=\"type\">int</span> quotient, <span class=\"type\">int</span> MOD)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">long</span> <span class=\"variable\">rem</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (quotient &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> ((quotient &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">               rem *=  num;</span><br><span class=\"line\">               rem %= MOD;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           num *= num;</span><br><span class=\"line\">           num %= MOD;</span><br><span class=\"line\">           quotient &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> rem;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">cuttingRope</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">MOD</span> <span class=\"operator\">=</span> <span class=\"number\">1000000007</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n-<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">residue</span> <span class=\"operator\">=</span> n % <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">quotient</span> <span class=\"operator\">=</span> n / <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (residue == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ans = (<span class=\"type\">int</span>)remainder(<span class=\"number\">3</span>, quotient, MOD) % MOD;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (residue == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            ans = (<span class=\"type\">int</span>)((remainder(<span class=\"number\">3</span>, quotient - <span class=\"number\">1</span>, MOD) * <span class=\"number\">4</span>) % MOD);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ans = (<span class=\"type\">int</span>)(remainder(<span class=\"number\">3</span>, quotient, MOD) * <span class=\"number\">2</span>) % MOD;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 求 (x^a) % p —— 快速幂求余</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">remainder</span><span class=\"params\">(<span class=\"type\">long</span> num, <span class=\"type\">int</span> quotient, <span class=\"type\">int</span> MOD)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">rem</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (quotient &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((quotient &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                rem *=  num;</span><br><span class=\"line\">                rem %= MOD;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            num *= num;</span><br><span class=\"line\">            num %= MOD;</span><br><span class=\"line\">            quotient &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rem;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-15-字符串中的所有变位词\"><a href=\"#剑指-Offer-II-15-字符串中的所有变位词\" class=\"headerlink\" title=\"剑指 Offer II 15. 字符串中的所有变位词\"></a><a href=\"https://leetcode-cn.com/problems/VabMRr/\">剑指 Offer II 15. 字符串中的所有变位词</a></h2><p>给定两个字符串 s 和 p，找到 s 中所有 p 的 变位词 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p>\n<p>变位词 指字母相同，但排列不同的字符串。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = <span class=\"string\">&quot;abab&quot;</span>, p = <span class=\"string\">&quot;ab&quot;</span></span><br><span class=\"line\">输出: [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">解释:</span><br><span class=\"line\">起始索引等于 <span class=\"number\">0</span> 的子串是 <span class=\"string\">&quot;ab&quot;</span>, 它是 <span class=\"string\">&quot;ab&quot;</span> 的变位词。</span><br><span class=\"line\">起始索引等于 <span class=\"number\">1</span> 的子串是 <span class=\"string\">&quot;ba&quot;</span>, 它是 <span class=\"string\">&quot;ab&quot;</span> 的变位词。</span><br><span class=\"line\">起始索引等于 <span class=\"number\">2</span> 的子串是 <span class=\"string\">&quot;ab&quot;</span>, 它是 <span class=\"string\">&quot;ab&quot;</span> 的变位词。</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>滑动窗口来统计两个字符串中字符出现的次数，进行对比，当<code>都为 0 且长度相等</code>时就是变位词。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title function_\">findAnagrams</span><span class=\"params\">(String s, String p)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">N</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">M</span> <span class=\"operator\">=</span> p.length();</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (M &gt; N) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] pCnt = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span>[] sCnt = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> ch : p.toCharArray()) &#123;</span><br><span class=\"line\">            pCnt[ch - <span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> s.charAt(i) - <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">            sCnt[x]++;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (sCnt[x] &gt; pCnt[x]) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> s.charAt(left) - <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">                sCnt[l]--;</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i - left + <span class=\"number\">1</span> == M)&#123;</span><br><span class=\"line\">                list.add(left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"剑指-Offer-II-30-插入、删除和随机访问都是-O-1-的容器\"><a href=\"#剑指-Offer-II-30-插入、删除和随机访问都是-O-1-的容器\" class=\"headerlink\" title=\"剑指 Offer II 30. 插入、删除和随机访问都是 O(1) 的容器\"></a><a href=\"https://leetcode-cn.com/problems/FortPu/\">剑指 Offer II 30. 插入、删除和随机访问都是 O(1) 的容器</a></h2><p>设计一个支持在平均 时间复杂度 O(1) 下，执行以下操作的数据结构：</p>\n<p>insert(val)：当元素 val 不存在时返回 true ，并向集合中插入该项，否则返回 false 。<br>remove(val)：当元素 val 存在时返回 true ，并从集合中移除该项，否则返回 false 。<br>getRandom：随机返回现有集合中的一项。每个元素应该有 相同的概率 被返回。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例 :</span><br><span class=\"line\">输入: inputs = [<span class=\"string\">&quot;RandomizedSet&quot;</span>, <span class=\"string\">&quot;insert&quot;</span>, <span class=\"string\">&quot;remove&quot;</span>, <span class=\"string\">&quot;insert&quot;</span>, <span class=\"string\">&quot;getRandom&quot;</span>, <span class=\"string\">&quot;remove&quot;</span>, <span class=\"string\">&quot;insert&quot;</span>, <span class=\"string\">&quot;getRandom&quot;</span>]</span><br><span class=\"line\">[[], [<span class=\"number\">1</span>], [<span class=\"number\">2</span>], [<span class=\"number\">2</span>], [], [<span class=\"number\">1</span>], [<span class=\"number\">2</span>], []]</span><br><span class=\"line\">输出: [<span class=\"literal\">null</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>, <span class=\"number\">2</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">解释:</span><br><span class=\"line\"><span class=\"type\">RandomizedSet</span> <span class=\"variable\">randomSet</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RandomizedSet</span>();  <span class=\"comment\">// 初始化一个空的集合</span></span><br><span class=\"line\">randomSet.insert(<span class=\"number\">1</span>); <span class=\"comment\">// 向集合中插入 1 ， 返回 true 表示 1 被成功地插入</span></span><br><span class=\"line\">randomSet.remove(<span class=\"number\">2</span>); <span class=\"comment\">// 返回 false，表示集合中不存在 2 </span></span><br><span class=\"line\">randomSet.insert(<span class=\"number\">2</span>); <span class=\"comment\">// 向集合中插入 2 返回 true ，集合现在包含 [1,2] </span></span><br><span class=\"line\">randomSet.getRandom(); <span class=\"comment\">// getRandom 应随机返回 1 或 2 </span></span><br><span class=\"line\">randomSet.remove(<span class=\"number\">1</span>); <span class=\"comment\">// 从集合中移除 1 返回 true 。集合现在包含 [2] </span></span><br><span class=\"line\">randomSet.insert(<span class=\"number\">2</span>); <span class=\"comment\">// 2 已在集合中，所以返回 false </span></span><br><span class=\"line\">randomSet.getRandom(); <span class=\"comment\">// 由于 2 是集合中唯一的数字，getRandom 总是返回 2</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>本来数组是最合适的，随机按值访问采用hashMap保存&lt;值,小标&gt;下标，但是有删除操作，所以使用变长数组<code>ArrayList</code>。删除时用最后一个值替换，然后尾删。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RandomizedSet</span> &#123;</span><br><span class=\"line\">    ArrayList&lt;Integer&gt; list;</span><br><span class=\"line\">    HashMap&lt;Integer, Integer&gt; hashMap;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">RandomizedSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.hashMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">insert</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hashMap.containsKey(val)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">idx</span> <span class=\"operator\">=</span> list.size();</span><br><span class=\"line\">        list.add(idx, val);</span><br><span class=\"line\">        hashMap.put(val, idx);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">remove</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hashMap.containsKey(val)) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">idx</span> <span class=\"operator\">=</span> hashMap.get(val);</span><br><span class=\"line\">            list.set(idx, list.get(list.size() - <span class=\"number\">1</span>));</span><br><span class=\"line\">            hashMap.replace(list.get(list.size()-<span class=\"number\">1</span>),idx);</span><br><span class=\"line\">            list.remove(list.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">            hashMap.remove(val);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getRandom</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Random</span> <span class=\"variable\">rand</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> rand.nextInt(hashMap.size());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list.get(random);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"剑指-Offer-II-37-小行星碰撞\"><a href=\"#剑指-Offer-II-37-小行星碰撞\" class=\"headerlink\" title=\"剑指 Offer II 37. 小行星碰撞\"></a><a href=\"https://leetcode-cn.com/problems/XagZNi/\">剑指 Offer II 37. 小行星碰撞</a></h2><p>给定一个整数数组 asteroids，表示在同一行的小行星。</p>\n<p>对于数组中的每一个元素，其绝对值表示小行星的大小，正负表示小行星的移动方向（正表示向右移动，负表示向左移动）。每一颗小行星以相同的速度移动。</p>\n<p>找出碰撞后剩下的所有小行星。碰撞规则：两个行星相互碰撞，较小的行星会爆炸。如果两颗行星大小相同，则两颗行星都会爆炸。两颗移动方向相同的行星，永远不会发生碰撞。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：asteroids = [-<span class=\"number\">2</span>,-<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输出：[-<span class=\"number\">2</span>,-<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">解释：-<span class=\"number\">2</span> 和 -<span class=\"number\">1</span> 向左移动，而 <span class=\"number\">1</span> 和 <span class=\"number\">2</span> 向右移动。 由于移动方向相同的行星不会发生碰撞，所以最终没有行星发生碰撞。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：asteroids = [5,10,-5]</span><br><span class=\"line\">输出：[5,10]</span><br><span class=\"line\">解释：10 和 -5 碰撞后只剩下 10 。 5 和 10 永远不会发生碰撞。</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>栈。由于碰撞是单向的，所以使用栈可以很好的模拟。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] asteroidCollision(<span class=\"type\">int</span>[] asteroids) &#123;</span><br><span class=\"line\">        Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; asteroids.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stack.empty()) &#123;</span><br><span class=\"line\">                stack.push(asteroids[i]);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">top</span> <span class=\"operator\">=</span> stack.peek();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((top ^ asteroids[i]) &gt;= <span class=\"number\">0</span> || (top &lt; <span class=\"number\">0</span> &amp;&amp; asteroids[i] &gt; <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">                stack.push(asteroids[i]);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">collision</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!stack.empty() &amp;&amp; (top &gt; <span class=\"number\">0</span> &amp;&amp; asteroids[i] &lt; <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Math.abs(top) &gt; Math.abs(asteroids[i])) &#123;</span><br><span class=\"line\">                    collision = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Math.abs(top) &lt; Math.abs(asteroids[i])) &#123;</span><br><span class=\"line\">                    stack.pop();</span><br><span class=\"line\">                    collision = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (stack.empty()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    top = stack.peek();</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    collision = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    stack.pop();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!collision) &#123;</span><br><span class=\"line\">                stack.push(asteroids[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Iterator&lt;Integer&gt; it = stack.iterator();</span><br><span class=\"line\">        <span class=\"type\">int</span>[] ans = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[stack.size()];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">            ans[i++] = it.next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"剑指-Offer-II-39-直方图最大矩形面积\"><a href=\"#剑指-Offer-II-39-直方图最大矩形面积\" class=\"headerlink\" title=\"剑指 Offer II 39. 直方图最大矩形面积\"></a><a href=\"https://leetcode-cn.com/problems/0ynMMM/\">剑指 Offer II 39. 直方图最大矩形面积</a></h2><p>给定非负整数数组 heights ，数组中的数字用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。</p>\n<p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p>\n<img src=\"/post/LeetCode-%E5%89%91%E6%8C%87Offer%E7%AF%87/histogram.jpg\" class=\"\" title=\"img\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：heights = [2,1,5,6,2,3]</span><br><span class=\"line\">输出：10</span><br><span class=\"line\">解释：最大的矩形为图中红色区域，面积为 10</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><p>单调栈。</p>\n<p>首先，要想找到第 i 位置最大面积是什么？</p>\n<p>是以i 为中心，向左找第一个小于 heights[i] 的位置 left_i；向右找第一个小于于 heights[i] 的位置 right_i，即最大面积为 heights[i] * (right_i - left_i -1)，如下图所示：</p>\n<p>所以，我们的问题就变成如何找 right_i 和 left_i ? </p>\n<p>最简单的思路就是，就是暴力法，直接分别在 i 左右移动。</p>\n</li>\n</ul>\n<img src=\"/post/LeetCode-%E5%89%91%E6%8C%87Offer%E7%AF%87/441ac778821dc26689b31466bced9f61ec241f092bf7e4f0f8699ef4fa3be1b2-1559826097853.png\" class=\"\" title=\"1559826097853.png\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">largestRectangleArea</span><span class=\"params\">(<span class=\"type\">int</span>[] heights)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        Deque&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span>[] new_heights = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[heights.length + <span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; heights.length + <span class=\"number\">1</span>; i++) new_heights[i] = heights[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; new_heights.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!stack.isEmpty() &amp;&amp; new_heights[stack.peek()] &gt; new_heights[i]) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> stack.pop();</span><br><span class=\"line\">                ans = Math.max(ans, (i - stack.peek()-<span class=\"number\">1</span>) * new_heights[cur]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            stack.push(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-40-矩阵中最大的矩形\"><a href=\"#剑指-Offer-II-40-矩阵中最大的矩形\" class=\"headerlink\" title=\"剑指 Offer II 40. 矩阵中最大的矩形\"></a><a href=\"https://leetcode-cn.com/problems/PLYXKQ/\">剑指 Offer II 40. 矩阵中最大的矩形</a></h2><p>给定一个由 <code>0</code> 和 <code>1</code> 组成的矩阵 <code>matrix</code> ，找出只包含 <code>1</code> 的最大矩形，并返回其面积。</p>\n<p><strong>注意：</strong>此题 <code>matrix</code> 输入格式为一维 <code>01</code> 字符串数组。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：matrix = [&quot;10100&quot;,&quot;10111&quot;,&quot;11111&quot;,&quot;10010&quot;]</span><br><span class=\"line\">输出：6</span><br><span class=\"line\">解释：最大矩形如上图所示。</span><br></pre></td></tr></table></figure>\n\n<img src=\"LeetCode-%E5%89%91%E6%8C%87Offer%E7%AF%87/maximal.jpg\" alt=\"img\" style=\"zoom:50%;\" />\n\n<hr>\n<p>解题思路：</p>\n<ul>\n<li>单调栈。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maximalRectangle</span><span class=\"params\">(String[] matrix)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">N</span> <span class=\"operator\">=</span> matrix.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (N == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">M</span> <span class=\"operator\">=</span> matrix[<span class=\"number\">0</span>].length();</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] preSum = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[N][M + <span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt;= M; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    preSum[i][j] = matrix[i].charAt(j - <span class=\"number\">1</span>) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (matrix[i].charAt(j - <span class=\"number\">1</span>) != <span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">                    preSum[i][j] = preSum[i - <span class=\"number\">1</span>][j] + matrix[i].charAt(j - <span class=\"number\">1</span>) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//单调栈</span></span><br><span class=\"line\">        Deque&lt;Integer&gt; deque = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; N; j++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span>[] temp = preSum[j];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; M + <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!deque.isEmpty() &amp;&amp; temp[deque.peek()] &gt; temp[i]) &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> deque.pop();</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">area</span> <span class=\"operator\">=</span> (i - deque.peek() - <span class=\"number\">1</span>) * (temp[cur]);</span><br><span class=\"line\">                    ans = area &gt; ans ? area : ans;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                deque.push(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"剑指-Offer-II-47-二叉树剪枝\"><a href=\"#剑指-Offer-II-47-二叉树剪枝\" class=\"headerlink\" title=\"剑指 Offer II 47. 二叉树剪枝\"></a><a href=\"https://leetcode-cn.com/problems/pOCWxh/\">剑指 Offer II 47. 二叉树剪枝</a></h2><p>给定一个二叉树 根节点 root ，树的每个节点的值要么是 0，要么是 1。请剪除该二叉树中所有节点的值为 0 的子树。</p>\n<p>节点 node 的子树为 node 本身，以及所有 node 的后代。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">1</span>,<span class=\"literal\">null</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出: [<span class=\"number\">1</span>,<span class=\"literal\">null</span>,<span class=\"number\">0</span>,<span class=\"literal\">null</span>,<span class=\"number\">1</span>] </span><br><span class=\"line\">解释: </span><br><span class=\"line\">只有红色节点满足条件“所有不包含 <span class=\"number\">1</span> 的子树”。</span><br><span class=\"line\">图为返回的答案。</span><br></pre></td></tr></table></figure>\n\n<img src=\"LeetCode-%E5%89%91%E6%8C%87Offer%E7%AF%87/1028_2.png\" alt=\"img\" style=\"zoom: 50%;\" />\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>递归删除。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">pruneTree</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left == <span class=\"literal\">null</span> &amp;&amp; root.right == <span class=\"literal\">null</span> &amp;&amp; root.val == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        root.left = pruneTree(root.left);</span><br><span class=\"line\">        root.right = pruneTree(root.right);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left == <span class=\"literal\">null</span> &amp;&amp; root.right == <span class=\"literal\">null</span> &amp;&amp; root.val == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-48-序列化与反序列化二叉树\"><a href=\"#剑指-Offer-II-48-序列化与反序列化二叉树\" class=\"headerlink\" title=\"剑指 Offer II 48. 序列化与反序列化二叉树\"></a><a href=\"https://leetcode-cn.com/problems/h54YBf/\">剑指 Offer II 48. 序列化与反序列化二叉树</a></h2><p>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。</p>\n<p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 &#x2F; 反序列化算法执行逻辑，只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p>\n<img src=\"LeetCode-%E5%89%91%E6%8C%87Offer%E7%AF%87/serdeser.jpg\" alt=\"img\" style=\"zoom:50%;\" />\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：root = [1,2,3,null,null,4,5]</span><br><span class=\"line\">输出：[1,2,3,null,null,4,5]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>层次遍历来保存和反序列化。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Codec</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Encodes a tree to a single string.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">serialize</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Deque&lt;TreeNode&gt; deque = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;TreeNode&gt;();</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        deque.offer(root);</span><br><span class=\"line\">        ans.append(root.val);</span><br><span class=\"line\">        ans.append(<span class=\"string\">&#x27;,&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!deque.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"type\">TreeNode</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> deque.poll();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.left == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                ans.append(<span class=\"string\">&quot;null&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ans.append(temp.left.val);</span><br><span class=\"line\">                deque.offer(temp.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans.append(<span class=\"string\">&#x27;,&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.right == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                ans.append(<span class=\"string\">&quot;null&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ans.append(temp.right.val);</span><br><span class=\"line\">                deque.offer(temp.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans.append(<span class=\"string\">&#x27;,&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Decodes your encoded data to tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">deserialize</span><span class=\"params\">(String data)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data == <span class=\"string\">&quot;&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String[] leaf = data.split(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">        Deque&lt;TreeNode&gt; deque = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">root</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(Integer.parseInt(leaf[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        deque.offer(root);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!deque.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"type\">TreeNode</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> deque.poll();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (leaf[index].equals(<span class=\"string\">&quot;null&quot;</span>) ) &#123;</span><br><span class=\"line\">                temp.left = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                temp.left = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(Integer.parseInt(leaf[index]));</span><br><span class=\"line\">                deque.offer(temp.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (leaf[index].equals(<span class=\"string\">&quot;null&quot;</span>)) &#123;</span><br><span class=\"line\">                temp.right = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                temp.right = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(Integer.parseInt(leaf[index]));</span><br><span class=\"line\">                deque.offer(temp.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-49-从根节点到叶节点的路径数字之和\"><a href=\"#剑指-Offer-II-49-从根节点到叶节点的路径数字之和\" class=\"headerlink\" title=\"剑指 Offer II 49. 从根节点到叶节点的路径数字之和\"></a><a href=\"https://leetcode-cn.com/problems/3Etpl5/\">剑指 Offer II 49. 从根节点到叶节点的路径数字之和</a></h2><p>给定一个二叉树的根节点 root ，树中每个节点都存放有一个 0 到 9 之间的数字。</p>\n<p>每条从根节点到叶节点的路径都代表一个数字：</p>\n<p>例如，从根节点到叶节点的路径 1 -&gt; 2 -&gt; 3 表示数字 123 。<br>计算从根节点到叶节点生成的 所有数字之和 。</p>\n<p>叶节点 是指没有子节点的节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：root = [<span class=\"number\">4</span>,<span class=\"number\">9</span>,<span class=\"number\">0</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出：<span class=\"number\">1026</span></span><br><span class=\"line\">解释：</span><br><span class=\"line\">从根到叶子节点路径 <span class=\"number\">4</span>-&gt;<span class=\"number\">9</span>-&gt;<span class=\"number\">5</span> 代表数字 <span class=\"number\">495</span></span><br><span class=\"line\">从根到叶子节点路径 <span class=\"number\">4</span>-&gt;<span class=\"number\">9</span>-&gt;<span class=\"number\">1</span> 代表数字 <span class=\"number\">491</span></span><br><span class=\"line\">从根到叶子节点路径 <span class=\"number\">4</span>-&gt;<span class=\"number\">0</span> 代表数字 <span class=\"number\">40</span></span><br><span class=\"line\">因此，数字总和 = <span class=\"number\">495</span> + <span class=\"number\">491</span> + <span class=\"number\">40</span> = <span class=\"number\">1026</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"LeetCode-%E5%89%91%E6%8C%87Offer%E7%AF%87/num2tree.jpg\" alt=\"img\" style=\"zoom:50%;\" />\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>DFS，到叶节点相加即可。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> ans;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">sumNumbers</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        DFS(root, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">DFS</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left == <span class=\"literal\">null</span> &amp;&amp; root.right == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ans += num * <span class=\"number\">10</span> + root.val;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        DFS(root.left, num*<span class=\"number\">10</span>+root.val);</span><br><span class=\"line\">        DFS(root.right, num*<span class=\"number\">10</span>+root.val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-50-向下的路径节点之和\"><a href=\"#剑指-Offer-II-50-向下的路径节点之和\" class=\"headerlink\" title=\"剑指 Offer II 50. 向下的路径节点之和\"></a><a href=\"https://leetcode-cn.com/problems/6eUYwP/\">剑指 Offer II 50. 向下的路径节点之和</a></h2><p>给定一个二叉树的根节点 root ，和一个整数 targetSum ，求该二叉树里节点值之和等于 targetSum 的 路径 的数目。</p>\n<p>路径 不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：root = [<span class=\"number\">10</span>,<span class=\"number\">5</span>,-<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"literal\">null</span>,<span class=\"number\">11</span>,<span class=\"number\">3</span>,-<span class=\"number\">2</span>,<span class=\"literal\">null</span>,<span class=\"number\">1</span>], targetSum = <span class=\"number\">8</span></span><br><span class=\"line\">输出：<span class=\"number\">3</span></span><br><span class=\"line\">解释：和等于 <span class=\"number\">8</span> 的路径有 <span class=\"number\">3</span> 条，如图所示。</span><br></pre></td></tr></table></figure>\n\n<img src=\"LeetCode-%E5%89%91%E6%8C%87Offer%E7%AF%87/pathsum3-1-tree.jpg\" alt=\"img\" style=\"zoom:50%;\" />\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><p>前缀和。</p>\n<p>​    统计以每个节点为「路径结尾」的合法数量的话，配合原本就是「从上往下」进行的数的遍历（最完整的路径必然是从原始根节点到当前节点的唯一路径），相当于只需要在完整路径中找到有多少个节点到当前节点的路径总和为 targetSum。</p>\n<p>​    于是这个树上问题彻底转换一维问题：求解从原始起点（根节点）到当前节点 b 的路径中，有多少节点 a 满足 sum[a…b]&#x3D;targetSum，由于从原始起点（根节点）到当前节点的路径唯一，因此这其实是一个「一维前缀和」问题。</p>\n<p>​    我们可以在进行树的遍历时，记录下从原始根节点 rootroot 到当前节点 curcur 路径中，从 rootroot 到任意中间节点 xx 的路径总和，配合哈希表，快速找到满足以 curcur 为「路径结尾」的、使得路径总和为 targetSumtargetSum 的目标「路径起点」有多少个。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Map&lt;Integer, Integer&gt; hashMap;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> ans, tar;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">pathSum</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> targetSum)</span> &#123;</span><br><span class=\"line\">        hashMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tar = targetSum;</span><br><span class=\"line\">        hashMap.put(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        DFS(root, root.val);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//DFS 从 root 节点出发的和为Sum的路径个数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">DFS</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> sum)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hashMap.containsKey(sum - tar)) &#123;</span><br><span class=\"line\">            ans += hashMap.get(sum - tar);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hashMap.put(sum, hashMap.getOrDefault(sum, <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left != <span class=\"literal\">null</span>) DFS(root.left, sum + root.left.val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.right != <span class=\"literal\">null</span>) DFS(root.right, sum + root.right.val);</span><br><span class=\"line\"></span><br><span class=\"line\">        hashMap.put(sum, hashMap.getOrDefault(sum, <span class=\"number\">0</span>) - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-53-二叉搜索树中的中序后继\"><a href=\"#剑指-Offer-II-53-二叉搜索树中的中序后继\" class=\"headerlink\" title=\"剑指 Offer II 53. 二叉搜索树中的中序后继\"></a><a href=\"https://leetcode-cn.com/problems/P5rCT8/\">剑指 Offer II 53. 二叉搜索树中的中序后继</a></h2><p>给定一棵二叉搜索树和其中的一个节点 p ，找到该节点在树中的中序后继。如果节点没有中序后继，请返回 null 。</p>\n<p>节点 p 的后继是值比 p.val 大的节点中键值最小的节点，即按中序遍历的顺序节点 p 的下一个节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：root = [<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"number\">1</span>], p = <span class=\"number\">6</span></span><br><span class=\"line\">输出：<span class=\"literal\">null</span></span><br><span class=\"line\">解释：因为给出的节点没有中序后继，所以答案就返回 <span class=\"literal\">null</span> 了。</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/LeetCode-%E5%89%91%E6%8C%87Offer%E7%AF%87/285_example_2.PNG\" class=\"\" title=\"img\">\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>标记法。 二叉搜索树的中序后继的特点是：中序遍历时，当找到节点P后，下一个<strong>第一次</strong>访问的节点就是中序后继节点。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> TreeNode ans;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> isP;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">inorderSuccessor</span><span class=\"params\">(TreeNode root, TreeNode p)</span> &#123;</span><br><span class=\"line\">        isP = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        ans = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//TreeNode pre = null;</span></span><br><span class=\"line\">        inOrder(root, p);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inOrder</span><span class=\"params\">(TreeNode root, TreeNode p)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        inOrder(root.left, p);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isP) &#123;</span><br><span class=\"line\">            ans = root;</span><br><span class=\"line\">            isP = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == root) &#123;</span><br><span class=\"line\">            isP = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        inOrder(root.right, p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-54-所有大于等于节点的值之和\"><a href=\"#剑指-Offer-II-54-所有大于等于节点的值之和\" class=\"headerlink\" title=\"剑指 Offer II 54. 所有大于等于节点的值之和\"></a><a href=\"https://leetcode-cn.com/problems/w6cpku/\">剑指 Offer II 54. 所有大于等于节点的值之和</a></h2><p>给定一个二叉搜索树，请将它的每个节点的值替换成树中大于或者等于该节点值的所有节点值之和。</p>\n<p>提醒一下，二叉搜索树满足下列约束条件：</p>\n<p>节点的左子树仅包含键 小于 节点键的节点。<br>节点的右子树仅包含键 大于 节点键的节点。<br>左右子树也必须是二叉搜索树。</p>\n<p>输入：root &#x3D; [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]<br>输出：[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]</p>\n<img src=\"LeetCode-%E5%89%91%E6%8C%87Offer%E7%AF%87/tree.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>右-中-左遍历。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> ans;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">convertBST</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        reverseOrder(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reverseOrder</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        reverseOrder(root.right);</span><br><span class=\"line\">        ans += root.val;</span><br><span class=\"line\">        root.val = ans;</span><br><span class=\"line\"></span><br><span class=\"line\">        reverseOrder(root.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-55-平衡二叉树\"><a href=\"#剑指-Offer-II-55-平衡二叉树\" class=\"headerlink\" title=\"剑指 Offer II 55. 平衡二叉树\"></a><a href=\"https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/\">剑指 Offer II 55. 平衡二叉树</a></h2><p>输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。</p>\n<p>示例 1:</p>\n<p>给定二叉树 [3,9,20,null,null,15,7]</p>\n<pre><code>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n返回 true 。\n</code></pre>\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><p>自底而上递归。</p>\n<p>自底向上递归的做法类似于后序遍历，对于当前遍历到的节点，先递归地判断其左右子树是否平衡，再判断以当前节点为根的子树是否平衡。如果一棵子树是平衡的，则返回其高度（高度一定是非负整数），否则返回 -1。如果存在一棵子树不平衡，则整个二叉树一定不平衡。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isBalanced</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        DFS(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">DFS</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> DFS(root.left);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> DFS(root.right);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans &amp;&amp; Math.abs(left - right) &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Math.max(left, right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ans = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-059-数据流的第-K-大数值\"><a href=\"#剑指-Offer-II-059-数据流的第-K-大数值\" class=\"headerlink\" title=\"剑指 Offer II 059. 数据流的第 K 大数值\"></a><a href=\"https://leetcode-cn.com/problems/jBjn9C/\">剑指 Offer II 059. 数据流的第 K 大数值</a></h2><p>设计一个找到数据流中第 k 大元素的类（class）。注意是排序后的第 k 大元素，不是第 k 个不同的元素。</p>\n<p>请实现 KthLargest 类：</p>\n<p>KthLargest(int k, int[] nums) 使用整数 k 和整数流 nums 初始化对象。<br>int add(int val) 将 val 插入数据流 nums 后，返回当前数据流中第 k 大的元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：</span><br><span class=\"line\">[<span class=\"string\">&quot;KthLargest&quot;</span>, <span class=\"string\">&quot;add&quot;</span>, <span class=\"string\">&quot;add&quot;</span>, <span class=\"string\">&quot;add&quot;</span>, <span class=\"string\">&quot;add&quot;</span>, <span class=\"string\">&quot;add&quot;</span>]</span><br><span class=\"line\">[[<span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>]], [<span class=\"number\">3</span>], [<span class=\"number\">5</span>], [<span class=\"number\">10</span>], [<span class=\"number\">9</span>], [<span class=\"number\">4</span>]]</span><br><span class=\"line\">输出：</span><br><span class=\"line\">[<span class=\"literal\">null</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">解释：</span><br><span class=\"line\"><span class=\"type\">KthLargest</span> <span class=\"variable\">kthLargest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">KthLargest</span>(<span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>]);</span><br><span class=\"line\">kthLargest.add(<span class=\"number\">3</span>);   <span class=\"comment\">// return 4</span></span><br><span class=\"line\">kthLargest.add(<span class=\"number\">5</span>);   <span class=\"comment\">// return 5</span></span><br><span class=\"line\">kthLargest.add(<span class=\"number\">10</span>);  <span class=\"comment\">// return 5</span></span><br><span class=\"line\">kthLargest.add(<span class=\"number\">9</span>);   <span class=\"comment\">// return 8</span></span><br><span class=\"line\">kthLargest.add(<span class=\"number\">4</span>);   <span class=\"comment\">// return 8</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路：</p>\n<ul>\n<li>大根堆。</li>\n<li>快排。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">KthLargest</span> &#123;</span><br><span class=\"line\">    PriorityQueue&lt;Integer&gt; queue;</span><br><span class=\"line\">    <span class=\"type\">int</span> k;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">KthLargest</span><span class=\"params\">(<span class=\"type\">int</span> k, <span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.k = k;</span><br><span class=\"line\">        queue = <span class=\"keyword\">new</span> <span class=\"title class_\">PriorityQueue</span>&lt;&gt;((o1, o2) -&gt; o1 - o2);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> k &lt; nums.length ? k : nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; min; i++) &#123;</span><br><span class=\"line\">            queue.offer(nums[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> min; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &gt; queue.peek()) &#123;</span><br><span class=\"line\">                queue.poll();</span><br><span class=\"line\">                queue.offer(nums[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (queue.size() &lt; k) &#123;</span><br><span class=\"line\">            queue.offer(val);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (val &gt; queue.peek()) &#123;</span><br><span class=\"line\">            queue.poll();</span><br><span class=\"line\">            queue.offer(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queue.peek();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-055-二叉搜索树迭代器\"><a href=\"#剑指-Offer-II-055-二叉搜索树迭代器\" class=\"headerlink\" title=\"剑指 Offer II 055. 二叉搜索树迭代器\"></a><a href=\"https://leetcode-cn.com/problems/kTOapQ/\">剑指 Offer II 055. 二叉搜索树迭代器</a></h2><p>实现一个二叉搜索树迭代器类BSTIterator ，表示一个按中序遍历二叉搜索树（BST）的迭代器：</p>\n<p>BSTIterator(TreeNode root) 初始化 BSTIterator 类的一个对象。BST 的根节点 root 会作为构造函数的一部分给出。指针应初始化为一个不存在于 BST 中的数字，且该数字小于 BST 中的任何元素。<br>boolean hasNext() 如果向指针右侧遍历存在数字，则返回 true ；否则返回 false 。<br>int next()将指针向右移动，然后返回指针处的数字。<br>注意，指针初始化为一个不存在于 BST 中的数字，所以对 next() 的首次调用将返回 BST 中的最小元素。</p>\n<p>可以假设 next() 调用总是有效的，也就是说，当调用 next() 时，BST 的中序遍历中至少存在一个下一个数字。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入</span><br><span class=\"line\">inputs = [<span class=\"string\">&quot;BSTIterator&quot;</span>, <span class=\"string\">&quot;next&quot;</span>, <span class=\"string\">&quot;next&quot;</span>, <span class=\"string\">&quot;hasNext&quot;</span>, <span class=\"string\">&quot;next&quot;</span>, <span class=\"string\">&quot;hasNext&quot;</span>, <span class=\"string\">&quot;next&quot;</span>, <span class=\"string\">&quot;hasNext&quot;</span>, <span class=\"string\">&quot;next&quot;</span>, <span class=\"string\">&quot;hasNext&quot;</span>]</span><br><span class=\"line\">inputs = [[[<span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">15</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"number\">9</span>, <span class=\"number\">20</span>]], [], [], [], [], [], [], [], [], []]</span><br><span class=\"line\">输出</span><br><span class=\"line\">[<span class=\"literal\">null</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"literal\">true</span>, <span class=\"number\">9</span>, <span class=\"literal\">true</span>, <span class=\"number\">15</span>, <span class=\"literal\">true</span>, <span class=\"number\">20</span>, <span class=\"literal\">false</span>]</span><br><span class=\"line\">\t<span class=\"number\">3</span></span><br><span class=\"line\">   /  \\</span><br><span class=\"line\">  <span class=\"number\">7</span>\t   <span class=\"number\">15</span></span><br><span class=\"line\">       / \\</span><br><span class=\"line\">      <span class=\"number\">9</span>   <span class=\"number\">20</span></span><br><span class=\"line\">解释</span><br><span class=\"line\"><span class=\"type\">BSTIterator</span> <span class=\"variable\">bSTIterator</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BSTIterator</span>([<span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">15</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"number\">9</span>, <span class=\"number\">20</span>]);</span><br><span class=\"line\">bSTIterator.next();    <span class=\"comment\">// 返回 3</span></span><br><span class=\"line\">bSTIterator.next();    <span class=\"comment\">// 返回 7</span></span><br><span class=\"line\">bSTIterator.hasNext(); <span class=\"comment\">// 返回 True</span></span><br><span class=\"line\">bSTIterator.next();    <span class=\"comment\">// 返回 9</span></span><br><span class=\"line\">bSTIterator.hasNext(); <span class=\"comment\">// 返回 True</span></span><br><span class=\"line\">bSTIterator.next();    <span class=\"comment\">// 返回 15</span></span><br><span class=\"line\">bSTIterator.hasNext(); <span class=\"comment\">// 返回 True</span></span><br><span class=\"line\">bSTIterator.next();    <span class=\"comment\">// 返回 20</span></span><br><span class=\"line\">bSTIterator.hasNext(); <span class=\"comment\">// 返回 False</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>将二叉搜索树的值转换为顺序数组，然后进行操作即可。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BSTIterator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> next;</span><br><span class=\"line\">    TreeNode root;</span><br><span class=\"line\">    <span class=\"comment\">// 中序遍历后有序的节点数组</span></span><br><span class=\"line\">    List&lt;Integer&gt; array;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BSTIterator</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        next = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.root = root;</span><br><span class=\"line\">        array = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        midOrder(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">next</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array.get(next++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next &lt; array.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">midOrder</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        midOrder(root.left);</span><br><span class=\"line\">        array.add(root.val);</span><br><span class=\"line\">        midOrder(root.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-060-出现频率最高的-k-个数字\"><a href=\"#剑指-Offer-II-060-出现频率最高的-k-个数字\" class=\"headerlink\" title=\"剑指 Offer II 060. 出现频率最高的 k 个数字\"></a><a href=\"https://leetcode-cn.com/problems/g5c51o/\">剑指 Offer II 060. 出现频率最高的 k 个数字</a></h2><p>给定一个整数数组 nums 和一个整数 k ，请返回其中出现频率前 k 高的元素。可以按 任意顺序 返回答案。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例 <span class=\"number\">1</span>:</span><br><span class=\"line\">输入: nums = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>], k = <span class=\"number\">2</span></span><br><span class=\"line\">输出: [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><strong>HashMap</strong>统计,然后<strong>PriorityQueue</strong>排序。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] topKFrequent(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> k) &#123;</span><br><span class=\"line\">        HashMap&lt;Integer, Integer&gt; hashMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">            hashMap.put(num, hashMap.getOrDefault(num, <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        PriorityQueue&lt;Integer[]&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">PriorityQueue</span>&lt;&gt;((o1, o2) -&gt; o1[<span class=\"number\">1</span>] - o2[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">idx</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Integer, Integer&gt; en : hashMap.entrySet()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (idx &lt; k) &#123;</span><br><span class=\"line\">                queue.offer(<span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[]&#123;en.getKey(), en.getValue()&#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (en.getValue() &gt;= queue.peek()[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    queue.poll();</span><br><span class=\"line\">                    queue.offer(<span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[]&#123;en.getKey(), en.getValue()&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            idx++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] ans = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[k];</span><br><span class=\"line\">        idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Iterator&lt;Integer[]&gt; it = queue.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">            ans[idx++] = it.next()[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-063-替换单词\"><a href=\"#剑指-Offer-II-063-替换单词\" class=\"headerlink\" title=\"剑指 Offer II 063. 替换单词\"></a><a href=\"https://leetcode-cn.com/problems/UhWRSj/\">剑指 Offer II 063. 替换单词</a></h2><p>在英语中，有一个叫做 词根(root) 的概念，它可以跟着其他一些词组成另一个较长的单词——我们称这个词为 继承词(successor)。例如，词根an，跟随着单词 other(其他)，可以形成新的单词 another(另一个)。</p>\n<p>现在，给定一个由许多词根组成的词典和一个句子，需要将句子中的所有继承词用词根替换掉。如果继承词有许多可以形成它的词根，则用最短的词根替换它。</p>\n<p>需要输出替换之后的句子。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：dictionary = [<span class=\"string\">&quot;cat&quot;</span>,<span class=\"string\">&quot;bat&quot;</span>,<span class=\"string\">&quot;rat&quot;</span>], sentence = <span class=\"string\">&quot;the cattle was rattled by the battery&quot;</span></span><br><span class=\"line\">输出：<span class=\"string\">&quot;the cat was rat by the bat&quot;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>前缀树。题目本质是找前缀。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">replaceWords</span><span class=\"params\">(List&lt;String&gt; dictionary, String sentence)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">trie</span> <span class=\"variable\">root</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">trie</span>();</span><br><span class=\"line\">        Iterator&lt;String&gt; it = dictionary.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">            root.insert(it.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String[] arr = sentence.trim().split(<span class=\"string\">&quot;\\\\s+&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            ans.append(root.preSearch(arr[i])+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans.toString().trim();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">trie</span> &#123;</span><br><span class=\"line\">        trie[] child;</span><br><span class=\"line\">        String isWord;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">trie</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            child = <span class=\"keyword\">new</span> <span class=\"title class_\">trie</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">            isWord = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(String word)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span>[] chars = word.toCharArray();</span><br><span class=\"line\">            <span class=\"type\">trie</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"type\">char</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> chars[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp.child[ch - <span class=\"string\">&#x27;a&#x27;</span>] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    temp.child[ch - <span class=\"string\">&#x27;a&#x27;</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">trie</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                temp = temp.child[ch - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp.isWord = word;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">preSearch</span><span class=\"params\">(String word)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span>[] chars = word.toCharArray();</span><br><span class=\"line\">            <span class=\"type\">trie</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"type\">char</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> chars[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp.child[ch - <span class=\"string\">&#x27;a&#x27;</span>] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> word;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                temp = temp.child[ch - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!temp.isWord.equals(<span class=\"string\">&quot;&quot;</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> temp.isWord;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> word;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-064-神奇的字典\"><a href=\"#剑指-Offer-II-064-神奇的字典\" class=\"headerlink\" title=\"剑指 Offer II 064. 神奇的字典\"></a><a href=\"https://leetcode-cn.com/problems/US1pGT/\">剑指 Offer II 064. 神奇的字典</a></h2><p>设计一个使用单词列表进行初始化的数据结构，单词列表中的单词 互不相同 。 如果给出一个单词，请判定能否只将这个单词中一个字母换成另一个字母，使得所形成的新单词存在于已构建的神奇字典中。</p>\n<p>实现 MagicDictionary 类：</p>\n<p>MagicDictionary() 初始化对象<br>void buildDict(String[] dictionary) 使用字符串数组 dictionary 设定该数据结构，dictionary 中的字符串互不相同<br>bool search(String searchWord) 给定一个字符串 searchWord ，判定能否只将字符串中 一个 字母换成另一个字母，使得所形成的新字符串能够与字典中的任一字符串匹配。如果可以，返回 true ；否则，返回 false 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例：</span><br><span class=\"line\">输入</span><br><span class=\"line\">inputs = [<span class=\"string\">&quot;MagicDictionary&quot;</span>, <span class=\"string\">&quot;buildDict&quot;</span>, <span class=\"string\">&quot;search&quot;</span>, <span class=\"string\">&quot;search&quot;</span>, <span class=\"string\">&quot;search&quot;</span>, <span class=\"string\">&quot;search&quot;</span>]</span><br><span class=\"line\">inputs = [[], [[<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;leetcode&quot;</span>]], [<span class=\"string\">&quot;hello&quot;</span>], [<span class=\"string\">&quot;hhllo&quot;</span>], [<span class=\"string\">&quot;hell&quot;</span>], [<span class=\"string\">&quot;leetcoded&quot;</span>]]</span><br><span class=\"line\">输出</span><br><span class=\"line\">[<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br><span class=\"line\"><span class=\"type\">MagicDictionary</span> <span class=\"variable\">magicDictionary</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MagicDictionary</span>();</span><br><span class=\"line\">magicDictionary.buildDict([<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;leetcode&quot;</span>]);</span><br><span class=\"line\">magicDictionary.search(<span class=\"string\">&quot;hello&quot;</span>); <span class=\"comment\">// 返回 False</span></span><br><span class=\"line\">magicDictionary.search(<span class=\"string\">&quot;hhllo&quot;</span>); <span class=\"comment\">// 将第二个 &#x27;h&#x27; 替换为 &#x27;e&#x27; 可以匹配 &quot;hello&quot; ，所以返回 True</span></span><br><span class=\"line\">magicDictionary.search(<span class=\"string\">&quot;hell&quot;</span>); <span class=\"comment\">// 返回 False</span></span><br><span class=\"line\">magicDictionary.search(<span class=\"string\">&quot;leetcoded&quot;</span>); <span class=\"comment\">// 返回 False</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>前缀树 + DFS。</li>\n<li>或者直接统计两个字符串不相同字符数，等于 1 就返回真。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MagicDictionary</span> &#123;</span><br><span class=\"line\">    MagicDictionary[] child;</span><br><span class=\"line\">    String word;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MagicDictionary</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        child = <span class=\"keyword\">new</span> <span class=\"title class_\">MagicDictionary</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">        word = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildDict</span><span class=\"params\">(String[] dictionary)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String word : dictionary) &#123;</span><br><span class=\"line\">            <span class=\"type\">MagicDictionary</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">char</span> ch : word.toCharArray()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp.child[ch - <span class=\"string\">&#x27;a&#x27;</span>] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    temp.child[ch - <span class=\"string\">&#x27;a&#x27;</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">MagicDictionary</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                temp = temp.child[ch - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp.word = word;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> ans;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">search</span><span class=\"params\">(String searchWord)</span> &#123;</span><br><span class=\"line\">        ans = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] arr = searchWord.toCharArray();</span><br><span class=\"line\">        DFS(<span class=\"built_in\">this</span>, arr, <span class=\"number\">0</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">DFS</span><span class=\"params\">(MagicDictionary root, <span class=\"type\">char</span>[] arr, <span class=\"type\">int</span> idx, <span class=\"type\">boolean</span> change)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr.length == idx) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root.word != <span class=\"literal\">null</span> &amp;&amp; change) &#123;</span><br><span class=\"line\">                ans = ans || <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ans = ans || <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> arr[idx] - <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (change &amp;&amp; root.child[index] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ans = ans || <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (change &amp;&amp; root.child[index] != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            DFS(root.child[index], arr, idx + <span class=\"number\">1</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!change) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (root.child[i] != <span class=\"literal\">null</span> &amp;&amp; i != index) &#123;</span><br><span class=\"line\">                    DFS(root.child[i], arr, idx + <span class=\"number\">1</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            DFS(root.child[index], arr, idx + <span class=\"number\">1</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"剑指-Offer-II-065-最短的单词编码\"><a href=\"#剑指-Offer-II-065-最短的单词编码\" class=\"headerlink\" title=\"剑指 Offer II 065. 最短的单词编码\"></a><a href=\"https://leetcode-cn.com/problems/iSwD2y/\">剑指 Offer II 065. 最短的单词编码</a></h2><p>单词数组 words 的 有效编码 由任意助记字符串 s 和下标数组 indices 组成，且满足：</p>\n<p>words.length &#x3D;&#x3D; indices.length<br>助记字符串 s 以 ‘#’ 字符结尾<br>对于每个下标 indices[i] ，s 的一个从 indices[i] 开始、到下一个 ‘#’ 字符结束（但不包括 ‘#’）的 子字符串 恰好与 words[i] 相等<br>给定一个单词数组 words ，返回成功对 words 进行编码的最小助记字符串 s 的长度 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：words = [<span class=\"string\">&quot;time&quot;</span>, <span class=\"string\">&quot;me&quot;</span>, <span class=\"string\">&quot;bell&quot;</span>]</span><br><span class=\"line\">输出：<span class=\"number\">10</span></span><br><span class=\"line\">解释：一组有效编码为 s = <span class=\"string\">&quot;time#bell#&quot;</span> 和 indices = [<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>] 。</span><br><span class=\"line\">words[<span class=\"number\">0</span>] = <span class=\"string\">&quot;time&quot;</span> ，s 开始于 indices[<span class=\"number\">0</span>] = <span class=\"number\">0</span> 到下一个 <span class=\"string\">&#x27;#&#x27;</span> 结束的子字符串，如加粗部分所示 <span class=\"string\">&quot;time#bell#&quot;</span></span><br><span class=\"line\">words[<span class=\"number\">1</span>] = <span class=\"string\">&quot;me&quot;</span> ，s 开始于 indices[<span class=\"number\">1</span>] = <span class=\"number\">2</span> 到下一个 <span class=\"string\">&#x27;#&#x27;</span> 结束的子字符串，如加粗部分所示 <span class=\"string\">&quot;time#bell#&quot;</span></span><br><span class=\"line\">words[<span class=\"number\">2</span>] = <span class=\"string\">&quot;bell&quot;</span> ，s 开始于 indices[<span class=\"number\">2</span>] = <span class=\"number\">5</span> 到下一个 <span class=\"string\">&#x27;#&#x27;</span> 结束的子字符串，如加粗部分所示 <span class=\"string\">&quot;time#bell#&quot;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>前缀树。 此题的本质是找后缀重合的单词。所以从后往前建立”后缀树”，然后搜索，可以优化为在建树的过程中计算。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minimumLengthEncoding</span><span class=\"params\">(String[] words)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Trie</span> <span class=\"variable\">root</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Trie</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String word : words) &#123;</span><br><span class=\"line\">            root.insert(word);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        len  = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dfs(root, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> len;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(Trie root, <span class=\"type\">int</span> deep)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root.child[i] != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                dfs(root.child[i], deep + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!flag) &#123;</span><br><span class=\"line\">            len += deep;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root.word != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                len += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Trie</span> &#123;</span><br><span class=\"line\">        Trie[] child;</span><br><span class=\"line\">        String word;</span><br><span class=\"line\">        <span class=\"comment\">//后缀</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Trie</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            child = <span class=\"keyword\">new</span> <span class=\"title class_\">Trie</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">            word = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(String word)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Trie</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">            <span class=\"type\">char</span>[] chars = word.toCharArray();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> chars.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">idx</span> <span class=\"operator\">=</span> chars[i] - <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp.child[idx] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    temp.child[idx] = <span class=\"keyword\">new</span> <span class=\"title class_\">Trie</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                temp = temp.child[idx];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp.word = word;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-066-单词之和\"><a href=\"#剑指-Offer-II-066-单词之和\" class=\"headerlink\" title=\"剑指 Offer II 066. 单词之和\"></a><a href=\"https://leetcode-cn.com/problems/z1R5dt/\">剑指 Offer II 066. 单词之和</a></h2><p>实现一个 MapSum 类，支持两个方法，insert 和 sum：</p>\n<p>MapSum() 初始化 MapSum 对象<br>void insert(String key, int val) 插入 key-val 键值对，字符串表示键 key ，整数表示值 val 。如果键 key 已经存在，那么原来的键值对将被替代成新的键值对。<br>int sum(string prefix) 返回所有以该前缀 prefix 开头的键 key 的值的总和。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例：</span><br><span class=\"line\">输入：</span><br><span class=\"line\">inputs = [<span class=\"string\">&quot;MapSum&quot;</span>, <span class=\"string\">&quot;insert&quot;</span>, <span class=\"string\">&quot;sum&quot;</span>, <span class=\"string\">&quot;insert&quot;</span>, <span class=\"string\">&quot;sum&quot;</span>]</span><br><span class=\"line\">inputs = [[], [<span class=\"string\">&quot;apple&quot;</span>, <span class=\"number\">3</span>], [<span class=\"string\">&quot;ap&quot;</span>], [<span class=\"string\">&quot;app&quot;</span>, <span class=\"number\">2</span>], [<span class=\"string\">&quot;ap&quot;</span>]]</span><br><span class=\"line\">输出：</span><br><span class=\"line\">[<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"number\">3</span>, <span class=\"literal\">null</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">解释：</span><br><span class=\"line\"><span class=\"type\">MapSum</span> <span class=\"variable\">mapSum</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MapSum</span>();</span><br><span class=\"line\">mapSum.insert(<span class=\"string\">&quot;apple&quot;</span>, <span class=\"number\">3</span>);  </span><br><span class=\"line\">mapSum.sum(<span class=\"string\">&quot;ap&quot;</span>);           <span class=\"comment\">// return 3 (apple = 3)</span></span><br><span class=\"line\">mapSum.insert(<span class=\"string\">&quot;app&quot;</span>, <span class=\"number\">2</span>);    </span><br><span class=\"line\">mapSum.sum(<span class=\"string\">&quot;ap&quot;</span>);           <span class=\"comment\">// return 5 (apple + app = 3 + 2 = 5)</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>前缀树。把节点存储的单词换为值即可，然后遍历。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MapSum</span> &#123;</span><br><span class=\"line\">    MapSum[] child;</span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MapSum</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        val = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        child = <span class=\"keyword\">new</span> <span class=\"title class_\">MapSum</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(String key, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MapSum</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> ch : key.toCharArray()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.child[ch - <span class=\"string\">&#x27;a&#x27;</span>] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                temp.child[ch - <span class=\"string\">&#x27;a&#x27;</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">MapSum</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = temp.child[ch - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp.val = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">sum</span><span class=\"params\">(String prefix)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MapSum</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> ch : prefix.toCharArray()) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">idx</span> <span class=\"operator\">=</span> ch - <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.child[idx] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = temp.child[idx];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        DFS(temp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">DFS</span><span class=\"params\">(MapSum root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.val != -<span class=\"number\">1</span>) ans += root.val;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root.child[i] != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                DFS(root.child[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"剑指-Offer-II-067-最大的异或\"><a href=\"#剑指-Offer-II-067-最大的异或\" class=\"headerlink\" title=\"剑指 Offer II 067. 最大的异或\"></a><a href=\"https://leetcode-cn.com/problems/ms70jA/\">剑指 Offer II 067. 最大的异或</a></h2><p>给定一个整数数组 nums ，返回 nums[i] XOR nums[j] 的最大运算结果，其中 0 ≤ i ≤ j &lt; n 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例 <span class=\"number\">1</span>：</span><br><span class=\"line\">输入：nums = [<span class=\"number\">3</span>,<span class=\"number\">10</span>,<span class=\"number\">5</span>,<span class=\"number\">25</span>,<span class=\"number\">2</span>,<span class=\"number\">8</span>]</span><br><span class=\"line\">输出：<span class=\"number\">28</span></span><br><span class=\"line\">解释：最大运算结果是 <span class=\"number\">5</span> XOR <span class=\"number\">25</span> = <span class=\"number\">28.</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><p>异或。</p>\n</li>\n<li><p>前缀树:</p>\n<p>搜索的方法<br>异或值最大，我们就要尽量让每个异或位都和 num 对应的二进制位不同。</p>\n<p>如果 num 当前位为 0，就到 next[1] 去搜索；<br>如果 num 当前位为 1，就到 next[0] 去搜索;<br>如果与 num 当前位相反的那一位为空，那就只能到相同的那一位去搜索了。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findMaximumXOR</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Trie</span> <span class=\"variable\">trie</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Trie</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            trie.build(nums[i]);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> trie.search(nums[i]);</span><br><span class=\"line\">            max = max &gt; val ? max : val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Trie</span> &#123;</span><br><span class=\"line\">        Trie[] child;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Trie</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            child = <span class=\"keyword\">new</span> <span class=\"title class_\">Trie</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">build</span><span class=\"params\">(Integer num)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Trie</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> (num &amp; (<span class=\"number\">1</span> &lt;&lt; i)) == <span class=\"number\">0</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp.child[flag] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    temp.child[flag] = <span class=\"keyword\">new</span> <span class=\"title class_\">Trie</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                temp = temp.child[flag];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">search</span><span class=\"params\">(Integer val)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Trie</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> (val &amp; (<span class=\"number\">1</span> &lt;&lt; i)) == <span class=\"number\">0</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (temp.child[<span class=\"number\">0</span>] != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        temp = temp.child[<span class=\"number\">0</span>];</span><br><span class=\"line\">                        ans = ans | (<span class=\"number\">1</span> &lt;&lt; i);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        temp = temp.child[<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (temp.child[<span class=\"number\">1</span>] != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        temp = temp.child[<span class=\"number\">1</span>];</span><br><span class=\"line\">                        ans = ans | (<span class=\"number\">1</span> &lt;&lt; i);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        temp = temp.child[<span class=\"number\">0</span>];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h2 id=\"剑指-Offer-II-070-排序数组中只出现一次的数字\"><a href=\"#剑指-Offer-II-070-排序数组中只出现一次的数字\" class=\"headerlink\" title=\"剑指 Offer II 070. 排序数组中只出现一次的数字\"></a><a href=\"https://leetcode-cn.com/problems/skFtm2/\">剑指 Offer II 070. 排序数组中只出现一次的数字</a></h2><p>给定一个只包含整数的有序数组 <code>nums</code> ，每个元素都会出现两次，唯有一个数只会出现一次，请找出这个唯一的数字。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>]</span><br><span class=\"line\">输出: <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路：</p>\n<ul>\n<li>二分查找，区分 区间长度的奇偶 来进行二分。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">singleNonDuplicate</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt; r) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((mid == <span class=\"number\">0</span> &amp;&amp; nums[mid] != nums[mid + <span class=\"number\">1</span>]) || (mid == nums.length - <span class=\"number\">1</span> &amp;&amp; nums[mid] != nums[mid - <span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[mid];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] != nums[mid - <span class=\"number\">1</span>] &amp;&amp; nums[mid] != nums[mid + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[mid];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mid - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; nums[mid] == nums[mid - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((mid - l) % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    r = mid - <span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mid + <span class=\"number\">1</span> &lt; nums.length &amp;&amp; nums[mid] == nums[mid + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((r - mid) % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    l = mid + <span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[l];</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-071-按权重生成随机数\"><a href=\"#剑指-Offer-II-071-按权重生成随机数\" class=\"headerlink\" title=\"剑指 Offer II 071. 按权重生成随机数\"></a><a href=\"https://leetcode-cn.com/problems/cuyjEf/\">剑指 Offer II 071. 按权重生成随机数</a></h2><p>给定一个正整数数组 w ，其中 w[i] 代表下标 i 的权重（下标从 0 开始），请写一个函数 pickIndex ，它可以随机地获取下标 i，选取下标 i 的概率与 w[i] 成正比。</p>\n<p>例如，对于 w &#x3D; [1, 3]，挑选下标 0 的概率为 1 &#x2F; (1 + 3) &#x3D; 0.25 （即，25%），而选取下标 1 的概率为 3 &#x2F; (1 + 3) &#x3D; 0.75（即，75%）。</p>\n<p>也就是说，选取下标 i 的概率为 w[i] &#x2F; sum(w) 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：</span><br><span class=\"line\">inputs = [<span class=\"string\">&quot;Solution&quot;</span>,<span class=\"string\">&quot;pickIndex&quot;</span>,<span class=\"string\">&quot;pickIndex&quot;</span>,<span class=\"string\">&quot;pickIndex&quot;</span>,<span class=\"string\">&quot;pickIndex&quot;</span>,<span class=\"string\">&quot;pickIndex&quot;</span>]</span><br><span class=\"line\">inputs = [[[<span class=\"number\">1</span>,<span class=\"number\">3</span>]],[],[],[],[],[]]</span><br><span class=\"line\">输出：</span><br><span class=\"line\">[<span class=\"literal\">null</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\">解释：</span><br><span class=\"line\"><span class=\"type\">Solution</span> <span class=\"variable\">solution</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Solution</span>([<span class=\"number\">1</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\">solution.pickIndex(); <span class=\"comment\">// 返回 1，返回下标 1，返回该下标概率为 3/4 。</span></span><br><span class=\"line\">solution.pickIndex(); <span class=\"comment\">// 返回 1</span></span><br><span class=\"line\">solution.pickIndex(); <span class=\"comment\">// 返回 1</span></span><br><span class=\"line\">solution.pickIndex(); <span class=\"comment\">// 返回 1</span></span><br><span class=\"line\">solution.pickIndex(); <span class=\"comment\">// 返回 0，返回下标 0，返回该下标概率为 1/4 。</span></span><br><span class=\"line\"></span><br><span class=\"line\">由于这是一个随机问题，允许多个答案，因此下列输出都可以被认为是正确的:</span><br><span class=\"line\">[<span class=\"literal\">null</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\">[<span class=\"literal\">null</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">[<span class=\"literal\">null</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\">[<span class=\"literal\">null</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">[<span class=\"literal\">null</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\">......</span><br><span class=\"line\">诸若此类。</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><p>前缀和 + 二分查找。</p>\n<p>把<strong>权重和total</strong>求出来，在1~total上求随机数，然后和每个权重的区间(通过前缀和求)进行映射，求得下标随机数。</p>\n<pre><code> w   3   1   4   2  total = 10 (0-3] 代表下标0  (3-4]代表1 (4-8] 代表2 ...\npre  3   4   8   10 代表具体随机的值。\n i   [1   2   3]   [4]   [5   6   7   8]   [9   10]\n</code></pre>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] preSum;</span><br><span class=\"line\">        <span class=\"type\">int</span> total;</span><br><span class=\"line\">        <span class=\"comment\">//  w   3   1   4   2</span></span><br><span class=\"line\">        <span class=\"comment\">// pre  3   4   (8   10] 代表具体随机的值。</span></span><br><span class=\"line\">        <span class=\"comment\">//  i   [1   2   3]   [4]   [5   6   7   8]   [9   10]</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Solution</span><span class=\"params\">(<span class=\"type\">int</span>[] w)</span> &#123;</span><br><span class=\"line\">            preSum = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[w.length];</span><br><span class=\"line\">            total = Arrays.stream(w).sum();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; w.length; i++) &#123;</span><br><span class=\"line\">                preSum[i] = i == <span class=\"number\">0</span> ? w[<span class=\"number\">0</span>] : w[i] + preSum[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">pickIndex</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">seed</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) (Math.random() * total) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">idx</span> <span class=\"operator\">=</span> Arrays.binarySearch(preSum, seed);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (idx &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                idx = -idx -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> idx;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"剑指-Offer-II-073-狒狒吃香蕉\"><a href=\"#剑指-Offer-II-073-狒狒吃香蕉\" class=\"headerlink\" title=\"剑指 Offer II 073. 狒狒吃香蕉\"></a><a href=\"https://leetcode-cn.com/problems/nZZqjQ/\">剑指 Offer II 073. 狒狒吃香蕉</a></h2><p>狒狒喜欢吃香蕉。这里有 N 堆香蕉，第 i 堆中有 piles[i] 根香蕉。警卫已经离开了，将在 H 小时后回来。</p>\n<p>狒狒可以决定她吃香蕉的速度 K （单位：根&#x2F;小时）。每个小时，她将会选择一堆香蕉，从中吃掉 K 根。如果这堆香蕉少于 K 根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉，下一个小时才会开始吃另一堆的香蕉。  </p>\n<p>狒狒喜欢慢慢吃，但仍然想在警卫回来前吃掉所有的香蕉。</p>\n<p>返回她可以在 H 小时内吃掉所有香蕉的最小速度 K（K 为整数）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: piles = [3,6,7,11], H = 8</span><br><span class=\"line\">输出: 4</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><p>二分查找最小速度。</p>\n<ul>\n<li>&#96;&#96;&#96;java<br>以此可以缩短判断时间。<br>time +&#x3D; (pile-1)&#x2F;K + 1;<br>&#x2F;&#x2F;time +&#x3D; pile % K &#x3D;&#x3D; 0 ? pile &#x2F; K : pile &#x2F; K + 1;<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  - 最大值范围确定可以直接赋值，省去了搜索最大值过程。</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int minEatingSpeed(int[] piles, int h) &#123;</span><br><span class=\"line\">        int left =1,right = 1000000000;</span><br><span class=\"line\">        while(left&lt;right)&#123;</span><br><span class=\"line\">            int mid = left + (right - left)/2;</span><br><span class=\"line\">            if(isFinished(piles,h,mid))&#123;</span><br><span class=\"line\">                right = mid;</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                left = mid + 1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private boolean isFinished(int[] piles,int h,int speed)&#123;</span><br><span class=\"line\">        int time = 0;</span><br><span class=\"line\">        for(int pile:piles)&#123;</span><br><span class=\"line\">            time += (pile-1)/speed + 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return time&lt;=h;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"剑指-Offer-II-074-合并区间\"><a href=\"#剑指-Offer-II-074-合并区间\" class=\"headerlink\" title=\"剑指 Offer II 074. 合并区间\"></a><a href=\"https://leetcode-cn.com/problems/SsGoHC/\">剑指 Offer II 074. 合并区间</a></h2><p>以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] &#x3D; [starti, endi] 。请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例 <span class=\"number\">1</span>：</span><br><span class=\"line\">输入：intervals = [[<span class=\"number\">1</span>,<span class=\"number\">3</span>],[<span class=\"number\">2</span>,<span class=\"number\">6</span>],[<span class=\"number\">8</span>,<span class=\"number\">10</span>],[<span class=\"number\">15</span>,<span class=\"number\">18</span>]]</span><br><span class=\"line\">输出：[[<span class=\"number\">1</span>,<span class=\"number\">6</span>],[<span class=\"number\">8</span>,<span class=\"number\">10</span>],[<span class=\"number\">15</span>,<span class=\"number\">18</span>]]</span><br><span class=\"line\">解释：区间 [<span class=\"number\">1</span>,<span class=\"number\">3</span>] 和 [<span class=\"number\">2</span>,<span class=\"number\">6</span>] 重叠, 将它们合并为 [<span class=\"number\">1</span>,<span class=\"number\">6</span>].</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><p>按开始时间排序。</p>\n<p>可以合并的肯定是连续的。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[][] merge(<span class=\"type\">int</span>[][] intervals) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intervals.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">0</span>][<span class=\"number\">2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Arrays.sort(intervals,(o1, o2) -&gt; o1[<span class=\"number\">0</span>]-o2[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        List&lt;<span class=\"type\">int</span>[]&gt; merged = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;<span class=\"type\">int</span>[]&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; intervals.length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">L</span> <span class=\"operator\">=</span> intervals[i][<span class=\"number\">0</span>], R = intervals[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (merged.size() == <span class=\"number\">0</span> || merged.get(merged.size() - <span class=\"number\">1</span>)[<span class=\"number\">1</span>] &lt; L) &#123;</span><br><span class=\"line\">                merged.add(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;L, R&#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                merged.get(merged.size() - <span class=\"number\">1</span>)[<span class=\"number\">1</span>] = Math.max(merged.get(merged.size() - <span class=\"number\">1</span>)[<span class=\"number\">1</span>], R);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> merged.toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[merged.size()][]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-079-所有子集\"><a href=\"#剑指-Offer-II-079-所有子集\" class=\"headerlink\" title=\"剑指 Offer II 079. 所有子集\"></a><a href=\"https://leetcode-cn.com/problems/TVdhkn/\">剑指 Offer II 079. 所有子集</a></h2><p>给定一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p>\n<p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p>\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>两种回溯方法。<ul>\n<li><strong>第一种，递归实现。</strong> 每个元素的两种情况往下遍历。</li>\n<li><strong>第二种，for循环实现。</strong>每个元素及其后面的元素一起遍历。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">subsets</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        traceback(ans, <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(), nums, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">traceback</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; list, <span class=\"type\">int</span>[] nums,</span></span><br><span class=\"line\"><span class=\"params\">                                 <span class=\"type\">int</span> idx)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (idx &gt;= nums.length) &#123;</span><br><span class=\"line\">            ans.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(list));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list.add(nums[idx]);</span><br><span class=\"line\">        traceback(ans, list, nums, idx + <span class=\"number\">1</span>);</span><br><span class=\"line\">        list.remove(list.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        traceback(ans, list, nums, idx + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">traceback2</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; list, <span class=\"type\">int</span>[] nums,</span></span><br><span class=\"line\"><span class=\"params\">                                 <span class=\"type\">int</span> idx)</span> &#123;</span><br><span class=\"line\">        ans.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(list));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> idx; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            list.add(nums[i]);</span><br><span class=\"line\">            traceback(ans, list, nums, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            list.remove(list.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-080-含有-k-个元素的组合\"><a href=\"#剑指-Offer-II-080-含有-k-个元素的组合\" class=\"headerlink\" title=\"剑指 Offer II 080. 含有 k 个元素的组合\"></a><a href=\"https://leetcode-cn.com/problems/uUsW3B/\">剑指 Offer II 080. 含有 k 个元素的组合</a></h2><p>给定两个整数 <code>n</code> 和 <code>k</code>，返回 <code>1 ... n</code> 中所有可能的 <code>k</code> 个数的组合。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: n = <span class=\"number\">4</span>, k = <span class=\"number\">2</span></span><br><span class=\"line\">输出:</span><br><span class=\"line\">[[<span class=\"number\">2</span>,<span class=\"number\">4</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">1</span>,<span class=\"number\">3</span>],[<span class=\"number\">1</span>,<span class=\"number\">4</span>],]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路：</p>\n<ul>\n<li>回溯方法。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">combine</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        traceback(ans, <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(), <span class=\"number\">1</span>, n, k);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">traceback</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; list, <span class=\"type\">int</span> idx, <span class=\"type\">int</span> n,</span></span><br><span class=\"line\"><span class=\"params\">                                 <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n - idx + <span class=\"number\">1</span> &lt; k)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ans.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(list));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> idx; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            list.add(i);</span><br><span class=\"line\">            traceback(ans, list, i + <span class=\"number\">1</span>, n, k - <span class=\"number\">1</span>);</span><br><span class=\"line\">            list.remove(list.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">traceback2</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; list, <span class=\"type\">int</span> idx, <span class=\"type\">int</span> n,</span></span><br><span class=\"line\"><span class=\"params\">                                  <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n - idx + <span class=\"number\">1</span> &lt; k)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ans.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(list));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list.add(idx);</span><br><span class=\"line\">        traceback(ans, list, idx + <span class=\"number\">1</span>, n, k - <span class=\"number\">1</span>);</span><br><span class=\"line\">        list.remove(list.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        traceback(ans, list, idx + <span class=\"number\">1</span>, n, k );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-081-允许重复选择元素的组合\"><a href=\"#剑指-Offer-II-081-允许重复选择元素的组合\" class=\"headerlink\" title=\"剑指 Offer II 081. 允许重复选择元素的组合\"></a><a href=\"https://leetcode-cn.com/problems/Ygoe9J/\">剑指 Offer II 081. 允许重复选择元素的组合</a></h2><p>给定一个无重复元素的正整数数组 candidates 和一个正整数 target ，找出 candidates 中所有可以使数字和为目标数 target 的唯一组合。</p>\n<p>candidates 中的数字可以无限制重复被选取。如果至少一个所选数字数量不同，则两种组合是唯一的。 </p>\n<p>对于给定的输入，保证和为 target 的唯一组合数少于 150 个。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: candidates = [2,3,6,7], target = 7</span><br><span class=\"line\">输出: [[7],[2,2,3]]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>回溯法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">combinationSum</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        traceback(ans, <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(), candidates, <span class=\"number\">0</span>, target);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">traceback</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; list, <span class=\"type\">int</span>[] candidates,</span></span><br><span class=\"line\"><span class=\"params\">                                 <span class=\"type\">int</span> idx, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target &lt; <span class=\"number\">0</span> || idx &gt;= candidates.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ans.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(list));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> idx; i &lt; candidates.length; i++) &#123;</span><br><span class=\"line\">            list.add(candidates[i]);</span><br><span class=\"line\">            traceback(ans, list, candidates, i, target - candidates[i]);</span><br><span class=\"line\">            list.remove(list.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">traceback</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; list, <span class=\"type\">int</span>[] candidates,</span></span><br><span class=\"line\"><span class=\"params\">                                 <span class=\"type\">int</span> idx, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target &lt; <span class=\"number\">0</span> || idx &gt;= candidates.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ans.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(list));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list.add(candidates[idx]);</span><br><span class=\"line\">        <span class=\"comment\">// 加上当前这个数</span></span><br><span class=\"line\">        traceback(ans, list, candidates, idx, target - candidates[idx]);</span><br><span class=\"line\">        list.remove(list.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (idx + <span class=\"number\">1</span> &gt;= candidates.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 不加当前这个数</span></span><br><span class=\"line\">        traceback(ans, list, candidates, idx + <span class=\"number\">1</span>, target);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"剑指-Offer-II-082-含有重复元素集合的组合\"><a href=\"#剑指-Offer-II-082-含有重复元素集合的组合\" class=\"headerlink\" title=\"剑指 Offer II 082. 含有重复元素集合的组合\"></a><a href=\"https://leetcode-cn.com/problems/4sjJUc/\">剑指 Offer II 082. 含有重复元素集合的组合</a></h2><p>给定一个可能有重复数字的整数数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p>\n<p>candidates 中的每个数字在每个组合中只能使用一次，解集不能包含重复的组合。 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: candidates = [<span class=\"number\">10</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>], target = <span class=\"number\">8</span>,</span><br><span class=\"line\">输出: [[<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">6</span>],[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>],[<span class=\"number\">1</span>,<span class=\"number\">7</span>],[<span class=\"number\">2</span>,<span class=\"number\">6</span>]]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>回溯法。去重用排序的方法。遇到相同的数就不再进行访问，但是要拿当前的这个数。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> HashSet&lt;List&lt;Integer&gt;&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">combinationSum2</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 为了避免重复答案</span></span><br><span class=\"line\">        Arrays.sort(candidates);</span><br><span class=\"line\">        List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        traceback(candidates, ans, list, <span class=\"number\">0</span>, <span class=\"number\">0</span>, target);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">traceback</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates, List&lt;List&lt;Integer&gt;&gt; ans,</span></span><br><span class=\"line\"><span class=\"params\">                                 List&lt;Integer&gt; list, <span class=\"type\">int</span> idx, <span class=\"type\">int</span> sum,</span></span><br><span class=\"line\"><span class=\"params\">                                 <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum == target) &#123;</span><br><span class=\"line\">            ans.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(list));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> idx; i &lt; candidates.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum + candidates[i] &gt; target) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; idx &amp;&amp; candidates[i] == candidates[i-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 因为前面那个同样的数已经经历过dfs，再拿同样的数dfs就会得到重复的答案</span></span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            list.add(candidates[i]);</span><br><span class=\"line\">            traceback(candidates, ans, list, i+<span class=\"number\">1</span>, sum + candidates[i], target);</span><br><span class=\"line\">            list.remove(list.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"剑指-Offer-II-083-没有重复元素集合的全排列\"><a href=\"#剑指-Offer-II-083-没有重复元素集合的全排列\" class=\"headerlink\" title=\"剑指 Offer II 083. 没有重复元素集合的全排列\"></a><a href=\"https://leetcode-cn.com/problems/VvJkup/\">剑指 Offer II 083. 没有重复元素集合的全排列</a></h2><p>给定一个不含重复数字的整数数组 <code>nums</code> ，返回其 <strong>所有可能的全排列</strong> 。可以 <strong>按任意顺序</strong> 返回答案。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,3]</span><br><span class=\"line\">输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>回溯。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">permute</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        traceback(ans, <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(), nums);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">traceback</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; list, <span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (list.size() == nums.length) &#123;</span><br><span class=\"line\">            ans.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(list));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i]== -<span class=\"number\">100</span>)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> nums[i];</span><br><span class=\"line\">            nums[i] = -<span class=\"number\">100</span>;</span><br><span class=\"line\">            list.add(temp);</span><br><span class=\"line\">            traceback(ans, list, nums);</span><br><span class=\"line\">            list.remove(list.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">            nums[i] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"剑指-Offer-II-116-省份数量\"><a href=\"#剑指-Offer-II-116-省份数量\" class=\"headerlink\" title=\"剑指 Offer II 116. 省份数量\"></a><a href=\"https://leetcode-cn.com/problems/bLyHh0/\">剑指 Offer II 116. 省份数量</a></h2><p>有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。</p>\n<p>省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。</p>\n<p>给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] &#x3D; 1 表示第 i 个城市和第 j 个城市直接相连，而 isConnected[i][j] &#x3D; 0 表示二者不直接相连。</p>\n<p>返回矩阵中 省份 的数量。</p>\n<img src=\"/post/LeetCode-%E5%89%91%E6%8C%87Offer%E7%AF%87/graph1.jpg\" class=\"\" title=\"img\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：isConnected = [[1,1,0],[1,1,0],[0,0,1]]</span><br><span class=\"line\">输出：2</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><p>DFS</p>\n</li>\n<li><p>BFS</p>\n</li>\n<li><p>并查集。</p>\n<p>每找到两个联通的节点，将其祖先统一。 即就是 isConnected[i][j] &#x3D; 1 时，Union(i,j)</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findCircleNum</span><span class=\"params\">(<span class=\"type\">int</span>[][] isConnected)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">N</span> <span class=\"operator\">=</span> isConnected.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] original = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[N];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            original[i] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isConnected[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 连接节点 i j</span></span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> j;</span><br><span class=\"line\">                    <span class=\"comment\">// 找左节点的 祖先</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (original[left] != left) left = original[left];</span><br><span class=\"line\">                    <span class=\"comment\">// 找右节点的 祖先</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (original[right] != right) right = original[right];</span><br><span class=\"line\">                    <span class=\"comment\">// 找到后将其中一个的祖先赋给另外一个, 这样就可以统一祖先了</span></span><br><span class=\"line\">                    original[left] = right;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (original[i] == i) &#123;</span><br><span class=\"line\">                ans++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-090-环形房屋偷盗\"><a href=\"#剑指-Offer-II-090-环形房屋偷盗\" class=\"headerlink\" title=\"剑指 Offer II 090. 环形房屋偷盗\"></a><a href=\"https://leetcode-cn.com/problems/PzWKhm/\">剑指 Offer II 090. 环形房屋偷盗</a></h2><p>一个专业的小偷，计划偷窃一个环形街道上沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。</p>\n<p>给定一个代表每个房屋存放金额的非负整数数组 nums ，请计算 在不触动警报装置的情况下 ，今晚能够偷窃到的最高金额。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出：<span class=\"number\">4</span></span><br><span class=\"line\">解释：你可以先偷窃 <span class=\"number\">1</span> 号房屋（金额 = <span class=\"number\">1</span>），然后偷窃 <span class=\"number\">3</span> 号房屋（金额 = <span class=\"number\">3</span>）。</span><br><span class=\"line\">     偷窃到的最高金额 = <span class=\"number\">1</span> + <span class=\"number\">3</span> = <span class=\"number\">4</span> 。</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><p>动态规划 + 分类讨论。</p>\n<p>前后相接，只需要讨论第一个位置是否被抢，进行两次动态规划即可。</p>\n<p>抢 1 , 则不抢最后一个。不抢 1 , 则考虑抢最后一个。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">rob</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> Math.max(nums[<span class=\"number\">0</span>], nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">        <span class=\"comment\">// rob 0</span></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = Math.max(nums[<span class=\"number\">0</span>], nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; j &lt; n - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            dp[j] = Math.max(nums[j] + dp[j - <span class=\"number\">2</span>], dp[j - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> dp[n - <span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"comment\">// rob 1</span></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = nums[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            dp[j] = Math.max(nums[j] + dp[j - <span class=\"number\">2</span>], dp[j - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(ans, dp[n - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-092-翻转字符\"><a href=\"#剑指-Offer-II-092-翻转字符\" class=\"headerlink\" title=\"剑指 Offer II 092. 翻转字符\"></a><a href=\"https://leetcode-cn.com/problems/cyJERH/\">剑指 Offer II 092. 翻转字符</a></h2><p>如果一个由 ‘0’ 和 ‘1’ 组成的字符串，是以一些 ‘0’（可能没有 ‘0’）后面跟着一些 ‘1’（也可能没有 ‘1’）的形式组成的，那么该字符串是 单调递增 的。</p>\n<p>我们给出一个由字符 ‘0’ 和 ‘1’ 组成的字符串 s，我们可以将任何 ‘0’ 翻转为 ‘1’ 或者将 ‘1’ 翻转为 ‘0’。</p>\n<p>返回使 s 单调递增 的最小翻转次数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;010110&quot;</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：我们翻转得到 011111，或者是 000111。</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路：</p>\n<ul>\n<li>动态规划。答案字符串左侧肯定都是 0 ，右侧都是 1 。所以枚举每一个分割点，统计一次左侧 1 出现的次数，右侧 0 出现的次数，加在一起便是需要反转的字符个数。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minFlipsMonoIncr</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\">        <span class=\"type\">int</span>[] pre = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            num += s.charAt(i) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">            pre[i] = num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = n - pre[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[n - <span class=\"number\">1</span>] = pre[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> Math.min(dp[<span class=\"number\">0</span>], dp[n - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            dp[i] = pre[i - <span class=\"number\">1</span>] + (n - <span class=\"number\">1</span> - i - pre[n - <span class=\"number\">1</span>] + pre[i]);</span><br><span class=\"line\">            min = Math.min(min, dp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-093-最长斐波那契数列\"><a href=\"#剑指-Offer-II-093-最长斐波那契数列\" class=\"headerlink\" title=\"剑指 Offer II 093. 最长斐波那契数列\"></a><a href=\"https://leetcode-cn.com/problems/Q91FMA/\">剑指 Offer II 093. 最长斐波那契数列</a></h2><p>如果序列 X_1, X_2, …, X_n 满足下列条件，就说它是 斐波那契式 的：</p>\n<ul>\n<li>n &gt;&#x3D; 3</li>\n<li>对于所有 i + 2 &lt;&#x3D; n，都有 $X_i + X_{i+1} &#x3D; X_{i+2}$<br>给定一个严格递增的正整数数组形成序列 arr ，找到 arr 中最长的斐波那契式的子序列的长度。如果一个不存在，返回  0 。</li>\n</ul>\n<p>（回想一下，子序列是从原序列  arr 中派生出来的，它从 arr 中删掉任意数量的元素（也可以不删），而不改变其余元素的顺序。例如， [3, 5, 8] 是 [3, 4, 5, 6, 7, 8] 的一个子序列）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: arr = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">14</span>,<span class=\"number\">18</span>]</span><br><span class=\"line\">输出: <span class=\"number\">3</span></span><br><span class=\"line\">解释: 最长的斐波那契式子序列有 [<span class=\"number\">1</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span>]、[<span class=\"number\">3</span>,<span class=\"number\">11</span>,<span class=\"number\">14</span>] 以及 [<span class=\"number\">7</span>,<span class=\"number\">11</span>,<span class=\"number\">18</span>] 。</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><p>动态规划。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    *      1   2   3   4   5   6   7   8</span></span><br><span class=\"line\"><span class=\"comment\">    *   1  1   2   2   2   2   2   2   2</span></span><br><span class=\"line\"><span class=\"comment\">    *   2      1   3   2   2   2   2   2</span></span><br><span class=\"line\"><span class=\"comment\">    *   3          1   3   4   2   2   2</span></span><br><span class=\"line\"><span class=\"comment\">    *   4              1   3   3   4   2</span></span><br><span class=\"line\"><span class=\"comment\">    *   5                  1   3   3   5</span></span><br><span class=\"line\"><span class=\"comment\">    *   6                      1   3   3</span></span><br><span class=\"line\"><span class=\"comment\">    *   7                          1   3</span></span><br><span class=\"line\"><span class=\"comment\">    *   8                              1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">dp[i][j]：表示以A[i],A[j]结尾的斐波那契数列的最大长度</span><br><span class=\"line\">             dp[i][j]=Len(......,A[i],A[j])</span><br><span class=\"line\">             A[k]+A[i]==A[j]</span><br><span class=\"line\"> dp[i][j] = max (dp[k][i]+<span class=\"number\">1</span>) 其中 A[k]+A[i]==A[j]</span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">lenLongestFibSubseq</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> arr.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || n == <span class=\"number\">1</span> || n == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n][n];</span><br><span class=\"line\">        HashMap&lt;Integer, Integer&gt; hashMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            hashMap.put(arr[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">                dp[i][j] = <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// i 开始 j 结束 A[j] - A[i] = A[k]</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (hashMap.containsKey(arr[j] - arr[i])) &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">idx</span> <span class=\"operator\">=</span> hashMap.get(arr[j] - arr[i]);</span><br><span class=\"line\">                    dp[i][j] = Math.max(dp[i][j], dp[idx][i]+<span class=\"number\">1</span>);</span><br><span class=\"line\">                    ans = Math.max(dp[i][j], ans);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans &gt;= <span class=\"number\">3</span> ? ans : <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-095-最长公共子序列\"><a href=\"#剑指-Offer-II-095-最长公共子序列\" class=\"headerlink\" title=\"剑指 Offer II 095. 最长公共子序列\"></a><a href=\"https://leetcode-cn.com/problems/qJnOS7/\">剑指 Offer II 095. 最长公共子序列</a></h2><p>给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列 的长度。如果不存在 公共子序列 ，返回 0 。</p>\n<p>一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p>\n<p>例如，”ace” 是 “abcde” 的子序列，但 “aec” 不是 “abcde” 的子序列。<br>两个字符串的 公共子序列 是这两个字符串所共同拥有的子序列。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：text1 = &quot;abcde&quot;, text2 = &quot;ace&quot; </span><br><span class=\"line\">输出：3  </span><br><span class=\"line\">解释：最长公共子序列是 &quot;ace&quot; ，它的长度为 3 。</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><p>动态规划。</p>\n</li>\n<li><p>其中 dp[i][j] 表示 text1 [0:i]和 text2 [0:j] 的最长公共子序列的长度。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       a   b   c   d   e</span><br><span class=\"line\">   ij  <span class=\"number\">0</span>   <span class=\"number\">0</span>   <span class=\"number\">0</span>   <span class=\"number\">0</span>   <span class=\"number\">0</span></span><br><span class=\"line\">a   <span class=\"number\">0</span>  <span class=\"number\">1</span>   <span class=\"number\">1</span>   <span class=\"number\">1</span>   <span class=\"number\">1</span>   <span class=\"number\">1</span></span><br><span class=\"line\">c   <span class=\"number\">0</span>  <span class=\"number\">1</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span>   <span class=\"number\">2</span>   <span class=\"number\">2</span></span><br><span class=\"line\">e   <span class=\"number\">0</span>  <span class=\"number\">1</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span>   <span class=\"number\">2</span>   <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">longestCommonSubsequence</span><span class=\"params\">(String text1, String text2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> text1.length(), n = text2.length();</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[m + <span class=\"number\">1</span>][n + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> text1.charAt(i - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">char</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> text2.charAt(j - <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c1 == c2) &#123;</span><br><span class=\"line\">                    dp[i][j] = dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    dp[i][j] = Math.max(dp[i - <span class=\"number\">1</span>][j], dp[i][j - <span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[m][n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-100-三角形中最小路径之和\"><a href=\"#剑指-Offer-II-100-三角形中最小路径之和\" class=\"headerlink\" title=\"剑指 Offer II 100. 三角形中最小路径之和\"></a><a href=\"https://leetcode-cn.com/problems/IlPe0q/\">剑指 Offer II 100. 三角形中最小路径之和</a></h2><p>给定一个三角形 triangle ，找出自顶向下的最小路径和。</p>\n<p>每一步只能移动到下一行中相邻的结点上。相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。也就是说，如果正位于当前行的下标 i ，那么下一步可以移动到下一行的下标 i 或 i + 1 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：triangle = [[<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>],[<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">3</span>]]</span><br><span class=\"line\">输出：<span class=\"number\">11</span></span><br><span class=\"line\">解释：如下面简图所示：</span><br><span class=\"line\">   <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"number\">3</span> <span class=\"number\">4</span></span><br><span class=\"line\"> <span class=\"number\">6</span> <span class=\"number\">5</span> <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"number\">1</span> <span class=\"number\">8</span> <span class=\"number\">3</span></span><br><span class=\"line\">自顶向下的最小路径和为 <span class=\"number\">11</span>（即，<span class=\"number\">2</span> + <span class=\"number\">3</span> + <span class=\"number\">5</span> + <span class=\"number\">1</span> = <span class=\"number\">11</span>）。</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>动态规划。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minimumTotal</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> triangle.size();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> triangle.get(<span class=\"number\">0</span>).get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] preDp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">        preDp[<span class=\"number\">0</span>] = triangle.get(<span class=\"number\">0</span>).get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>] = preDp[<span class=\"number\">0</span>] + triangle.get(i).get(<span class=\"number\">0</span>);</span><br><span class=\"line\">            dp[i] = preDp[i - <span class=\"number\">1</span>] + triangle.get(i).get(i);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">                dp[j] = Math.min(preDp[j], preDp[j - <span class=\"number\">1</span>]) + triangle.get(i).get(j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            preDp = Arrays.copyOf(dp, i+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : dp) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &lt; min) &#123;</span><br><span class=\"line\">                min = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-101-分割等和子集\"><a href=\"#剑指-Offer-II-101-分割等和子集\" class=\"headerlink\" title=\"剑指 Offer II 101. 分割等和子集\"></a><a href=\"https://leetcode-cn.com/problems/NUPfPr/\">剑指 Offer II 101. 分割等和子集</a></h2><p>给定一个非空的正整数数组 <code>nums</code> ，请判断能否将这些数字分成元素和相等的两部分。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,5,11,5]</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：nums 可以分割成 [1, 5, 5] 和 [11] 。</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><p>NP完全问题。动态规划转为<strong>0-1背包</strong>问题。</p>\n<p>能否从数组中选出若个数字，使它们的和等于 target &#x3D; sum &#x2F; 2，那么所有数字之和 sum 必须为偶数，若 sum 不为偶数则等和子集肯定不存在。有 n 个数字，每一步都判断该数字是否加入等和子集，最终需要判断组合的解的个数是否大于 0</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">canPartition</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> Arrays.stream(nums).sum();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sum /= <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[nums.length][sum + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= sum; i++) &#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][i] = i == nums[<span class=\"number\">0</span>] ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dp[<span class=\"number\">0</span>][sum]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt;= sum; j++) &#123;</span><br><span class=\"line\">                dp[i][j] =</span><br><span class=\"line\">                        dp[i - <span class=\"number\">1</span>][j] || (j - nums[i] &gt; <span class=\"number\">0</span> &amp;&amp; dp[i - <span class=\"number\">1</span>][j - nums[i]]) || j == nums[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dp[i][sum]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-102-加减的目标值\"><a href=\"#剑指-Offer-II-102-加减的目标值\" class=\"headerlink\" title=\"剑指 Offer II 102. 加减的目标值\"></a><a href=\"https://leetcode-cn.com/problems/YaVDxD/\">剑指 Offer II 102. 加减的目标值</a></h2><p>给定一个正整数数组 nums 和一个整数 target 。</p>\n<p>向数组中的每个整数前添加 ‘+’ 或 ‘-‘ ，然后串联起所有整数，可以构造一个 表达式 ：</p>\n<p>例如，nums &#x3D; [2, 1] ，可以在 2 之前添加 ‘+’ ，在 1 之前添加 ‘-‘ ，然后串联起来得到表达式 “+2-1” 。<br>返回可以通过上述方法构造的、运算结果等于 target 的不同 表达式 的数目。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>], target = <span class=\"number\">3</span></span><br><span class=\"line\">输出：<span class=\"number\">5</span></span><br><span class=\"line\">解释：一共有 <span class=\"number\">5</span> 种方法让最终目标和为 <span class=\"number\">3</span> 。</span><br><span class=\"line\">-<span class=\"number\">1</span> + <span class=\"number\">1</span> + <span class=\"number\">1</span> + <span class=\"number\">1</span> + <span class=\"number\">1</span> = <span class=\"number\">3</span></span><br><span class=\"line\">+<span class=\"number\">1</span> - <span class=\"number\">1</span> + <span class=\"number\">1</span> + <span class=\"number\">1</span> + <span class=\"number\">1</span> = <span class=\"number\">3</span></span><br><span class=\"line\">+<span class=\"number\">1</span> + <span class=\"number\">1</span> - <span class=\"number\">1</span> + <span class=\"number\">1</span> + <span class=\"number\">1</span> = <span class=\"number\">3</span></span><br><span class=\"line\">+<span class=\"number\">1</span> + <span class=\"number\">1</span> + <span class=\"number\">1</span> - <span class=\"number\">1</span> + <span class=\"number\">1</span> = <span class=\"number\">3</span></span><br><span class=\"line\">+<span class=\"number\">1</span> + <span class=\"number\">1</span> + <span class=\"number\">1</span> + <span class=\"number\">1</span> - <span class=\"number\">1</span> = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><p>动态规划。</p>\n<p>目标和target可以表达为:  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">负数(-neg) + 正数(pos) = target</span><br><span class=\"line\">-neg + (sum-neg) = target</span><br><span class=\"line\">sum - target = <span class=\"number\">2</span>*neg</span><br></pre></td></tr></table></figure>\n\n<p>所以只需要找到用 num[i] 组合成neg即可，转换为背包问题。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findTargetSumWays</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> Arrays.stream(nums).sum();</span><br><span class=\"line\">        target = sum - target;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target &lt; <span class=\"number\">0</span> || target % <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        target /= <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[target + <span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> target; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j - nums[i] &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                    dp[j] = dp[j - nums[i]] + dp[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[target];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"剑指-Offer-II-103-最少的硬币数目\"><a href=\"#剑指-Offer-II-103-最少的硬币数目\" class=\"headerlink\" title=\"剑指 Offer II 103. 最少的硬币数目\"></a><a href=\"https://leetcode-cn.com/problems/gaM7Ch/\">剑指 Offer II 103. 最少的硬币数目</a></h2><p>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。</p>\n<p>你可以认为每种硬币的数量是无限的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：coins = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>], amount = <span class=\"number\">11</span></span><br><span class=\"line\">输出：<span class=\"number\">3</span> </span><br><span class=\"line\">解释：<span class=\"number\">11</span> = <span class=\"number\">5</span> + <span class=\"number\">5</span> + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><p>动态规划。</p>\n<p>dp[j]表示价格为 j 时的最小硬币数，枚举价格。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[j] = Math.min(dp[j], dp[j - coins[i]] + 1);</span><br><span class=\"line\">amount  0   1   2   3   4   5   6   7   8   9   10  11</span><br><span class=\"line\">    1   0   1   2   3   4   5   6   7   8   9   10  11</span><br><span class=\"line\">    2   0   1   1   2   2   3   3   4   4   5   5   6</span><br><span class=\"line\">    3   0   1   1   1   2   2   2   3   3   3   4   4</span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">coinChange</span><span class=\"params\">(<span class=\"type\">int</span>[] coins, <span class=\"type\">int</span> amount)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (amount == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[amount + <span class=\"number\">1</span>];</span><br><span class=\"line\">        Arrays.fill(dp, amount + <span class=\"number\">1</span>);</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; coins.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt;= amount; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j - coins[i] &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    dp[j] = Math.min(dp[j], dp[j - coins[i]] + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[amount] &gt; amount ? -<span class=\"number\">1</span> : dp[amount];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-105-岛屿的最大面积\"><a href=\"#剑指-Offer-II-105-岛屿的最大面积\" class=\"headerlink\" title=\"剑指 Offer II 105. 岛屿的最大面积\"></a><a href=\"https://leetcode-cn.com/problems/ZL6zAn/\">剑指 Offer II 105. 岛屿的最大面积</a></h2><p>给定一个由 0 和 1 组成的非空二维数组 grid ，用来表示海洋岛屿地图。</p>\n<p>一个 岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在水平或者竖直方向上相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。</p>\n<p>找到给定的二维数组中最大的岛屿面积。如果没有岛屿，则返回面积为 0 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: grid = [[<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],[<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],[<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],[<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>],[<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>]]</span><br><span class=\"line\">输出: <span class=\"number\">6</span></span><br><span class=\"line\">解释: 对于上面这个给定矩阵应返回 <span class=\"number\">6</span>。注意答案不应该是 <span class=\"number\">11</span> ，因为岛屿只能包含水平或垂直的四个方向的 <span class=\"number\">1</span> 。</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>DFS。求得是最大岛屿面积，每次DFS要算出岛屿面积。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxAreaOfIsland</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    ans = Math.max(ans, DFS(grid, i, j));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">DFS</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= grid.length || j &gt;= grid[<span class=\"number\">0</span>].length || i &lt; <span class=\"number\">0</span> || j &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grid[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i + <span class=\"number\">1</span> &lt; grid.length &amp;&amp; grid[i + <span class=\"number\">1</span>][j] == <span class=\"number\">1</span>) num += DFS(grid, i + <span class=\"number\">1</span>, j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; grid[i - <span class=\"number\">1</span>][j] == <span class=\"number\">1</span>) num += DFS(grid, i - <span class=\"number\">1</span>, j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j + <span class=\"number\">1</span> &lt; grid[<span class=\"number\">0</span>].length &amp;&amp; grid[i][j + <span class=\"number\">1</span>] == <span class=\"number\">1</span>) num += DFS(grid, i, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; grid[i][j - <span class=\"number\">1</span>] == <span class=\"number\">1</span>) num += DFS(grid, i, j - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-II-106-二分图\"><a href=\"#剑指-Offer-II-106-二分图\" class=\"headerlink\" title=\"剑指 Offer II 106. 二分图\"></a><a href=\"https://leetcode-cn.com/problems/vEAB3K/\">剑指 Offer II 106. 二分图</a></h2><p>存在一个 无向图 ，图中有 n 个节点。其中每个节点都有一个介于 0 到 n - 1 之间的唯一编号。</p>\n<p>给定一个二维数组 graph ，表示图，其中 graph[u] 是一个节点数组，由节点 u 的邻接节点组成。形式上，对于 graph[u] 中的每个 v ，都存在一条位于节点 u 和节点 v 之间的无向边。该无向图同时具有以下属性：</p>\n<p>不存在自环（graph[u] 不包含 u）。<br>不存在平行边（graph[u] 不包含重复值）。<br>如果 v 在 graph[u] 内，那么 u 也应该在 graph[v] 内（该图是无向图）<br>这个图可能不是连通图，也就是说两个节点 u 和 v 之间可能不存在一条连通彼此的路径。<br>二分图 定义：如果能将一个图的节点集合分割成两个独立的子集 A 和 B ，并使图中的每一条边的两个节点一个来自 A 集合，一个来自 B 集合，就将这个图称为 二分图 。</p>\n<p>如果图是二分图，返回 true ；否则，返回 false 。</p>\n<img src=\"LeetCode-%E5%89%91%E6%8C%87Offer%E7%AF%87/bi1.jpg\" alt=\"img\" style=\"zoom:50%;\" />\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：graph = [[1,3],[0,2],[1,3],[0,2]]</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：可以将节点分成两组: &#123;0, 2&#125; 和 &#123;1, 3&#125; 。</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>染色法+DFS。相邻的染上不同颜色，如果要染得颜色不一致，返回false。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"type\">boolean</span> ans;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isBipartite</span><span class=\"params\">(<span class=\"type\">int</span>[][] graph)</span> &#123;</span><br><span class=\"line\">        ans = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] color = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[graph.length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; graph.length &amp;&amp; ans; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (color[i] == <span class=\"number\">0</span>) DFS(graph, color, i, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 第i个节点为初始节点.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">DFS</span><span class=\"params\">(<span class=\"type\">int</span>[][] graph, <span class=\"type\">int</span>[] color, <span class=\"type\">int</span> i, <span class=\"type\">int</span> rORg)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (color[i] != <span class=\"number\">0</span>) &#123;<span class=\"comment\">// 节点已经染过色</span></span><br><span class=\"line\">            <span class=\"comment\">// 和需要染得颜色不一样</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (color[i] != rORg) ans = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        color[i] = rORg;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i1 : graph[i]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 给与 i 相邻的节点都染上相反的颜色</span></span><br><span class=\"line\">            DFS(graph, color, i1, -rORg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-06-从尾到头打印链表\"><a href=\"#剑指-Offer-06-从尾到头打印链表\" class=\"headerlink\" title=\"剑指 Offer 06. 从尾到头打印链表\"></a><a href=\"https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/\">剑指 Offer 06. 从尾到头打印链表</a></h2><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [1,3,2]</span><br><span class=\"line\">输出：[2,3,1]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路：</p>\n<p>用栈进行逆序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class=\"line\">        Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            stack.push(head.val);</span><br><span class=\"line\">            head = head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> stack.size();</span><br><span class=\"line\">        <span class=\"type\">int</span>[] array = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[size];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            array[i] = stack.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"剑指-Offer-09-用两个栈实现队列\"><a href=\"#剑指-Offer-09-用两个栈实现队列\" class=\"headerlink\" title=\"剑指 Offer 09. 用两个栈实现队列\"></a><a href=\"https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/\">剑指 Offer 09. 用两个栈实现队列</a></h2><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</p>\n<p>输入：<br>[“CQueue”,”deleteHead”,”appendTail”,”appendTail”,”deleteHead”,”deleteHead”]<br>[[],[],[5],[2],[],[]]<br>输出：[null,-1,null,null,5,2]</p>\n<hr>\n<p>解题思路:</p>\n<p>双栈实现队列，当一个序列经过一个栈会变成倒序，经过两个栈会重新变为顺序。维护两个栈，第一个栈支持插入操作，第二个栈支持删除操作。</p>\n<ul>\n<li>加入队尾 appendTail()函数： 将数字 val 加入栈 A 即可。</li>\n<li>删除队首 deleteHead()函数： 有以下三种情况。<ul>\n<li>当栈 B 不为空： B中仍有已完成倒序的元素，因此直接返回 B 的栈顶元素。</li>\n<li>否则，当 A 为空： 即两个栈都为空，无元素，因此返回 -1−1 。</li>\n<li>否则： 将栈 A 元素全部转移至栈 B 中，实现元素倒序，并返回栈 B 的栈顶元素。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CQueue</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Stack&lt;Integer&gt; stackA;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Stack&lt;Integer&gt; stackB;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CQueue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        stackA = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;Integer&gt;();</span><br><span class=\"line\">        stackB = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;Integer&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">appendTail</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        stackA.push(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">deleteHead</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stackB.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stackA.isEmpty()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!stackA.empty()) &#123;</span><br><span class=\"line\">                    stackB.push(stackA.pop());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stackB.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your CQueue object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * CQueue obj = new CQueue();</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.appendTail(value);</span></span><br><span class=\"line\"><span class=\"comment\"> * int param_2 = obj.deleteHead();</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-14-I-剪绳子\"><a href=\"#剑指-Offer-14-I-剪绳子\" class=\"headerlink\" title=\"剑指 Offer 14- I. 剪绳子\"></a><a href=\"https://leetcode-cn.com/problems/jian-sheng-zi-lcof/\">剑指 Offer 14- I. 剪绳子</a></h2><p>给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 k[0],k[1]…k[m-1] 。请问 k[0]<em>k[1]</em>…*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例 <span class=\"number\">1</span>：</span><br><span class=\"line\">输入: <span class=\"number\">2</span></span><br><span class=\"line\">输出: <span class=\"number\">1</span></span><br><span class=\"line\">解释: <span class=\"number\">2</span> = <span class=\"number\">1</span> + <span class=\"number\">1</span>, <span class=\"number\">1</span> × <span class=\"number\">1</span> = <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">示例 <span class=\"number\">2</span>:</span><br><span class=\"line\">输入: <span class=\"number\">10</span></span><br><span class=\"line\">输出: <span class=\"number\">36</span></span><br><span class=\"line\">解释: <span class=\"number\">10</span> = <span class=\"number\">3</span> + <span class=\"number\">3</span> + <span class=\"number\">4</span>, <span class=\"number\">3</span> × <span class=\"number\">3</span> × <span class=\"number\">4</span> = <span class=\"number\">36</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><p>数学推理。</p>\n<p>设将长度为 n 的绳子切为 a 段：<br>$n &#x3D; n_1 + n_2 + … + n_a$ 本题等价于求解：$\\max(n_1 \\times n_2 \\times … \\times n_a)$</p>\n<p>以下公式为“算术几何均值不等式” ，等号当且仅当 $n_1 &#x3D; n_2 &#x3D; … &#x3D; n_a $时成立。$\\frac{n_1 + n_2 + … + n_a}{a} \\geq \\sqrt[a]{n_1 n_2 … n_a}$</p>\n<blockquote><p><strong>推论一：</strong> 将绳子 <strong>以相等的长度等分为多段</strong> ，得到的乘积最大。</p></blockquote>\n<p>即就是求下式的最值，求导后得最值点为 x &#x3D; e，取最近的整数点3。<br>$$<br>x^a&#x3D;x^{\\frac {x}{n}}&#x3D;(x^{\\frac {1}{x}})^n<br>$$</p>\n<blockquote><p><strong>推论二：</strong> 尽可能将绳子以长度 33 等分为多段时，乘积最大。</p></blockquote>\n<p>当 n≤3 时，按照规则应不切分，但由于题目要求必须剪成 m&gt;1 段，因此必须剪出一段长度为 1 的绳子，即返回 n - 1 。<br>当 n&gt;3 时，求 n 除以 3 的 整数部分 a 和 余数部分 b （即 n &#x3D; 3a + b），并分为以下三种情况：<br>当 b &#x3D; 0 时，直接返回 $3^a $</p>\n<p>当 b &#x3D; 1 时，要将一个 1 + 3 转换为 2+2，因此返回 $3^{a-1} \\times 4$</p>\n<p>当 b &#x3D; 2 时，返回 $3^a \\times 2$</p>\n</li>\n<li><p>动态规划。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">cuttingRope</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">residue</span> <span class=\"operator\">=</span> n % <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">quotient</span> <span class=\"operator\">=</span> n / <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (residue == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"type\">int</span>) (Math.pow(<span class=\"number\">3</span>,quotient));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (residue == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"type\">int</span>) (Math.pow(<span class=\"number\">3</span>,quotient-<span class=\"number\">1</span>))*<span class=\"number\">4</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"type\">int</span>) (Math.pow(<span class=\"number\">3</span>,quotient)) *<span class=\"number\">2</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"剑指-Offer-24-反转链表\"><a href=\"#剑指-Offer-24-反转链表\" class=\"headerlink\" title=\"剑指 Offer 24. 反转链表\"></a><a href=\"https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/\">剑指 Offer 24. 反转链表</a></h2><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例:</span><br><span class=\"line\">输入: <span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">5</span>-&gt;NULL</span><br><span class=\"line\">输出: <span class=\"number\">5</span>-&gt;<span class=\"number\">4</span>-&gt;<span class=\"number\">3</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">1</span>-&gt;NULL</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路：</p>\n<p>头插法反转链表。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">reverseList</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            temp = head;</span><br><span class=\"line\">            head = head.next;</span><br><span class=\"line\"></span><br><span class=\"line\">            temp.next = ans.next;</span><br><span class=\"line\">            ans.next = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-26-树的子结构\"><a href=\"#剑指-Offer-26-树的子结构\" class=\"headerlink\" title=\"剑指 Offer 26. 树的子结构\"></a><a href=\"https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/\">剑指 Offer 26. 树的子结构</a></h2><p>输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)</p>\n<p>B是A的子结构， 即 A中有出现和B相同的结构和节点值。</p>\n<pre><code>例如:\n给定的树 A:  \n  3\n / \\\n4   5\n   / \\\n  1   2\n给定的树 B：\n   4 \n  /\n 1\n返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。\n</code></pre>\n<hr>\n<p>解题思路：</p>\n<p>​    若树 B 是树 A 的子结构，则子结构的根节点可能为树 A 的任意一个节点。因此，判断树 B 是否是树 A 的子结构，需完成以下两步工作：</p>\n<ul>\n<li>先序遍历树 A 中的每个节点 $n_A$ 对应函数 isSubStructure(A, B)</li>\n<li>判断树 A 中 以 $n_A$为根节点的子树 是否包含树 B 。（对应函数 recur(A, B)）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSubStructure</span><span class=\"params\">(TreeNode A, TreeNode B)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A == <span class=\"literal\">null</span> || B == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> recur(A, B) || (isSubStructure(A.left, B) || isSubStructure(A.right, B));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"type\">boolean</span> <span class=\"title function_\">recur</span><span class=\"params\">(TreeNode A, TreeNode B)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (B == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (A == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A.val != B.val) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> recur(A.left, B.left) &amp;&amp; recur(A.right, B.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-28-对称的二叉树\"><a href=\"#剑指-Offer-28-对称的二叉树\" class=\"headerlink\" title=\"剑指 Offer 28. 对称的二叉树\"></a><a href=\"https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/\">剑指 Offer 28. 对称的二叉树</a></h2><p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p>\n<p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</p>\n<pre><code>    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n</code></pre>\n<p>但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</p>\n<pre><code>    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n</code></pre>\n<hr>\n<p>解题思路：</p>\n<p>递归判断。</p>\n<ul>\n<li>判断两节点 <code>L.left</code> 和 <code>R.right</code> 是否对称；</li>\n<li>判断两节点 <code>L.right</code> 和 <code>R.left</code> 是否对称；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSymmetric</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> judge(root.left, root.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">judge</span><span class=\"params\">(TreeNode left, TreeNode right)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left == <span class=\"literal\">null</span> &amp;&amp; right == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left != <span class=\"literal\">null</span> &amp;&amp; right != <span class=\"literal\">null</span> &amp;&amp; left.val == right.val) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> judge(left.left, right.right) &amp;&amp; judge(left.right, right.left);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"剑指-Offer-30-包含min函数的栈\"><a href=\"#剑指-Offer-30-包含min函数的栈\" class=\"headerlink\" title=\"剑指 Offer 30. 包含min函数的栈\"></a><a href=\"https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof/\">剑指 Offer 30. 包含min函数的栈</a></h2><p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">MinStack</span> <span class=\"variable\">minStack</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MinStack</span>();</span><br><span class=\"line\">minStack.push(-<span class=\"number\">2</span>);</span><br><span class=\"line\">minStack.push(<span class=\"number\">0</span>);</span><br><span class=\"line\">minStack.push(-<span class=\"number\">3</span>);</span><br><span class=\"line\">minStack.min();   --&gt; 返回 -<span class=\"number\">3.</span></span><br><span class=\"line\">minStack.pop();</span><br><span class=\"line\">minStack.top();      --&gt; 返回 <span class=\"number\">0.</span></span><br><span class=\"line\">minStack.min();   --&gt; 返回 -<span class=\"number\">2.</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路：</p>\n<p>双栈实现最小栈。</p>\n<p>​    两个栈<code>stack</code>，<code>minStack</code>维持相同的大小，minStack的栈顶元素是当前对应的stack栈中的最小值。</p>\n<p>​    在栈插入时，stack正常插入，minStack插入时，将插入元素与栈顶元素相比，如果栈顶元素更小，则插入栈顶元素，如果插入元素小，就插入需要插入的元素。这样维持着最小栈，当弹出最小值时只需要将minStack中的栈顶元素弹出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MinStack</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//双栈实现最小栈</span></span><br><span class=\"line\">    Stack&lt;Integer&gt; stack;</span><br><span class=\"line\">    Stack&lt;Integer&gt; minStack;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MinStack</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        minStack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        stack.push(x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minStack.empty()) &#123;</span><br><span class=\"line\">            minStack.push(x);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        minStack.push(x &gt; minStack.peek() ? minStack.peek() : x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        stack.pop();</span><br><span class=\"line\">        minStack.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">top</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack.peek();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">min</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minStack.peek();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-31-栈的压入、弹出序列\"><a href=\"#剑指-Offer-31-栈的压入、弹出序列\" class=\"headerlink\" title=\"剑指 Offer 31. 栈的压入、弹出序列\"></a><a href=\"https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/\">剑指 Offer 31. 栈的压入、弹出序列</a></h2><p>入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：我们可以按以下顺序执行：</span><br><span class=\"line\">push(1), push(2), push(3), push(4), pop() -&gt; 4,</span><br><span class=\"line\">push(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1</span><br><span class=\"line\"></span><br><span class=\"line\">输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]</span><br><span class=\"line\">输出：false</span><br><span class=\"line\">解释：1 不能在 2 之前弹出。</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路：</p>\n<ul>\n<li>模拟。创建一个栈，用出栈顺序和进栈顺序可以模拟是否可以为一个弹出序列。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">validateStackSequences</span><span class=\"params\">(<span class=\"type\">int</span>[] pushed, <span class=\"type\">int</span>[] popped)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pushed.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pushIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">popIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (pushIndex &lt; pushed.length &amp;&amp; popIndex &lt; popped.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stack.empty()) &#123;</span><br><span class=\"line\">                stack.push(pushed[pushIndex++]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (pushIndex &lt; pushed.length &amp;&amp; stack.peek() != popped[popIndex]) &#123;</span><br><span class=\"line\">                stack.push(pushed[pushIndex++]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (popIndex &lt; popped.length &amp;&amp; !stack.empty() &amp;&amp; stack.peek() == popped[popIndex]) &#123;</span><br><span class=\"line\">                popIndex++;</span><br><span class=\"line\">                stack.pop();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stack.empty() &amp;&amp; popIndex == popped.length) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pushIndex == pushed.length &amp;&amp; !stack.empty()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">validateStackSequences</span><span class=\"params\">(<span class=\"type\">int</span>[] pushed, <span class=\"type\">int</span>[] popped)</span> &#123;</span><br><span class=\"line\">        Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num : pushed) &#123;</span><br><span class=\"line\">            stack.push(num); <span class=\"comment\">// num 入栈</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!stack.isEmpty() &amp;&amp; stack.peek() == popped[i]) &#123; <span class=\"comment\">// 循环判断与出栈</span></span><br><span class=\"line\">                stack.pop();</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack.isEmpty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"剑指-Offer-34-二叉树中和为某一值的路径\"><a href=\"#剑指-Offer-34-二叉树中和为某一值的路径\" class=\"headerlink\" title=\"剑指 Offer 34. 二叉树中和为某一值的路径\"></a><a href=\"https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/\">剑指 Offer 34. 二叉树中和为某一值的路径</a></h2><p>输入一棵二叉树和一个整数，打印出二叉树中节点值的和为输入整数的所有路径。从树的根节点开始往下一直到叶节点所经过的节点形成一条路径。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例:</span><br><span class=\"line\">给定如下二叉树，以及目标和 target = <span class=\"number\">22</span>，</span><br><span class=\"line\">              <span class=\"number\">5</span></span><br><span class=\"line\">             / \\</span><br><span class=\"line\">            <span class=\"number\">4</span>   <span class=\"number\">8</span></span><br><span class=\"line\">           /   / \\</span><br><span class=\"line\">          <span class=\"number\">11</span>  <span class=\"number\">13</span>  <span class=\"number\">4</span></span><br><span class=\"line\">         /  \\    / \\</span><br><span class=\"line\">        <span class=\"number\">7</span>    <span class=\"number\">2</span>  <span class=\"number\">5</span>   <span class=\"number\">1</span></span><br><span class=\"line\">返回:</span><br><span class=\"line\">[</span><br><span class=\"line\">   [<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">11</span>,<span class=\"number\">2</span>],</span><br><span class=\"line\">   [<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>DFS</li>\n<li>BFS</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">pathSum</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        DFS(root, list, target, <span class=\"number\">0</span>, ans);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">DFS</span><span class=\"params\">(TreeNode root, List&lt;Integer&gt; list, <span class=\"type\">int</span> tar, <span class=\"type\">int</span> sum, List&lt;List&lt;Integer&gt;&gt; ans)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// if (root.val + sum == tar &amp;&amp; (root.left != null || root.right != null)) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     return;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.val + sum == tar &amp;&amp; root.left == <span class=\"literal\">null</span> &amp;&amp; root.right == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            list.add(root.val);</span><br><span class=\"line\">            List&lt;Integer&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">            Iterator&lt;Integer&gt; it = list.iterator();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">                temp.add(it.next());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans.add(temp);</span><br><span class=\"line\">            list.remove(list.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list.add(root.val);</span><br><span class=\"line\">        DFS(root.left, list, tar, sum + root.val, ans);</span><br><span class=\"line\">        DFS(root.right, list, tar, sum + root.val, ans);</span><br><span class=\"line\">        list.remove(list.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"剑指-Offer-35-复杂链表的复制\"><a href=\"#剑指-Offer-35-复杂链表的复制\" class=\"headerlink\" title=\"剑指 Offer 35. 复杂链表的复制\"></a><a href=\"https://leetcode-cn.com/problems/fu-za-lian-biao-de-fu-zhi-lcof/\">剑指 Offer 35. 复杂链表的复制</a></h2><p>请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。</p>\n<img src=\"LeetCode-%E5%89%91%E6%8C%87Offer%E7%AF%87/e1.png\" alt=\"img\" style=\"zoom: 50%;\" />\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [[<span class=\"number\">7</span>,<span class=\"literal\">null</span>],[<span class=\"number\">13</span>,<span class=\"number\">0</span>],[<span class=\"number\">11</span>,<span class=\"number\">4</span>],[<span class=\"number\">10</span>,<span class=\"number\">2</span>],[<span class=\"number\">1</span>,<span class=\"number\">0</span>]]</span><br><span class=\"line\">输出：[[<span class=\"number\">7</span>,<span class=\"literal\">null</span>],[<span class=\"number\">13</span>,<span class=\"number\">0</span>],[<span class=\"number\">11</span>,<span class=\"number\">4</span>],[<span class=\"number\">10</span>,<span class=\"number\">2</span>],[<span class=\"number\">1</span>,<span class=\"number\">0</span>]]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路：</p>\n<p>​    使用Hash表保存新旧节点的映射关系，然后待新链表创建完成后再进行随机节点的复制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Node <span class=\"title function_\">copyRandomList</span><span class=\"params\">(Node head)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">tail</span> <span class=\"operator\">=</span> ans;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">tempHead</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        HashMap&lt;Node, Node&gt; hashMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tempHead != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(tempHead.val);</span><br><span class=\"line\">            temp.next = tail.next;</span><br><span class=\"line\">            tail.next = temp;</span><br><span class=\"line\">            hashMap.put(tempHead, temp);</span><br><span class=\"line\">            tail = tail.next;</span><br><span class=\"line\">            tempHead = tempHead.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        tempHead = head;</span><br><span class=\"line\">        tail = ans.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tempHead != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tempHead.random != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                tail.random = hashMap.get(tempHead.random);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(tempHead+&quot;--&quot;+tempHead.random);</span></span><br><span class=\"line\">            tempHead = tempHead.next;</span><br><span class=\"line\">            tail = tail.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans.next;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"剑指-Offer-36-二叉搜索树与双向链表\"><a href=\"#剑指-Offer-36-二叉搜索树与双向链表\" class=\"headerlink\" title=\"剑指 Offer 36. 二叉搜索树与双向链表\"></a><a href=\"https://leetcode-cn.com/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/\">剑指 Offer 36. 二叉搜索树与双向链表</a></h2><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。</p>\n<p>为了让您更好地理解问题，以下面的二叉搜索树为例：</p>\n<img src=\"LeetCode-%E5%89%91%E6%8C%87Offer%E7%AF%87/1599401091-PKIjds-Picture1.png\" alt=\"Picture1.png\" style=\"zoom:67%;\" />\n\n<p>我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。</p>\n<p>下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。</p>\n<p>特别地，我们希望可以就地完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中的第一个节点的指针。</p>\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>中序遍历，中序遍历排序二叉树，所得的结果序列递增。所以选择中序遍历，在遍历过程中修改指针。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Node pre, head;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Node <span class=\"title function_\">treeToDoublyList</span><span class=\"params\">(Node root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre= <span class=\"literal\">null</span>;</span><br><span class=\"line\">        head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        midOrder(root);</span><br><span class=\"line\">        head.left = pre;</span><br><span class=\"line\">        pre.right = head;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">midOrder</span><span class=\"params\">(Node root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        midOrder(root.left);</span><br><span class=\"line\"><span class=\"comment\">//      1. 修改前一个节点的后 为当前节点</span></span><br><span class=\"line\"><span class=\"comment\">//      2. 修改当前节点的前 为前一个节点</span></span><br><span class=\"line\"><span class=\"comment\">//      3. 更新当前节点为前一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pre != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            pre.right = root;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            head = root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        root.left = pre;</span><br><span class=\"line\"></span><br><span class=\"line\">        pre = root;</span><br><span class=\"line\">        midOrder(root.right);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"剑指-Offer-45-把数组排成最小的数\"><a href=\"#剑指-Offer-45-把数组排成最小的数\" class=\"headerlink\" title=\"剑指 Offer 45. 把数组排成最小的数\"></a><a href=\"https://leetcode-cn.com/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/\">剑指 Offer 45. 把数组排成最小的数</a></h2><p>输入一个非负整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">3</span>,<span class=\"number\">30</span>,<span class=\"number\">34</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\">输出: <span class=\"string\">&quot;3033459&quot;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><p>重写排序。</p>\n<p>设数组 nums 中任意两数字的字符串为 x 和 y ，则规定 排序判断规则 为：</p>\n<p>若拼接字符串 x + y &gt; y + x ，则 x “大于” y ；<br>反之，若 x + y &lt; y + x，则 x “小于” y ；<br>x “小于” y 代表：排序完成后，数组中 x 应在 y 左边；“大于” 则反之。</p>\n<p>根据以上规则，套用任何排序方法对 numsnums 执行排序即可。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">minNumber</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        String[] number = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[nums.length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; number.length; i++) &#123;</span><br><span class=\"line\">            number[i] = String.valueOf(nums[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Arrays.sort(number, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(String o1, String o2)</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> o1 + o2;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> o2 + o1;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> s1.compareTo(s2);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String s : number) &#123;</span><br><span class=\"line\">            ans.append(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"剑指-Offer-46-把数字翻译成字符串\"><a href=\"#剑指-Offer-46-把数字翻译成字符串\" class=\"headerlink\" title=\"剑指 Offer 46. 把数字翻译成字符串\"></a><a href=\"https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/\">剑指 Offer 46. 把数字翻译成字符串</a></h2><p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例 <span class=\"number\">1</span>:</span><br><span class=\"line\">输入: <span class=\"number\">12258</span></span><br><span class=\"line\">输出: <span class=\"number\">5</span></span><br><span class=\"line\">解释: <span class=\"number\">12258</span>有<span class=\"number\">5</span>种不同的翻译，分别是<span class=\"string\">&quot;bccfi&quot;</span>, <span class=\"string\">&quot;bwfi&quot;</span>, <span class=\"string\">&quot;bczi&quot;</span>, <span class=\"string\">&quot;mcfi&quot;</span>和<span class=\"string\">&quot;mzi&quot;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路：</p>\n<ul>\n<li>动态规划。<br>$$<br>dp[i] &#x3D; \\begin{cases}<br>dp[i-1]+dp[i-2],&amp; 10\\le x_i x_{i-1} \\le25 \\<br>dp[i-1],&amp;else \\<br>\\end{cases}<br>$$</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">translateNum</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> String.valueOf(num);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> str.length();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">25</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[str.length()];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> Integer.parseInt(str.substring(<span class=\"number\">0</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = temp &lt;= <span class=\"number\">25</span>  &amp;&amp; temp &gt;= <span class=\"number\">10</span>? <span class=\"number\">2</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            temp = Integer.parseInt(str.substring(i - <span class=\"number\">1</span>, i + <span class=\"number\">1</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp &gt;= <span class=\"number\">10</span> &amp;&amp; temp &lt;= <span class=\"number\">25</span>) &#123;</span><br><span class=\"line\">                dp[i] = dp[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                dp[i] = dp[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"剑指-Offer-41-数据流中的中位数\"><a href=\"#剑指-Offer-41-数据流中的中位数\" class=\"headerlink\" title=\"剑指 Offer 41. 数据流中的中位数\"></a><a href=\"https://leetcode-cn.com/problems/shu-ju-liu-zhong-de-zhong-wei-shu-lcof/\">剑指 Offer 41. 数据流中的中位数</a></h2><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。</p>\n<p>例如，</p>\n<p>[2,3,4] 的中位数是 3</p>\n<p>[2,3] 的中位数是 (2 + 3) &#x2F; 2 &#x3D; 2.5</p>\n<p>设计一个支持以下两种操作的数据结构：</p>\n<p>void addNum(int num) - 从数据流中添加一个整数到数据结构中。<br>double findMedian() - 返回目前所有元素的中位数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例 <span class=\"number\">1</span>：</span><br><span class=\"line\">输入：</span><br><span class=\"line\">[<span class=\"string\">&quot;MedianFinder&quot;</span>,<span class=\"string\">&quot;addNum&quot;</span>,<span class=\"string\">&quot;addNum&quot;</span>,<span class=\"string\">&quot;findMedian&quot;</span>,<span class=\"string\">&quot;addNum&quot;</span>,<span class=\"string\">&quot;findMedian&quot;</span>]</span><br><span class=\"line\">[[],[<span class=\"number\">1</span>],[<span class=\"number\">2</span>],[],[<span class=\"number\">3</span>],[]]</span><br><span class=\"line\">输出：[<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>,<span class=\"number\">1.50000</span>,<span class=\"literal\">null</span>,<span class=\"number\">2.00000</span>]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><p>大顶堆 + 小顶堆。</p>\n<p>建立一个 小顶堆 AA 和 大顶堆 BB ，各保存列表的一半元素，且规定：</p>\n<ul>\n<li><p>A 保存 较大 的一半，长度为 $\\frac{N}{2}$ （N 为偶数）或 $\\frac{N+1}{2}$ （N为奇数）;</p>\n</li>\n<li><p>BB 保存 较小 的一半，长度为 $\\frac{N}{2}$ （N 为偶数）或 $\\frac{N-1}{2} $（NN 为奇数）；</p>\n<p>随后，中位数可仅根据 A,B 的堆顶元素计算得到。</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MedianFinder</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** initialize your data structure here. */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PriorityQueue&lt;Integer&gt; smallHeap;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> PriorityQueue&lt;Integer&gt; bigHeap;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MedianFinder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        smallHeap = <span class=\"keyword\">new</span> <span class=\"title class_\">PriorityQueue</span>&lt;&gt;();</span><br><span class=\"line\">            bigHeap = <span class=\"keyword\">new</span> <span class=\"title class_\">PriorityQueue</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> o2 - o1;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addNum</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bigHeap.isEmpty() || num &lt;= bigHeap.peek()) &#123;</span><br><span class=\"line\">                bigHeap.offer(num);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                smallHeap.offer(num);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">N1</span> <span class=\"operator\">=</span> bigHeap.size();</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">N2</span> <span class=\"operator\">=</span> smallHeap.size();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (N1 - N2 &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                smallHeap.offer(bigHeap.poll());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (N1 - N2 &lt;= -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                bigHeap.offer(smallHeap.poll());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">findMedian</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">N1</span> <span class=\"operator\">=</span> bigHeap.size();</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">N2</span> <span class=\"operator\">=</span> smallHeap.size();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (N1 == N2) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ((<span class=\"type\">double</span>) smallHeap.peek() + bigHeap.peek()) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bigHeap.peek();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your MedianFinder object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * MedianFinder obj = new MedianFinder();</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.addNum(num);</span></span><br><span class=\"line\"><span class=\"comment\"> * double param_2 = obj.findMedian();</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"剑指-Offer-48-最长不含重复字符的子字符串\"><a href=\"#剑指-Offer-48-最长不含重复字符的子字符串\" class=\"headerlink\" title=\"剑指 Offer 48. 最长不含重复字符的子字符串\"></a><a href=\"https://leetcode-cn.com/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof/\">剑指 Offer 48. 最长不含重复字符的子字符串</a></h2><p>请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例 <span class=\"number\">1</span>:</span><br><span class=\"line\">输入: <span class=\"string\">&quot;abcabcbb&quot;</span></span><br><span class=\"line\">输出: <span class=\"number\">3</span> </span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 <span class=\"string\">&quot;abc&quot;</span>，所以其长度为 <span class=\"number\">3</span>。</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路：</p>\n<ul>\n<li><p>双指针+哈希表。</p>\n<p>哈希表存储字符最后一次出现的索引，遍历字符串，双指针统计<code>最长不含重复字符</code>的子串。</p>\n<p>右指针依次遍历每个字符。</p>\n<p>当右指针指向的元素在前面出现过时，更新左指针。$$left &#x3D; Math.max(hashMap.get(ch) + 1, left);$$</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">         HashMap&lt;Character, Integer&gt; hashMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (right &lt; s.length()) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> s.charAt(right);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hashMap.containsKey(ch)) &#123;</span><br><span class=\"line\">                left = Math.max(hashMap.get(ch) + <span class=\"number\">1</span>, left);</span><br><span class=\"line\">                hashMap.replace(ch, right);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                hashMap.put(ch, right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max = max &gt; right - left + <span class=\"number\">1</span> ? max : right - left + <span class=\"number\">1</span>;</span><br><span class=\"line\">            right++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剑指-Offer-49-丑数\"><a href=\"#剑指-Offer-49-丑数\" class=\"headerlink\" title=\"剑指 Offer 49. 丑数\"></a><a href=\"https://leetcode-cn.com/problems/chou-shu-lcof/\">剑指 Offer 49. 丑数</a></h2><p>我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例:</span><br><span class=\"line\">输入: n = <span class=\"number\">10</span></span><br><span class=\"line\">输出: <span class=\"number\">12</span></span><br><span class=\"line\">解释: <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span> 是前 <span class=\"number\">10</span> 个丑数。</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li>动态规划。 和选择素数一样，只需要从1开始，选择所有丑数的2 、 3 、5 倍数，自然就是丑数，当需要顺序找到第几个时，需要用三个指针来判断顺序。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">nthUglyNumber</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] flag = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">        flag[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">p2</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">p3</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">p5</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">num2</span> <span class=\"operator\">=</span> flag[p2] * <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">num3</span> <span class=\"operator\">=</span> flag[p3] * <span class=\"number\">3</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">num5</span> <span class=\"operator\">=</span> flag[p5] * <span class=\"number\">5</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> Math.min(num2, Math.min(num3, num5));</span><br><span class=\"line\">            flag[i] = min;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (min == num2) &#123;</span><br><span class=\"line\">                p2++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (min == num3) &#123;</span><br><span class=\"line\">                p3++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (min == num5) &#123;</span><br><span class=\"line\">                p5++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"剑指-Offer-60-n个骰子的点数\"><a href=\"#剑指-Offer-60-n个骰子的点数\" class=\"headerlink\" title=\"剑指 Offer 60. n个骰子的点数\"></a><a href=\"https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof/\">剑指 Offer 60. n个骰子的点数</a></h2><p>把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。</p>\n<p> 你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: <span class=\"number\">2</span></span><br><span class=\"line\">输出: [<span class=\"number\">0.02778</span>,<span class=\"number\">0.05556</span>,<span class=\"number\">0.08333</span>,<span class=\"number\">0.11111</span>,<span class=\"number\">0.13889</span>,<span class=\"number\">0.16667</span>,<span class=\"number\">0.13889</span>,<span class=\"number\">0.11111</span>,<span class=\"number\">0.08333</span>,<span class=\"number\">0.05556</span>,<span class=\"number\">0.02778</span>]</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><p>暴力。超时</p>\n</li>\n<li><p>动态规划。</p>\n<img src=\"/post/LeetCode-%E5%89%91%E6%8C%87Offer%E7%AF%87/image-20210929162210939.png\" class=\"\" title=\"image-20210929162210939\">\n\n<img src=\"/post/LeetCode-%E5%89%91%E6%8C%87Offer%E7%AF%87/image-20210929162222971.png\" class=\"\" title=\"image-20210929162222971\">\n\n<img src=\"/post/LeetCode-%E5%89%91%E6%8C%87Offer%E7%AF%87/image-20210929162247423.png\" class=\"\" title=\"image-20210929162247423\">\n\n<p>以此类推，前一次掷的骰子概率×1&#x2F;6，然后求和就好。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span>[] dicesProbability(<span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">double</span>[<span class=\"number\">6</span>];</span><br><span class=\"line\">        Arrays.fill(dp, <span class=\"number\">1.0</span> / <span class=\"number\">6</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">double</span>[] ans = <span class=\"keyword\">new</span> <span class=\"title class_\">double</span>[i * <span class=\"number\">5</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; dp.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; <span class=\"number\">6</span>; k++) &#123;</span><br><span class=\"line\">                    ans[j + k] += dp[j] / <span class=\"number\">6.0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dp = ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"剑指-Offer-64-求1-2-…-n\"><a href=\"#剑指-Offer-64-求1-2-…-n\" class=\"headerlink\" title=\"剑指 Offer 64. 求1+2+…+n\"></a><a href=\"https://leetcode-cn.com/problems/qiu-12n-lcof/\">剑指 Offer 64. 求1+2+…+n</a></h2><p>求 1+2+…+n ，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例 <span class=\"number\">1</span>：</span><br><span class=\"line\">输入: n = <span class=\"number\">3</span></span><br><span class=\"line\">输出: <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>解题思路:</p>\n<ul>\n<li><p>递归。</p>\n<p>不使用循环时，递归是一个很好的办法，但是要求不使用if语句，所以难点是处理递归出口，解决办法是利用<code>&amp;&amp;</code>的短路运算性质。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">sumNums</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> n &gt; <span class=\"number\">0</span> &amp;&amp; (n += sumNums(n - <span class=\"number\">1</span>)) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","feature":true,"text":"剑指 Offer剑指 Offer II 4. 只出现一次的数字 给你一个整数数组 nums ，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次 。请你找出并返回那个只出现了一次的元素。 12输入：nums = [0,1,0,1,0,1,100]输出：100 解题思路： 状态...","link":"","photos":[],"count_time":{"symbolsCount":"85k","symbolsTime":"1:17"},"categories":[{"name":"算法","slug":"算法","count":1,"path":"api/categories/算法.json"}],"tags":[{"name":"Java","slug":"Java","count":4,"path":"api/tags/Java.json"},{"name":"刷题","slug":"刷题","count":1,"path":"api/tags/刷题.json"},{"name":"数据结构","slug":"数据结构","count":1,"path":"api/tags/数据结构.json"},{"name":"算法","slug":"算法","count":1,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer\"><span class=\"toc-text\">剑指 Offer</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-4-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97\"><span class=\"toc-text\">剑指 Offer II 4. 只出现一次的数字 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-14-%E5%89%AA%E7%BB%B3%E5%AD%90-II\"><span class=\"toc-text\">剑指 Offer II 14. 剪绳子 II</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-15-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E5%8F%98%E4%BD%8D%E8%AF%8D\"><span class=\"toc-text\">剑指 Offer II 15. 字符串中的所有变位词</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-30-%E6%8F%92%E5%85%A5%E3%80%81%E5%88%A0%E9%99%A4%E5%92%8C%E9%9A%8F%E6%9C%BA%E8%AE%BF%E9%97%AE%E9%83%BD%E6%98%AF-O-1-%E7%9A%84%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">剑指 Offer II 30. 插入、删除和随机访问都是 O(1) 的容器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-37-%E5%B0%8F%E8%A1%8C%E6%98%9F%E7%A2%B0%E6%92%9E\"><span class=\"toc-text\">剑指 Offer II 37. 小行星碰撞</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-39-%E7%9B%B4%E6%96%B9%E5%9B%BE%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A7%AF\"><span class=\"toc-text\">剑指 Offer II 39. 直方图最大矩形面积</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-40-%E7%9F%A9%E9%98%B5%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2\"><span class=\"toc-text\">剑指 Offer II 40. 矩阵中最大的矩形</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-47-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%AA%E6%9E%9D\"><span class=\"toc-text\">剑指 Offer II 47. 二叉树剪枝</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-48-%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">剑指 Offer II 48. 序列化与反序列化二叉树</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-49-%E4%BB%8E%E6%A0%B9%E8%8A%82%E7%82%B9%E5%88%B0%E5%8F%B6%E8%8A%82%E7%82%B9%E7%9A%84%E8%B7%AF%E5%BE%84%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C\"><span class=\"toc-text\">剑指 Offer II 49. 从根节点到叶节点的路径数字之和</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-50-%E5%90%91%E4%B8%8B%E7%9A%84%E8%B7%AF%E5%BE%84%E8%8A%82%E7%82%B9%E4%B9%8B%E5%92%8C\"><span class=\"toc-text\">剑指 Offer II 50. 向下的路径节点之和</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-53-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E4%B8%AD%E5%BA%8F%E5%90%8E%E7%BB%A7\"><span class=\"toc-text\">剑指 Offer II 53. 二叉搜索树中的中序后继</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-54-%E6%89%80%E6%9C%89%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E%E8%8A%82%E7%82%B9%E7%9A%84%E5%80%BC%E4%B9%8B%E5%92%8C\"><span class=\"toc-text\">剑指 Offer II 54. 所有大于等于节点的值之和</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-55-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">剑指 Offer II 55. 平衡二叉树</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-059-%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E7%AC%AC-K-%E5%A4%A7%E6%95%B0%E5%80%BC\"><span class=\"toc-text\">剑指 Offer II 059. 数据流的第 K 大数值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-055-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">剑指 Offer II 055. 二叉搜索树迭代器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-060-%E5%87%BA%E7%8E%B0%E9%A2%91%E7%8E%87%E6%9C%80%E9%AB%98%E7%9A%84-k-%E4%B8%AA%E6%95%B0%E5%AD%97\"><span class=\"toc-text\">剑指 Offer II 060. 出现频率最高的 k 个数字</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-063-%E6%9B%BF%E6%8D%A2%E5%8D%95%E8%AF%8D\"><span class=\"toc-text\">剑指 Offer II 063. 替换单词</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-064-%E7%A5%9E%E5%A5%87%E7%9A%84%E5%AD%97%E5%85%B8\"><span class=\"toc-text\">剑指 Offer II 064. 神奇的字典</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-065-%E6%9C%80%E7%9F%AD%E7%9A%84%E5%8D%95%E8%AF%8D%E7%BC%96%E7%A0%81\"><span class=\"toc-text\">剑指 Offer II 065. 最短的单词编码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-066-%E5%8D%95%E8%AF%8D%E4%B9%8B%E5%92%8C\"><span class=\"toc-text\">剑指 Offer II 066. 单词之和</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-067-%E6%9C%80%E5%A4%A7%E7%9A%84%E5%BC%82%E6%88%96\"><span class=\"toc-text\">剑指 Offer II 067. 最大的异或</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-070-%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97\"><span class=\"toc-text\">剑指 Offer II 070. 排序数组中只出现一次的数字</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-071-%E6%8C%89%E6%9D%83%E9%87%8D%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0\"><span class=\"toc-text\">剑指 Offer II 071. 按权重生成随机数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-073-%E7%8B%92%E7%8B%92%E5%90%83%E9%A6%99%E8%95%89\"><span class=\"toc-text\">剑指 Offer II 073. 狒狒吃香蕉</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-074-%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4\"><span class=\"toc-text\">剑指 Offer II 074. 合并区间</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-079-%E6%89%80%E6%9C%89%E5%AD%90%E9%9B%86\"><span class=\"toc-text\">剑指 Offer II 079. 所有子集</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-080-%E5%90%AB%E6%9C%89-k-%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E7%BB%84%E5%90%88\"><span class=\"toc-text\">剑指 Offer II 080. 含有 k 个元素的组合</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-081-%E5%85%81%E8%AE%B8%E9%87%8D%E5%A4%8D%E9%80%89%E6%8B%A9%E5%85%83%E7%B4%A0%E7%9A%84%E7%BB%84%E5%90%88\"><span class=\"toc-text\">剑指 Offer II 081. 允许重复选择元素的组合</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-082-%E5%90%AB%E6%9C%89%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%E9%9B%86%E5%90%88%E7%9A%84%E7%BB%84%E5%90%88\"><span class=\"toc-text\">剑指 Offer II 082. 含有重复元素集合的组合</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-083-%E6%B2%A1%E6%9C%89%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%E9%9B%86%E5%90%88%E7%9A%84%E5%85%A8%E6%8E%92%E5%88%97\"><span class=\"toc-text\">剑指 Offer II 083. 没有重复元素集合的全排列</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-116-%E7%9C%81%E4%BB%BD%E6%95%B0%E9%87%8F\"><span class=\"toc-text\">剑指 Offer II 116. 省份数量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-090-%E7%8E%AF%E5%BD%A2%E6%88%BF%E5%B1%8B%E5%81%B7%E7%9B%97\"><span class=\"toc-text\">剑指 Offer II 090. 环形房屋偷盗</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-092-%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">剑指 Offer II 092. 翻转字符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-093-%E6%9C%80%E9%95%BF%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97\"><span class=\"toc-text\">剑指 Offer II 093. 最长斐波那契数列</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-095-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97\"><span class=\"toc-text\">剑指 Offer II 095. 最长公共子序列</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-100-%E4%B8%89%E8%A7%92%E5%BD%A2%E4%B8%AD%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E4%B9%8B%E5%92%8C\"><span class=\"toc-text\">剑指 Offer II 100. 三角形中最小路径之和</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-101-%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86\"><span class=\"toc-text\">剑指 Offer II 101. 分割等和子集</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-102-%E5%8A%A0%E5%87%8F%E7%9A%84%E7%9B%AE%E6%A0%87%E5%80%BC\"><span class=\"toc-text\">剑指 Offer II 102. 加减的目标值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-103-%E6%9C%80%E5%B0%91%E7%9A%84%E7%A1%AC%E5%B8%81%E6%95%B0%E7%9B%AE\"><span class=\"toc-text\">剑指 Offer II 103. 最少的硬币数目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-105-%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF\"><span class=\"toc-text\">剑指 Offer II 105. 岛屿的最大面积</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-II-106-%E4%BA%8C%E5%88%86%E5%9B%BE\"><span class=\"toc-text\">剑指 Offer II 106. 二分图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-06-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">剑指 Offer 06. 从尾到头打印链表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-09-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97\"><span class=\"toc-text\">剑指 Offer 09. 用两个栈实现队列</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-14-I-%E5%89%AA%E7%BB%B3%E5%AD%90\"><span class=\"toc-text\">剑指 Offer 14- I. 剪绳子</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-24-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">剑指 Offer 24. 反转链表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-26-%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">剑指 Offer 26. 树的子结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-28-%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">剑指 Offer 28. 对称的二叉树</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-30-%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88\"><span class=\"toc-text\">剑指 Offer 30. 包含min函数的栈</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-31-%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E3%80%81%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97\"><span class=\"toc-text\">剑指 Offer 31. 栈的压入、弹出序列</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-34-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E5%80%BC%E7%9A%84%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">剑指 Offer 34. 二叉树中和为某一值的路径</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-35-%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6\"><span class=\"toc-text\">剑指 Offer 35. 复杂链表的复制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-36-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">剑指 Offer 36. 二叉搜索树与双向链表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-45-%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0\"><span class=\"toc-text\">剑指 Offer 45. 把数组排成最小的数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-46-%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">剑指 Offer 46. 把数字翻译成字符串</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-41-%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%AD%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0\"><span class=\"toc-text\">剑指 Offer 41. 数据流中的中位数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-48-%E6%9C%80%E9%95%BF%E4%B8%8D%E5%90%AB%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">剑指 Offer 48. 最长不含重复字符的子字符串</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-49-%E4%B8%91%E6%95%B0\"><span class=\"toc-text\">剑指 Offer 49. 丑数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-60-n%E4%B8%AA%E9%AA%B0%E5%AD%90%E7%9A%84%E7%82%B9%E6%95%B0\"><span class=\"toc-text\">剑指 Offer 60. n个骰子的点数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%91%E6%8C%87-Offer-64-%E6%B1%821-2-%E2%80%A6-n\"><span class=\"toc-text\">剑指 Offer 64. 求1+2+…+n</span></a></li></ol></li></ol>","author":{"name":"张 凡","slug":"张-凡","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"少年与爱永不老去 <br/>即使披荆斩棘,丢失怒马鲜衣。","socials":{"github":"https://github.com/Zhang-F4N","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/36174882"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode-cn.com/u/zhong-an-zu-zhi-hu-z/"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"东野圭吾选摘","uid":"cd32aca21f1fb5eccdd0b0a556926460","slug":"东野圭吾选摘","date":"2022-04-08T08:06:49.000Z","updated":"2022-04-08T08:36:06.423Z","comments":true,"path":"api/articles/东野圭吾选摘.json","keywords":null,"cover":[],"text":"东野圭吾摘选东野圭吾 虚无的十字架“我看男人太没眼光了，只是因为憧憬结婚，没想到一步错，步步错。” 任何事只从单方面观察，都无法把握真相。 到底有谁可以断言，“这个杀人凶手只要在监狱关多少多少年，就可以改邪归正”，把杀人凶手绑在这种虚无的十字架上，到底有什么意义？ 事到如今，她终...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"文摘","slug":"文摘","count":3,"path":"api/categories/文摘.json"}],"tags":[{"name":"东野圭吾","slug":"东野圭吾","count":1,"path":"api/tags/东野圭吾.json"}],"author":{"name":"张 凡","slug":"张-凡","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"少年与爱永不老去 <br/>即使披荆斩棘,丢失怒马鲜衣。","socials":{"github":"https://github.com/Zhang-F4N","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/36174882"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode-cn.com/u/zhong-an-zu-zhi-hu-z/"}}}},"feature":true}}
{"title":"Java高频八股文","uid":"73914c70a525ea7d633ba7d52ba12831","slug":"Java高频八股文","date":"2022-05-05T13:42:50.000Z","updated":"2022-05-05T14:12:41.832Z","comments":true,"path":"api/articles/Java高频八股文.json","keywords":null,"cover":null,"content":"<h2 id=\"1-二分查找\"><a href=\"#1-二分查找\" class=\"headerlink\" title=\"1. 二分查找\"></a>1. 二分查找</h2><p>比较基础,注意边界问题和mid的计算 <code>mid = (l + r) &gt;&gt;&gt; 1;</code></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class MyBinarySearch &#123;\n    &#x2F;*\n     *  搜索次数 log2(M) + 1 向上取整 即就是搜索树的树深\n     * *&#x2F;\n    public static void main(String[] args) &#123;\n        int[] arr &#x3D; &#123;1, 5, 8, 11, 19, 22, 31, 35, 40, 45, 48, 49, 50&#125;;\n        int tar &#x3D; 47;\n        int l &#x3D; 0, r &#x3D; arr.length - 1;\n        while (l &lt;&#x3D; r) &#123;\n            int mid &#x3D; (l + r) &gt;&gt;&gt; 1;\n            if (arr[mid] &#x3D;&#x3D; tar) &#123;\n                System.out.println(mid);\n                return;\n            &#125;\n            if (arr[mid] &lt; tar) &#123;\n                l &#x3D; mid + 1;\n            &#125; else &#123;\n                r &#x3D; mid - 1;\n            &#125;\n        &#125;\n        System.out.println(-1);\n    &#125;\n&#125;\n</code></pre>\n\n<h2 id=\"2-排序算法\"><a href=\"#2-排序算法\" class=\"headerlink\" title=\"2. 排序算法\"></a>2. 排序算法</h2><h3 id=\"a-冒泡排序\"><a href=\"#a-冒泡排序\" class=\"headerlink\" title=\"a. 冒泡排序\"></a>a. 冒泡排序</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;*\n* 冒泡排序: 稳定\n* 可优化的点:\n* 1. 每轮判断是否有序,如果有序了就不需要再进行冒泡\n* 2. 每轮冒泡记录最后一次交换的位置,该位置之后的肯定已经有序,下轮只需要排序到记录的位置\n* *&#x2F;\npublic static void bubbling(int[] arr) &#123;\n    int n &#x3D; arr.length - 1;\n    while (true) &#123;\n        &#x2F;&#x2F; 最后一次交换的位置\n        int last &#x3D; 0;\n        for (int j &#x3D; 0; j &lt; n; j++) &#123;\n            if (arr[j] &gt; arr[j + 1]) &#123;\n                &#x2F;&#x2F; 如果不发生交换,就说明不需要再进行后面的冒泡\n                int temp &#x3D; arr[j];\n                arr[j] &#x3D; arr[j + 1];\n                arr[j + 1] &#x3D; temp;\n                last &#x3D; j;\n            &#125;\n        &#125;\n        n &#x3D; last;\n        if (last &#x3D;&#x3D; 0) break;\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"b-选择排序\"><a href=\"#b-选择排序\" class=\"headerlink\" title=\"b. 选择排序\"></a>b. 选择排序</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;*\n* 选择排序\n* 不稳定、\n* *&#x2F;\npublic static void selection(int[] arr) &#123;\n    int n &#x3D; arr.length;\n    for (int i &#x3D; 0; i &lt; n; i++) &#123;\n        int mIdx &#x3D; 0;\n        for (int j &#x3D; 0; j &lt; n - i; j++) &#123;\n            if (arr[mIdx] &lt; arr[j]) &#123;\n                mIdx &#x3D; j;\n            &#125;\n        &#125;\n        int temp &#x3D; arr[mIdx];\n        arr[mIdx] &#x3D; arr[n - i - 1];\n        arr[n - i - 1] &#x3D; temp;\n    &#125;\n&#125;</code></pre>\n\n\n\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c.\"></a>c.</h3><h2 id=\"3-集合类\"><a href=\"#3-集合类\" class=\"headerlink\" title=\"3. 集合类\"></a>3. 集合类</h2><h3 id=\"a-ArrayList\"><a href=\"#a-ArrayList\" class=\"headerlink\" title=\"a. ArrayList\"></a>a. ArrayList</h3><p>扩容机制:</p>\n<ul>\n<li>因为懒加载,无参初始化容量为0,第一次使用add添加会扩容为10</li>\n<li>如果使用<code>addAll(arr)</code>,扩容至 <code>max&#123;arr的大小,1.5倍&#125;</code></li>\n<li>空间不够时,会扩容1.5倍 <code>size = size+(size&gt;&gt;1)</code></li>\n</ul>\n<p>Iterator迭代器遍历修改问题:</p>\n<ul>\n<li><code>Fail-Fast</code> 一旦发现遍历过程中其他人修改,立即抛出异常</li>\n<li><code>Fail-Safe</code> 遍历过程中发现有人修改,会促使遍历完成，比如在遍历过程中添加元素，添加的元素并不会在这次遍历访问到。</li>\n</ul>\n","feature":true,"text":"1. 二分查找比较基础,注意边界问题和mid的计算 mid = (l + r) &gt;&gt;&gt; 1; public class MyBinarySearch &#123; &#x2F;* * 搜索次数 log2(M) + 1 向上取整 即就是搜索树的树深 * *&#x2...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"互联网八股","slug":"互联网八股","count":10,"path":"api/categories/互联网八股.json"}],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"集合类","slug":"集合类","count":1,"path":"api/tags/集合类.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\">1. 二分查找</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">2. 排序算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#a-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">a. 冒泡排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#b-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">b. 选择排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#c\"><span class=\"toc-text\">c.</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E9%9B%86%E5%90%88%E7%B1%BB\"><span class=\"toc-text\">3. 集合类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#a-ArrayList\"><span class=\"toc-text\">a. ArrayList</span></a></li></ol></li></ol>","author":{"name":"张 凡","slug":"张-凡","avatar":"/svg/coke.png","link":"/","description":"少年与爱永不老去 <br/>即使披荆斩棘,丢失怒马鲜衣。","socials":{"github":"https://github.com/Zhang-F4N","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/36174882"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode-cn.com/u/zhong-an-zu-zhi-hu-z/"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"B站网友的奇妙发言","uid":"b57cd9d792371efee42384e9cc2f9aee","slug":"B站网友的奇妙发言","date":"2022-05-05T06:46:30.000Z","updated":"2022-05-05T13:30:19.039Z","comments":true,"path":"api/articles/B站网友的奇妙发言.json","keywords":null,"cover":null,"text":"鬼火一响，爹妈白养。 弯道快才是真的快，谁直线不会加油？ ","link":"","photos":[],"count_time":{"symbolsCount":29,"symbolsTime":"1 mins."},"categories":[{"name":"奇妙发言","slug":"奇妙发言","count":1,"path":"api/categories/奇妙发言.json"}],"tags":[{"name":"搞笑","slug":"搞笑","count":1,"path":"api/tags/搞笑.json"},{"name":"语录","slug":"语录","count":1,"path":"api/tags/语录.json"},{"name":"歇后语","slug":"歇后语","count":1,"path":"api/tags/歇后语.json"}],"author":{"name":"张 凡","slug":"张-凡","avatar":"/svg/coke.png","link":"/","description":"少年与爱永不老去 <br/>即使披荆斩棘,丢失怒马鲜衣。","socials":{"github":"https://github.com/Zhang-F4N","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/36174882"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode-cn.com/u/zhong-an-zu-zhi-hu-z/"}}}},"feature":true}}
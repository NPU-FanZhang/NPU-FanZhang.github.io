{"title":"Linux基础","uid":"144f0b4d9b9f80ea377106e9c6a54a45","slug":"Linux基础","date":"2022-04-08T03:19:19.000Z","updated":"2022-04-08T03:25:19.742Z","comments":true,"path":"api/articles/Linux基础.json","keywords":null,"cover":[],"content":"<img src=\"/post/Linux%E5%9F%BA%E7%A1%80/image-20210617103727166.png\" class=\"\" title=\"image-20210617103727166\">\n\n<h1 id=\"Linux简介\"><a href=\"#Linux简介\" class=\"headerlink\" title=\"Linux简介\"></a>Linux简介</h1><p>​    <em>Linux，全称 GNU&#x2F;Linux，是一种免费使用和自由传播的类 UNIX 操作系统，其内核由林纳斯·本纳第克特·托瓦兹于1991年10月5日首次发布，它主要受到 Minix 和 Unix 思想的启发，是一个基于 POSIX 的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的 Unix 工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</em></p>\n<p>​    <em>Linux不仅系统性能稳定，而且是开源软件。其核心防火墙组件性能高效、配置简单，保证了系统的安全。在很多企业网络中，为了追求速度和安全，Linux不仅仅是被网络运维人员当作服务器使用，甚至当作网络防火墙，这是Linux的一大亮点。</em></p>\n<p>​    <em>Linux的基本思想有两点：</em></p>\n<p>​    <em>第一，一切都是文件；</em></p>\n<p>​    <em>第二，每个文件都有确定的用途。</em></p>\n<p>​    <em>其中第一条详细来讲就是系统中的所有都归结为一个文件，包括命令、硬件和软件设备、操作系统、进程等等对于操作系统内核而言，都被视为拥有各自特性或类型的文件。至于说Linux是基于Unix的，很大程度上也是因为这两者的基本思想十分相近。</em></p>\n<blockquote><p>服务器通常使用的两套组合是:LAMP(Linux + Apache + Mysql + PHP) 和 LNMP(Linux + Nginx + Mysql + PHP)组合。</p></blockquote>\n<h1 id=\"Linux安装\"><a href=\"#Linux安装\" class=\"headerlink\" title=\"Linux安装\"></a>Linux安装</h1><p>常见的安装方式有三种，这里我们使用的购买的云服务器：</p>\n<ol>\n<li><p>虚拟机安装</p>\n</li>\n<li><p>本地安装</p>\n</li>\n<li><p>云服务器安装，这里使用的是腾讯云服务器</p>\n</li>\n</ol>\n<h1 id=\"云服务器登录配置\"><a href=\"#云服务器登录配置\" class=\"headerlink\" title=\"云服务器登录配置\"></a>云服务器登录配置</h1><ol>\n<li><p>首先要配置防火墙</p>\n<img src=\"/post/Linux%E5%9F%BA%E7%A1%80/image-20210617112535111.png\" class=\"\" title=\"image-20210617112535111\">\n</li>\n<li><p>可以修改登录密码。</p>\n</li>\n<li><p>下载<code>Xshell</code>和<code>Xftp</code>来进行远程连接和文件传输。</p>\n</li>\n</ol>\n<h1 id=\"Linux-系统启动过程\"><a href=\"#Linux-系统启动过程\" class=\"headerlink\" title=\"Linux 系统启动过程\"></a>Linux 系统启动过程</h1><p>Linux启动时我们会看到许多启动信息。</p>\n<p>Linux系统的启动过程并不是大家想象中的那么复杂，其过程可以分为5个阶段：</p>\n<ul>\n<li>内核的引导。</li>\n<li>运行 init。</li>\n<li>系统初始化。</li>\n<li>建立终端。</li>\n<li>用户登录系统。</li>\n</ul>\n<blockquote><p>init程序的类型：</p>\n<ul>\n<li><strong>SysV:</strong> init, CentOS 5之前, 配置文件： &#x2F;etc&#x2F;inittab。</li>\n<li><strong>Upstart:</strong> init,CentOS 6, 配置文件： &#x2F;etc&#x2F;inittab, &#x2F;etc&#x2F;init&#x2F;*.conf。</li>\n<li><strong>Systemd：</strong> systemd, CentOS 7,配置文件： &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system、 &#x2F;etc&#x2F;systemd&#x2F;system。</li>\n</ul></blockquote>\n<h2 id=\"1、内核引导\"><a href=\"#1、内核引导\" class=\"headerlink\" title=\"1、内核引导\"></a>1、内核引导</h2><blockquote><p>BIOS -&gt; &#x2F;boot</p></blockquote>\n<p>当计算机打开电源后，首先是BIOS开机自检，按照BIOS中设置的启动设备（通常是硬盘）来启动。</p>\n<p>操作系统接管硬件以后，首先读入 &#x2F;boot 目录下的内核文件。</p>\n<h2 id=\"2、运行init\"><a href=\"#2、运行init\" class=\"headerlink\" title=\"2、运行init\"></a>2、运行init</h2><blockquote><p>&#x2F;boot -&gt; init程序 -&gt; 读取&#x2F;etc&#x2F;inittab -&gt; 运行级别</p></blockquote>\n<p>​    init 进程是系统所有进程的起点，你可以把它比拟成系统所有进程的老祖宗，没有这个进程，系统中任何进程都不会启动。init 程序首先是需要读取配置文件 &#x2F;etc&#x2F;inittab。</p>\n<p>​    许多程序需要开机启动，在Linux就叫做”守护进程”（daemon）。init进程的一大任务，就是去运行这些开机启动的程序。但是，不同的场合需要启动不同的程序，比如用作服务器时，需要启动Apache，用作桌面就不需要。Linux允许为不同的场合，分配不同的开机启动程序，这就叫做”运行级别”（runlevel）。</p>\n<p>​    也就是说，启动时根据”运行级别”，确定要运行哪些程序。Linux系统有7个运行级别(runlevel)：</p>\n<table>\n<thead>\n<tr>\n<th>运行级别</th>\n<th>系统操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>运行级别0</td>\n<td>系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</td>\n</tr>\n<tr>\n<td>运行级别1</td>\n<td>单用户工作状态，root权限，用于系统维护，禁止远程登陆</td>\n</tr>\n<tr>\n<td>运行级别2</td>\n<td>多用户状态(没有NFS)</td>\n</tr>\n<tr>\n<td>运行级别3</td>\n<td>完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</td>\n</tr>\n<tr>\n<td>运行级别4</td>\n<td>系统未使用，保留</td>\n</tr>\n<tr>\n<td>运行级别5</td>\n<td>X11控制台，登陆后进入图形GUI模式</td>\n</tr>\n<tr>\n<td>运行级别6</td>\n<td>系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</td>\n</tr>\n</tbody></table>\n<h2 id=\"3、系统初始化\"><a href=\"#3、系统初始化\" class=\"headerlink\" title=\"3、系统初始化\"></a>3、系统初始化</h2><blockquote><p>init -&gt; rc.sysinit -&gt; &#x2F;etc&#x2F;init.d</p></blockquote>\n<p>​    在init的配置文件中有这么一行： si::sysinit:&#x2F;etc&#x2F;rc.d&#x2F;rc.sysinit　它调用执行了&#x2F;etc&#x2F;rc.d&#x2F;rc.sysinit，而rc.sysinit是一个bash shell的脚本，它主要是完成一些系统初始化的工作，rc.sysinit是每一个运行级别都要首先运行的重要脚本。</p>\n<p>​    它主要完成的工作有：激活交换分区，检查磁盘，加载硬件模块以及其它一些需要优先执行任务。</p>\n<pre class=\"line-numbers language-bshell\" data-language=\"bshell\"><code class=\"language-bshell\">l5:5:wait:&#x2F;etc&#x2F;rc.d&#x2F;rc 5</code></pre>\n\n<p>​    这一行表示以5为参数运行&#x2F;etc&#x2F;rc.d&#x2F;rc，&#x2F;etc&#x2F;rc.d&#x2F;rc是一个Shell脚本，它接受5作为参数，去执行&#x2F;etc&#x2F;rc.d&#x2F;rc5.d&#x2F;目录下的所有的rc启动脚本，&#x2F;etc&#x2F;rc.d&#x2F;rc5.d&#x2F;目录中的这些启动脚本实际上都是一些连接文件，而不是真正的rc启动脚本，真正的rc启动脚本实际上都是放在&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;目录下。</p>\n<p>​    而这些rc启动脚本有着类似的用法，它们一般能接受start、stop、restart、status等参数。&#x2F;etc&#x2F;rc.d&#x2F;rc5.d&#x2F;中的rc启动脚本通常是K或S开头的连接文件，对于以 S 开头的启动脚本，将以start参数来运行。而如果发现存在相应的脚本也存在K打头的连接，而且已经处于运行态了(以&#x2F;var&#x2F;lock&#x2F;subsys&#x2F;下的文件作为标志)，则将首先以stop为参数停止这些已经启动了的守护进程，然后再重新运行。</p>\n<p>​    这样做是为了保证是当init改变运行级别时，所有相关的守护进程都将重启。</p>\n<p>​    至于在每个运行级中将运行哪些守护进程，用户可以通过chkconfig或setup中的”System Services”来自行设定。</p>\n<h2 id=\"4、建立终端\"><a href=\"#4、建立终端\" class=\"headerlink\" title=\"4、建立终端\"></a>4、建立终端</h2><blockquote><p>init -&gt; rc.sysinit -&gt; &#x2F;etc&#x2F;init.d -&gt; 建立终端</p></blockquote>\n<p>​    rc执行完毕后，返回init。这时基本系统环境已经设置好了，各种守护进程也已经启动了。</p>\n<p>​    init接下来会打开6个终端，以便用户登录系统。在inittab中的以下6行就是定义了6个终端：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">1:2345:respawn:&#x2F;sbin&#x2F;mingetty tty1\n2:2345:respawn:&#x2F;sbin&#x2F;mingetty tty2\n3:2345:respawn:&#x2F;sbin&#x2F;mingetty tty3\n4:2345:respawn:&#x2F;sbin&#x2F;mingetty tty4\n5:2345:respawn:&#x2F;sbin&#x2F;mingetty tty5\n6:2345:respawn:&#x2F;sbin&#x2F;mingetty tty6</code></pre>\n\n<p>​    从上面可以看出在2、3、4、5的运行级别中都将以respawn方式运行mingetty程序，mingetty程序能打开终端、设置模式。</p>\n<p>​    同时它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份。</p>\n<h2 id=\"5、用户登录系统\"><a href=\"#5、用户登录系统\" class=\"headerlink\" title=\"5、用户登录系统\"></a>5、用户登录系统</h2><p>一般来说，用户的登录方式有三种：</p>\n<ul>\n<li><p>（1）命令行登录</p>\n</li>\n<li><p>（2）ssh登录</p>\n</li>\n<li><p>（3）图形界面登录</p>\n</li>\n</ul>\n<p>​    对于运行级别为5的图形方式用户来说，他们的登录是通过一个图形化的登录界面。登录成功后可以直接进入 KDE、Gnome 等窗口管理器而本文主要讲的还是文本方式登录的情况：当我们看到mingetty的登录界面时，我们就可以输入用户名和密码来登录系统了。</p>\n<p>​    Linux 的账号验证程序是 login，login 会接收 mingetty 传来的用户名作为用户名参数。然后 login 会对用户名进行分析：如果用户名不是 root，且存在 &#x2F;etc&#x2F;nologin 文件，login 将输出 nologin 文件的内容，然后退出。</p>\n<p>​    这通常用来系统维护时防止非root用户登录。只有&#x2F;etc&#x2F;securetty中登记了的终端才允许 root 用户登录，如果不存在这个文件，则 root 用户可以在任何终端上登录。</p>\n<p>​    &#x2F;etc&#x2F;usertty文件用于对用户作出附加访问限制，如果不存在这个文件，则没有其他限制。</p>\n<h1 id=\"文件系统目录结构\"><a href=\"#文件系统目录结构\" class=\"headerlink\" title=\"文件系统目录结构\"></a>文件系统目录结构</h1><p>​    Linux一切皆文件，根目录就是 <code>/</code> 。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@VM-4-9-centos &#x2F;]# ls\nbin   data  etc   lib    lost+found  mnt  proc  run   srv  tmp  var\nboot  dev   home  lib64  media       opt  root  sbin  sys  usr</code></pre>\n\n<h2 id=\"一级目录\"><a href=\"#一级目录\" class=\"headerlink\" title=\"一级目录\"></a>一级目录</h2><table>\n<thead>\n<tr>\n<th>一级目录</th>\n<th align=\"left\">功能（作用）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;bin</td>\n<td align=\"left\">存放系统命令，普通用户和 root 都可以执行。放在 &#x2F;bin 下的命令在单用户模式下也可以执行</td>\n</tr>\n<tr>\n<td>&#x2F;boot</td>\n<td align=\"left\">系统启动目录，保存与系统启动相关的文件，如内核文件和启动引导程序（grub）文件等</td>\n</tr>\n<tr>\n<td>&#x2F;dev</td>\n<td align=\"left\">设备文件保存位置</td>\n</tr>\n<tr>\n<td><strong>&#x2F;etc</strong></td>\n<td align=\"left\"><strong>配置文件保存位置。系统内所有采用默认安装方式（rpm 安装）的服务配置文件全部保存在此目录中，如用户信息、服务的启动脚本、常用服务的配置文件等</strong></td>\n</tr>\n<tr>\n<td><strong>&#x2F;home</strong></td>\n<td align=\"left\"><strong>普通用户的主目录（也称为家目录）。在创建用户时，每个用户要有一个默认登录和保存自己数据的位置，就是用户的主目录，所有普通用户的主目录是在 &#x2F;home&#x2F; 下建立一个和用户名相同的目录。如用户 liming 的主目录就是 &#x2F;home&#x2F;liming</strong></td>\n</tr>\n<tr>\n<td>&#x2F;lib</td>\n<td align=\"left\">系统调用的函数库保存位置</td>\n</tr>\n<tr>\n<td>&#x2F;media</td>\n<td align=\"left\">挂载目录。系统建议用来挂载媒体设备，如软盘和光盘</td>\n</tr>\n<tr>\n<td>&#x2F;mnt</td>\n<td align=\"left\">挂载目录。早期 Linux 中只有这一个挂载目录，并没有细分。系统建议这个目录用来挂载额外的设备，如 U 盘、移动硬盘和其他操作系统的分区</td>\n</tr>\n<tr>\n<td>&#x2F;misc</td>\n<td align=\"left\">挂载目录。系统建议用来挂载 NFS 服务的共享目录。虽然系统准备了三个默认挂载目录 &#x2F;media&#x2F;、&#x2F;mnt&#x2F;、&#x2F;misc&#x2F;，但是到底在哪个目录中挂载什么设备可以由管理员自己决定。例如，笔者在接触 Linux 的时候，默认挂载目录只有 &#x2F;mnt&#x2F;，所以养成了在 &#x2F;mnt&#x2F; 下建立不同目录挂载不同设备的习惯，如 &#x2F;mnt&#x2F;cdrom&#x2F; 挂载光盘、&#x2F;mnt&#x2F;usb&#x2F; 挂载 U 盘，都是可以的</td>\n</tr>\n<tr>\n<td><strong>&#x2F;opt</strong></td>\n<td align=\"left\"><strong>第三方安装的软件保存位置。这个目录是放置和安装其他软件的位置，手工安装的源码包软件都可以安装到这个目录中。不过笔者还是习惯把软件放到 &#x2F;usr&#x2F;local&#x2F; 目录中，也就是说，&#x2F;usr&#x2F;local&#x2F; 目录也可以用来安装软件</strong></td>\n</tr>\n<tr>\n<td>&#x2F;root</td>\n<td align=\"left\">root 的主目录。普通用户主目录在 &#x2F;home&#x2F; 下，root 主目录直接在“&#x2F;”下</td>\n</tr>\n<tr>\n<td>&#x2F;sbin</td>\n<td align=\"left\">保存与系统环境设置相关的命令，只有 root 可以使用这些命令进行系统环境设置，但也有些命令可以允许普通用户查看</td>\n</tr>\n<tr>\n<td>&#x2F;srv</td>\n<td align=\"left\">服务数据目录。一些系统服务启动之后，可以在这个目录中保存所需要的数据</td>\n</tr>\n<tr>\n<td><strong>&#x2F;tmp</strong></td>\n<td align=\"left\"><strong>临时目录。系统存放临时文件的目录，在该目录下，所有用户都可以访问和写入。建议此目录中不能保存重要数据，最好每次开机都把该目录清空</strong></td>\n</tr>\n<tr>\n<td>&#x2F;lost+found</td>\n<td align=\"left\">当系统意外崩溃或意外关机时，产生的一些文件碎片会存放在这里。在系统启动的过程中，fsck 工具会检查这里，并修复已经损坏的文件系统。这个目录只在每个分区中出现，例如，&#x2F;lost+found 就是根分区的备份恢复目录，&#x2F;boot&#x2F;lost+found 就是 &#x2F;boot 分区的备份恢复目录</td>\n</tr>\n<tr>\n<td>&#x2F;proc</td>\n<td align=\"left\">虚拟文件系统。该目录中的数据并不保存在硬盘上，而是保存到内存中。主要保存系统的内核、进程、外部设备状态和网络状态等。如 &#x2F;proc&#x2F;cpuinfo 是保存 CPU 信息的，&#x2F;proc&#x2F;devices 是保存设备驱动的列表的，&#x2F;proc&#x2F;filesystems 是保存文件系统列表的，&#x2F;proc&#x2F;net 是保存网络协议信息的……</td>\n</tr>\n<tr>\n<td>&#x2F;sys</td>\n<td align=\"left\">虚拟文件系统。和 &#x2F;proc 目录相似，该目录中的数据都保存在内存中，主要保存与内核相关的信息</td>\n</tr>\n<tr>\n<td>&#x2F;usr</td>\n<td align=\"left\">全称为 Unix Software Resource，此目录用于存储系统软件资源。FHS 建议所有开发者，应把软件产品的数据合理的放置在 &#x2F;usr 目录下的各子目录中，而不是为他们的产品创建单独的目录。</td>\n</tr>\n<tr>\n<td>&#x2F;var</td>\n<td align=\"left\">&#x2F;var 目录用于存储动态数据，例如缓存、日志文件、软件运行过程中产生的文件等。通常，此目录下含一些子目录。</td>\n</tr>\n</tbody></table>\n<h2 id=\"重要的子目录\"><a href=\"#重要的子目录\" class=\"headerlink\" title=\"重要的子目录\"></a>重要的子目录</h2><p><strong>Linux &#x2F;usr目录</strong></p>\n<table>\n<thead>\n<tr>\n<th>子目录</th>\n<th>功能（作用）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;usr&#x2F;bin&#x2F;</td>\n<td>存放系统命令，普通用户和超级用户都可以执行。这些命令和系统启动无关，在单用户模式下不能执行</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;sbin&#x2F;</td>\n<td>存放根文件系统不必要的系统管理命令，如多数服务程序，只有 root 可以使用。</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;lib&#x2F;</td>\n<td>应用程序调用的函数库保存位置</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;XllR6&#x2F;</td>\n<td>图形界面系统保存位置</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;local&#x2F;</td>\n<td>手工安装的软件保存位置。我们一般建议源码包软件安装在这个位置</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;share&#x2F;</td>\n<td>应用程序的资源文件保存位置，如帮助文档、说明文档和字体目录</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;src&#x2F;</td>\n<td>源码包保存位置。我们手工下载的源码包和内核源码包都可以保存到这里。不过笔者更习惯把手工下载的源码包保存到 &#x2F;usr&#x2F;local&#x2F;src&#x2F; 目录中，把内核源码保存到 &#x2F;usr&#x2F;src&#x2F;linux&#x2F; 目录中</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;include</td>\n<td>C&#x2F;C++ 等编程语言头文件的放置目录</td>\n</tr>\n</tbody></table>\n<p><strong>Linux &#x2F;var 目录</strong></p>\n<table>\n<thead>\n<tr>\n<th>&#x2F;var子目录</th>\n<th>功能（作用）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;var&#x2F;lib&#x2F;</td>\n<td>程序运行中需要调用或改变的数据保存位置。如 <a href=\"http://c.biancheng.net/mysql/\">MySQL</a> 的数据库保存在 &#x2F;var&#x2F;lib&#x2F;mysql&#x2F; 目录中</td>\n</tr>\n<tr>\n<td>&#x2F;var&#x2F;log&#x2F;</td>\n<td>登陆文件放置的目录，其中所包含比较重要的文件如 &#x2F;var&#x2F;log&#x2F;messages, &#x2F;var&#x2F;log&#x2F;wtmp 等。</td>\n</tr>\n<tr>\n<td>&#x2F;var&#x2F;run&#x2F;</td>\n<td>一些服务和程序运行后，它们的 PID（进程 ID）保存位置</td>\n</tr>\n<tr>\n<td>&#x2F;var&#x2F;spool&#x2F;</td>\n<td>里面主要都是一些临时存放，随时会被用户所调用的数据，例如 &#x2F;var&#x2F;spool&#x2F;mail&#x2F; 存放新收到的邮件，&#x2F;var&#x2F;spool&#x2F;cron&#x2F; 存放系统定时任务。</td>\n</tr>\n<tr>\n<td>&#x2F;var&#x2F;www&#x2F;</td>\n<td>RPM 包安装的 Apache 的网页主目录</td>\n</tr>\n<tr>\n<td>&#x2F;var&#x2F;nis和&#x2F;var&#x2F;yp</td>\n<td>NIS 服务机制所使用的目录，nis 主要记录所有网络中每一个 client 的连接信息；yp 是 linux 的 nis 服务的日志文件存放的目录</td>\n</tr>\n<tr>\n<td>&#x2F;var&#x2F;tmp</td>\n<td>一些应用程序在安装或执行时，需要在重启后使用的某些文件，此目录能将该类文件暂时存放起来，完成后再行删除</td>\n</tr>\n</tbody></table>\n<h2 id=\"Linux链接概念\"><a href=\"#Linux链接概念\" class=\"headerlink\" title=\"Linux链接概念\"></a>Linux链接概念</h2><p>​    Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。默认情况下，<strong>ln</strong> 命令产生硬链接。</p>\n<p><strong>硬连接</strong></p>\n<p>​    硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。</p>\n<p>​    比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。</p>\n<p>​    硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，<strong>文件真正删除的条件是与之相关的所有硬连接文件均被删除</strong>。</p>\n<p><strong>软连接</strong></p>\n<p>​    另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。</p>\n<p>​    比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p>\n<p><strong>ln创建链接命令</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ln [参数][源文件或目录][目标文件或目录]</code></pre>\n\n<p>选项与参数：</p>\n<ul>\n<li>-b 删除，覆盖以前建立的链接</li>\n<li>-d 允许超级用户制作目录的硬链接</li>\n<li>-f 强制执行</li>\n<li>-i 交互模式，文件存在则提示用户是否覆盖</li>\n<li>-n 把符号链接视为一般目录</li>\n<li>-s 软链接(符号链接)</li>\n<li>-v 显示详细的处理过程</li>\n</ul>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@VM-4-9-centos home]# ls\nkdum.sh  lighthouse  test1\n[root@VM-4-9-centos home]# touch f1\t\t\t\t\t\t\t#创建文件f1\n[root@VM-4-9-centos home]# ls\nf1  kdum.sh  lighthouse  test1\n[root@VM-4-9-centos home]# ln f1 f2\t\t\t\t\t\t\t#创建硬链接f2 指向f1指向的文件\n[root@VM-4-9-centos home]# ls\nf1  f2  kdum.sh  lighthouse  test1\n[root@VM-4-9-centos home]# ls -al\ntotal 32\ndrwxr-xr-x.  4 root       root        4096 Jun 18 16:50 .\ndr-xr-xr-x. 19 root       root        4096 Jun 18 16:50 ..\n-rw-r--r--   2 root       root           0 Jun 18 16:49 f1\t\t#此时f1和f2都是文件,指向同一物理文件\n-rw-r--r--   2 root       root           0 Jun 18 16:49 f2\t\t#此时f1和f2都是文件,指向同一物理文件\n-rwxr-xr-x   1 root       root       14704 Jun 17 20:55 kdum.sh\ndrwx------   5 lighthouse lighthouse  4096 May 18 10:10 lighthouse\ndrwxr-xr-x   2 root       root        4096 Jun 17 20:56 test1\n[root@VM-4-9-centos home]# ln -s  f1 f3\t\t\t\t\t\t\t#创建软链接f3 指向f1\n[root@VM-4-9-centos home]# ls -al\ntotal 32\ndrwxr-xr-x.  4 root       root        4096 Jun 18 16:50 .\ndr-xr-xr-x. 19 root       root        4096 Jun 18 16:50 ..\n-rw-r--r--   2 root       root           0 Jun 18 16:49 f1\n-rw-r--r--   2 root       root           0 Jun 18 16:49 f2\nlrwxrwxrwx   1 root       root           2 Jun 18 16:50 f3 -&gt; f1\t#软链接f3 指向f1\n-rwxr-xr-x   1 root       root       14704 Jun 17 20:55 kdum.sh\ndrwx------   5 lighthouse lighthouse  4096 May 18 10:10 lighthouse\ndrwxr-xr-x   2 root       root        4096 Jun 17 20:56 test1\n[root@VM-4-9-centos home]# echo &quot;hello world&quot; &gt;&gt; f1\t\t\t\t#f1文件写入\n[root@VM-4-9-centos home]# cat f1\nhello world\n[root@VM-4-9-centos home]# ls\nf1  f2  f3  kdum.sh  lighthouse  test1\n[root@VM-4-9-centos home]# cat f2\t\t\t\t\t\t\t\t#f2文件也同时写入\nhello world\n[root@VM-4-9-centos home]# cat f3\t\t\t\t\t\t\t\t#f3指向的f1内容\nhello world\n[root@VM-4-9-centos home]# ll\ntotal 32\n-rw-r--r-- 2 root       root          12 Jun 18 16:51 f1\n-rw-r--r-- 2 root       root          12 Jun 18 16:51 f2\nlrwxrwxrwx 1 root       root           2 Jun 18 16:50 f3 -&gt; f1\n-rwxr-xr-x 1 root       root       14704 Jun 17 20:55 kdum.sh\ndrwx------ 5 lighthouse lighthouse  4096 May 18 10:10 lighthouse\ndrwxr-xr-x 2 root       root        4096 Jun 17 20:56 test1\n[root@VM-4-9-centos home]# rm  f1\t\t\t\t\t\t\t#删除f1\nrm: remove regular file ‘f1’? y\n[root@VM-4-9-centos home]# ls\nf2  f3  kdum.sh  lighthouse  test1\n[root@VM-4-9-centos home]# cat f2\t\t\t\t\t\t\t#f2正常访问\nhello world\n[root@VM-4-9-centos home]# cat f1\t\t\t\t\t\t\t#f3由于f1已经删除而访问失败\ncat: f1: No such file or directory</code></pre>\n\n\n\n\n\n\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><h2 id=\"开关机登录\"><a href=\"#开关机登录\" class=\"headerlink\" title=\"开关机登录\"></a>开关机登录</h2><p>​    Windows开机会启动很多服务 “service”，在Linux中叫做守护进程”daemon”。</p>\n<p>​    在开关机前，最好进行内存-硬盘的数据同步，使用 <code>sync</code> 命令来进行数据同步。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">sync # 将数据由内存同步到硬盘中</code></pre>\n\n<p><strong>shutdown关机</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">halt\t\t\t\t#立刻关机\npoweroff\t\t\t#立刻关机\nshutdown -h now \t#立刻关机(root用户使用)\nshutdown -h 10 \t\t#10分钟后自动关机</code></pre>\n\n<p><strong>reboot重启</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">reboot\nshutdown -r now \t#立刻重启(root用户使用)\nshutdown -r 10 \t\t#过10分钟自动重启(root用户使用)\nshutdown -r 20:35\t#在时间为20:35时候重启(root用户使用)</code></pre>\n\n\n\n<h2 id=\"目录管理\"><a href=\"#目录管理\" class=\"headerlink\" title=\"目录管理\"></a>目录管理</h2><p>​    最常用的目录命令为:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">cd .. \t#返回上一级目录\ncd .&#x2F; \t#当前目录\nls \t\t#展示当前目录下的文件及文件夹</code></pre>\n\n\n\n<p><strong>ls列出目录</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">ls -a #查看全部文件,包括隐藏文件\nls -l #查看文件详细信息\n#可以组合使用\nls -al #查看全部文件,包括隐藏文件的详细信息</code></pre>\n\n\n\n<p><strong>cd切换目录</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">cd &#x2F;xxx&#x2F;xxx # 以绝对路径进入到&#x2F;xxx&#x2F;xxx\ncd ..&#x2F;xxx \t# 相对路径进入到&#x2F;xxx\ncd ~\t\t#返回当前的用户目录</code></pre>\n\n\n\n<p><strong>pwd显示目录</strong></p>\n<p>​    显示当前用户所在目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[root@VM-4-9-centos ~]# cd &#x2F;\n[root@VM-4-9-centos &#x2F;]# pwd\n&#x2F;\n[root@VM-4-9-centos ~]# cd ~\n[root@VM-4-9-centos ~]# pwd\n&#x2F;root\n[root@VM-4-9-centos ~]# cd &#x2F;bin\n[root@VM-4-9-centos bin]# pwd\n&#x2F;bin\n[root@VM-4-9-centos bin]# cd &#x2F;usr&#x2F;local\n[root@VM-4-9-centos local]# pwd\n&#x2F;usr&#x2F;local</code></pre>\n\n\n\n<p><strong>mkdir创建目录</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">mkdir [-mp] 目录名称</code></pre>\n\n<p>选项与参数：</p>\n<ul>\n<li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li>\n<li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li>\n</ul>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">mkdir test1 \t\t\t#创建目录\nmkdir -p test2&#x2F;test3\t #递归创建目录</code></pre>\n\n\n\n<p><strong>rmdir删除空目录</strong></p>\n<p>​    只能删除空目录。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">rmdir [-p] 目录名称 </code></pre>\n\n<p>选项与参数：</p>\n<ul>\n<li>-p ：连同上一级『空的』目录也一起删除</li>\n</ul>\n<p><strong>cp复制文件或目录</strong></p>\n<p>​    cp 即拷贝文件和目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cp [-adfilprsu] 来源档(source) 目标档(destination)</code></pre>\n\n<p>选项与参数：</p>\n<ul>\n<li>-a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li>\n<li>-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li>\n<li>-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li>\n<li>-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li>\n<li>-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身；</li>\n<li>-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li>\n<li>-r：递归持续复制，用於目录的复制行为；(常用)</li>\n<li>-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li>\n<li>-u：若 destination 比 source 旧才升级 destination ！</li>\n</ul>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@VM-4-9-centos home]# ls \nkdump-lib.sh  lighthouse  test1\n[root@VM-4-9-centos home]# cp kdump-lib.sh  test1&#x2F; \t\t#复制文件\n[root@VM-4-9-centos home]# cd test1&#x2F;\n[root@VM-4-9-centos test1]# ls\nkdump-lib.sh\n[root@VM-4-9-centos home]# cp kdump-lib.sh test1&#x2F;\t\t#如果文件重复存在,会询问是否覆盖\ncp: overwrite ‘test1&#x2F;kdump-lib.sh’? y  </code></pre>\n\n\n\n<p><strong>rm 移除文件或目录</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">rm [-fir] 文件或目录</code></pre>\n\n<p>选项与参数：</p>\n<ul>\n<li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li>\n<li>-i ：互动模式，在删除前会询问使用者是否动作</li>\n<li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li>\n</ul>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@VM-4-9-centos home]# ls\nkdump-lib.sh  lighthouse  test1\n[root@VM-4-9-centos home]# rm kdump-lib.sh  -i\nrm: remove regular file ‘kdump-lib.sh’? y\n[root@VM-4-9-centos home]# ls\nlighthouse  test1</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rm -rf &#x2F;  #删除操作系统在内的所有文件!!!!!!!!!删库跑路</code></pre>\n\n\n\n<p><strong>mv(移动文件与目录,或修改名称)</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">mv [-fiu] source destination</code></pre>\n\n<p>选项与参数：</p>\n<ul>\n<li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li>\n<li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li>\n<li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li>\n</ul>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@VM-4-9-centos test1]# ls\nkdump-lib.sh\n[root@VM-4-9-centos test1]# mv kdump-lib.sh ..&#x2F;  #移动文件到上一级目录 \n[root@VM-4-9-centos test1]# cd ..\n[root@VM-4-9-centos home]# ls\nkdump-lib.sh  lighthouse  test1</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[root@VM-4-9-centos home]# mv kdump-lib.sh kdum.sh #重命名文件或文件夹\n[root@VM-4-9-centos home]# ls\nkdum.sh  lighthouse  test1</code></pre>\n\n\n\n\n\n\n\n<h2 id=\"文件内容查看\"><a href=\"#文件内容查看\" class=\"headerlink\" title=\"文件内容查看\"></a>文件内容查看</h2><p>Linux系统中使用以下命令来查看文件的内容：</p>\n<ul>\n<li>cat 由第一行开始显示文件内容</li>\n<li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li>\n<li>nl  显示的时候，顺道输出行号！</li>\n<li>more 一页一页的显示文件内容 </li>\n<li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li>\n<li>head 只看头几行 (-n命令显示头部 n行)</li>\n<li>tail 只看尾巴几行</li>\n</ul>\n<p>[注意]</p>\n<p>​    <code>q</code> :退出 <code>空格</code>:代表下翻页  <code>回车</code>: 下一行 <code>f</code>显示行号  </p>\n<p>​    向上查找 : <code>/</code>[目标字符串] 向下查找: <code>?</code>[目标字符串] </p>\n<p>​    查找时,<code>n</code>:下一个 <code>N</code>: 上一个</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#命令测试\n[root@VM-4-9-centos &#x2F;]# cd &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;\n[root@VM-4-9-centos network-scripts]# cat ifcfg-eth0  \t\t\t\t\t#从第一行开始显示\n# Created by cloud-init on instance boot automatically, do not edit.\n#\nBOOTPROTO&#x3D;dhcp\nDEVICE&#x3D;eth0\nHWADDR&#x3D;52:54:00:27:a8:37\nONBOOT&#x3D;yes\nPERSISTENT_DHCLIENT&#x3D;yes\nTYPE&#x3D;Ethernet\nUSERCTL&#x3D;no\n[root@VM-4-9-centos network-scripts]# tac ifcfg-eth0 \t\t\t\t\t#从末尾反向开始显示\nUSERCTL&#x3D;no\nTYPE&#x3D;Ethernet\nPERSISTENT_DHCLIENT&#x3D;yes\nONBOOT&#x3D;yes\nHWADDR&#x3D;52:54:00:27:a8:37\nDEVICE&#x3D;eth0\nBOOTPROTO&#x3D;dhcp\n#\n# Created by cloud-init on instance boot automatically, do not edit.\n[root@VM-4-9-centos network-scripts]# nl ifcfg-eth0 \t\t\t\t\t#加行号开始显示\n     1\t# Created by cloud-init on instance boot automatically, do not edit.\n     2\t#\n     3\tBOOTPROTO&#x3D;dhcp\n     4\tDEVICE&#x3D;eth0\n     5\tHWADDR&#x3D;52:54:00:27:a8:37\n     6\tONBOOT&#x3D;yes\n     7\tPERSISTENT_DHCLIENT&#x3D;yes\n     8\tTYPE&#x3D;Ethernet\n     9\tUSERCTL&#x3D;no\n[root@VM-4-9-centos network-scripts]# head -n 5 ifcfg-eth0 \n# Created by cloud-init on instance boot automatically, do not edit.\n#\nBOOTPROTO&#x3D;dhcp\nDEVICE&#x3D;eth0\nHWADDR&#x3D;52:54:00:27:a8:37</code></pre>\n\n\n\n\n\n\n\n<h1 id=\"文件权限和属性\"><a href=\"#文件权限和属性\" class=\"headerlink\" title=\"文件权限和属性\"></a>文件权限和属性</h1><p>​    Linux 系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux 系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。在 Linux 中我们通常使用以下两个命令来修改文件或目录的所属用户与权限：</p>\n<ul>\n<li>chown (change ownerp) ： 修改所属用户与组。</li>\n<li>chmod (change mode) ： 修改用户的权限。</li>\n</ul>\n<p>​    我们以<code>/</code>目录下的目录为例，查看他们的权限和属性。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@VM-4-9-centos &#x2F;]# ls -al\ntotal 80\ndr-xr-xr-x.  19 root root  4096 Jun 18 11:08 .\ndr-xr-xr-x.  19 root root  4096 Jun 18 11:08 ..\nlrwxrwxrwx.   1 root root     7 Mar  7  2019 bin -&gt; usr&#x2F;bin\ndr-xr-xr-x.   5 root root  4096 May 17 10:32 boot\ndrwxr-xr-x    2 root root  4096 Nov  5  2019 data\ndrwxr-xr-x   20 root root  3040 Jun 17 11:27 dev\ndrwxr-xr-x.  96 root root 12288 Jun 17 11:27 etc\ndrwxr-xr-x.   4 root root  4096 Jun 17 20:57 home\nlrwxrwxrwx.   1 root root     7 Mar  7  2019 lib -&gt; usr&#x2F;lib\nlrwxrwxrwx.   1 root root     9 Mar  7  2019 lib64 -&gt; usr&#x2F;lib64\ndrwx------.   2 root root 16384 Mar  7  2019 lost+found\ndrwxr-xr-x.   2 root root  4096 Apr 11  2018 media\ndrwxr-xr-x.   2 root root  4096 Apr 11  2018 mnt\ndrwxr-xr-x.   5 root root  4096 Jan  8 18:18 opt\ndr-xr-xr-x  102 root root     0 Jun 17 11:26 proc\ndr-xr-x---.   6 root root  4096 May 17 10:31 root\ndrwxr-xr-x   24 root root   880 Jun 17 11:28 run\nlrwxrwxrwx.   1 root root     8 Mar  7  2019 sbin -&gt; usr&#x2F;sbin\ndrwxr-xr-x.   2 root root  4096 Apr 11  2018 srv\ndr-xr-xr-x   13 root root     0 Jun 17 17:11 sys\ndrwxrwxrwt.   8 root root  4096 Jun 18 10:54 tmp\ndrwxr-xr-x.  14 root root  4096 Jan  8 18:19 usr\ndrwxr-xr-x.  20 root root  4096 Jan  8 18:19 var</code></pre>\n\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[文件类型和权限][硬链接个数][创建者名][所属组名][大小][上一次修改时间][文件名]</code></pre>\n\n<p><img src=\"/../../../GitHub/LeetCodeNote/Linux%E5%9F%BA%E7%A1%80/file-llls22.jpg\" alt=\"img\"></p>\n<h2 id=\"文件属性\"><a href=\"#文件属性\" class=\"headerlink\" title=\"文件属性\"></a>文件属性</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">lrwxrwxrwx.   1 root root     7 Mar  7  2019 bin -&gt; usr&#x2F;bin\ndr-xr-xr-x.   5 root root  4096 May 17 10:32 boot</code></pre>\n\n<p>在 Linux 中第一个字符代表这个文件是目录、文件或链接文件等等。</p>\n<ul>\n<li><strong>当为 <strong>d</strong> 则是目录</strong></li>\n<li><strong>当为 <strong>-</strong> 则是文件；</strong></li>\n<li><strong>若是 <strong>l</strong> 则表示为链接文档(link file)；</strong></li>\n<li>若是 <strong>b</strong> 则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li>\n<li>若是 <strong>c</strong> 则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li>\n</ul>\n<p>​    </p>\n<h2 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h2><pre><code>lrwxrwxrwx.   1 root root     7 Mar  7  2019 bin -&gt; usr/bin\ndr-xr-xr-x.   5 root root  4096 May 17 10:32 boot\n</code></pre>\n<p>​    接下来的字符中，以三个为一组，且均为 <strong>rwx</strong> 的三个参数的组合。其中， <strong>r</strong> 代表可读(read)、 <strong>w</strong> 代表可写(write)、 <strong>x</strong> 代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号 <strong>-</strong> 而已。每个文件的属性由左边第一部分的 10 个字符来确定（如下图）。</p>\n<p><img src=\"/../../../GitHub/LeetCodeNote/Linux%E5%9F%BA%E7%A1%80/363003_1227493859FdXT.png\" alt=\"363003_1227493859FdXT\"></p>\n<p>​    在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p>\n<h2 id=\"文件权限修改\"><a href=\"#文件权限修改\" class=\"headerlink\" title=\"文件权限修改\"></a>文件权限修改</h2><p>​    Linux文件属性有两种设置方法，一种是数字，一种是符号。</p>\n<p><strong>chmod更改文件9个属性</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">chmod [-R] xyz 文件或目录</code></pre>\n\n<p>选项与参数：</p>\n<ul>\n<li>xyz : 就是数字类型的权限属性，为 rwx 属性数值的相加。</li>\n<li>-R : 进行递归(recursive)的持续变更，亦即连同次目录下的所有文件都会变更</li>\n</ul>\n<p>​    Linux 文件的基本权限就有九个，分别是 <strong>owner&#x2F;group&#x2F;others(拥有者&#x2F;组&#x2F;其他)</strong> 三种身份各有自己的 <strong>read&#x2F;write&#x2F;execute</strong> 权限。</p>\n<p>先复习一下刚刚上面提到的数据：文件的权限字符为： <strong>-rwxrwxrwx</strong> ， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照如下：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">r:4   w:2   x:1</code></pre>\n\n<p>每种身份(owner&#x2F;group&#x2F;others)各自的三个权限(r&#x2F;w&#x2F;x)分数是需要累加的，例如当权限为： <strong>-rwxrwx—</strong> 分数则是：</p>\n<ul>\n<li>owner &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</li>\n<li>group &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</li>\n<li>others&#x3D; — &#x3D; 0+0+0 &#x3D; 0</li>\n</ul>\n<p>所以等我们设定权限的变更时，该文件的权限数字就是 <strong>770</strong>。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">-rwxr-xr-x   1 root       root       14704 Jun 17 20:55 kdum.sh\n[root@VM-4-9-centos home]# chmod 777 kdum.sh\n-rwxrwxrwx   1 root       root       14704 Jun 17 20:55 kdum.sh\n[root@VM-4-9-centos home]# chmod 755 kdum.sh \n-rwxr-xr-x   1 root       root       14704 Jun 17 20:55 kdum.sh</code></pre>\n\n\n\n<p>chgrp：更改文件属组</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">chgrp [-R] 属组名 文件名</code></pre>\n\n<p>参数选项</p>\n<ul>\n<li>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</li>\n</ul>\n<p>chown：更改文件属主，也可以同时更改文件属组</p>\n<p>语法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">chown [–R] 属主名 文件名\nchown [-R] 属主名：属组名 文件名</code></pre>\n\n\n\n\n\n<h1 id=\"Vim编辑器\"><a href=\"#Vim编辑器\" class=\"headerlink\" title=\"Vim编辑器\"></a>Vim编辑器</h1><p>​    <em>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。但是目前我们使用比较多的是 vim 编辑器。vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。</em></p>\n<h2 id=\"vi-x2F-vim-的使用\"><a href=\"#vi-x2F-vim-的使用\" class=\"headerlink\" title=\"vi&#x2F;vim 的使用\"></a>vi&#x2F;vim 的使用</h2><p>​    基本上 vi&#x2F;vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。 这三种模式的作用分别是：</p>\n<img src=\"../../../GitHub/LeetCodeNote/Linux基础/vim-vi-workmodel.png\" alt=\"img\" style=\"zoom:67%;\" />\n\n<h2 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h2><p>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。</p>\n<p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p>\n<p>以下是常用的几个命令：</p>\n<ul>\n<li><strong>i</strong> 切换到输入模式，以输入字符。</li>\n<li><strong>x</strong> 删除当前光标所在处的字符。</li>\n<li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li>\n</ul>\n<p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p>\n<p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>\n<h2 id=\"输入模式\"><a href=\"#输入模式\" class=\"headerlink\" title=\"输入模式\"></a>输入模式</h2><p>在命令模式下按下i就进入了输入模式。</p>\n<p>在输入模式中，可以使用以下按键：</p>\n<ul>\n<li><strong>字符按键以及Shift组合</strong>，输入字符</li>\n<li><strong>ENTER</strong>，回车键，换行</li>\n<li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li>\n<li><strong>DEL</strong>，删除键，删除光标后一个字符</li>\n<li><strong>方向键</strong>，在文本中移动光标</li>\n<li><strong>HOME</strong>&#x2F;<strong>END</strong>，移动光标到行首&#x2F;行尾</li>\n<li><strong>Page Up</strong>&#x2F;<strong>Page Down</strong>，上&#x2F;下翻页</li>\n<li><strong>Insert</strong>，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线</li>\n<li><strong>ESC</strong>，退出输入模式，切换到命令模式</li>\n</ul>\n<h2 id=\"底线命令模式\"><a href=\"#底线命令模式\" class=\"headerlink\" title=\"底线命令模式\"></a>底线命令模式</h2><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。在底线命令模式中，基本的命令有（已经省略了冒号）：</p>\n<ul>\n<li>q 退出程序</li>\n<li>w 保存文件</li>\n</ul>\n<p>按ESC键可随时退出底线命令模式。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">:wq</code></pre>\n\n<h2 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h2><table>\n<thead>\n<tr>\n<th>功能键</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[Ctrl] + [f]</td>\n<td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td>\n</tr>\n<tr>\n<td>[Ctrl] + [b]</td>\n<td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td>\n</tr>\n<tr>\n<td>0 或功能键[Home]</td>\n<td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td>\n</tr>\n<tr>\n<td>$ 或功能键[End]</td>\n<td>移动到这一行的最后面字符处(常用)</td>\n</tr>\n<tr>\n<td>gg</td>\n<td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td>\n</tr>\n<tr>\n<td>n<Enter></td>\n<td>n 为数字。光标向下移动 n 行(常用)</td>\n</tr>\n<tr>\n<td>&#x2F;word</td>\n<td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 &#x2F;vbird 即可！ (常用)</td>\n</tr>\n<tr>\n<td>?word</td>\n<td>向光标之上寻找一个字符串名称为 word 的字符串。</td>\n</tr>\n<tr>\n<td>n</td>\n<td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 &#x2F;vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td>\n</tr>\n<tr>\n<td>N</td>\n<td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 &#x2F;vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td>\n</tr>\n<tr>\n<td>x, X</td>\n<td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td>\n</tr>\n<tr>\n<td>dd</td>\n<td>删除游标所在的那一整行(常用)</td>\n</tr>\n<tr>\n<td>ndd</td>\n<td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td>\n</tr>\n<tr>\n<td>yy</td>\n<td>复制游标所在的那一行(常用)</td>\n</tr>\n<tr>\n<td>u</td>\n<td>复原前一个动作。(常用)</td>\n</tr>\n<tr>\n<td>[Ctrl]+r</td>\n<td>重做上一个动作。(常用)</td>\n</tr>\n<tr>\n<td>.</td>\n<td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td>\n</tr>\n<tr>\n<td>:wq</td>\n<td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td>\n</tr>\n</tbody></table>\n<h1 id=\"用户和用户组管理\"><a href=\"#用户和用户组管理\" class=\"headerlink\" title=\"用户和用户组管理\"></a>用户和用户组管理</h1><p>​    Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p>\n<p>​    用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p>\n<p>​    每个用户账号都拥有一个唯一的用户名和各自的口令。</p>\n<p>​    用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p>\n<p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p>\n<ul>\n<li>用户账号的添加、删除与修改。</li>\n<li>用户口令的管理。</li>\n<li>用户组的管理。</li>\n</ul>\n<h2 id=\"用户账号的管理\"><a href=\"#用户账号的管理\" class=\"headerlink\" title=\"用户账号的管理\"></a>用户账号的管理</h2><p><strong>useradd添加新的用户</strong></p>\n<p>使用root用户添加，其他用户初始没有权限。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">useradd [选项] [用户名]</code></pre>\n\n<p>参数说明：</p>\n<ul>\n<li><p>选项:</p>\n<ul>\n<li>-c comment 指定一段注释性描述。</li>\n<li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用<code>-m</code>选项，可以创建主目录。</li>\n<li>-g 用户组 指定用户所属的用户组。</li>\n<li>-G 用户组，用户组 指定用户所属的附加组。</li>\n<li>-s Shell文件 指定用户的登录Shell。</li>\n<li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li>\n</ul>\n</li>\n<li><p>用户名:</p>\n<p>指定新账号的登录名。</p>\n</li>\n</ul>\n<p>[本质]:这个命令在 <code>/etc/passwd</code> 中添加了一个用户的信息，同时更新其他系统文件如<code>/etc/shadow</code>, <code>/etc/group</code>等。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@VM-4-9-centos &#x2F;]# adduser -m zhangfan \n[root@VM-4-9-centos &#x2F;]# cd home&#x2F;\n[root@VM-4-9-centos home]# ls\nlighthouse  test1  zhangfan  </code></pre>\n\n\n\n<p><strong>userdel删除帐号</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">userdel [选项] [用户名]</code></pre>\n\n<p>常用的选项是 <strong>-r</strong>，它的作用是把用户的主目录一起删除。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@VM-4-9-centos etc]# userdel -r zhangfan\n[root@VM-4-9-centos etc]# cd &#x2F;home\n[root@VM-4-9-centos home]# ls\nlighthouse  test1 </code></pre>\n\n\n\n<p><strong>usermod修改帐号</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">usermod [选项] [用户名]</code></pre>\n\n<p>常用的选项包括<code>-c, -d, -m, -g, -G, -s, -u以及-o等</code>，这些选项的意义与<code>useradd</code>命令中的选项一样，可以为用户指定新的资源值。</p>\n<p>另外，有些系统可以使用选项：-l 新用户名</p>\n<p>这个选项指定一个新的账号，即将原来的用户名改为新的用户名。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@VM-4-9-centos home]# usermod -d &#x2F;home&#x2F;zhang zhangfan\nusermod: user &#39;zhangfan&#39; does not exist\n[root@VM-4-9-centos home]# useradd -m  zhangfan\n[root@VM-4-9-centos home]# usermod -d &#x2F;home&#x2F;zhang zhangfan\n[root@VM-4-9-centos home]# ls\nkdum.sh  lighthouse  test1  zhangfan  zhang.txt\n[root@VM-4-9-centos home]# cat &#x2F;etc&#x2F;passwd\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash\n...\nzhangfan:x:1001:1001::&#x2F;home&#x2F;zhang:&#x2F;bin&#x2F;bash</code></pre>\n\n\n\n<p><strong>su切换用户</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@F4N ~]# su zhangfan\n[zhangfan@F4N root]$ </code></pre>\n\n\n\n<p><strong>passwd密码管理</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">passwd 选项 用户名</code></pre>\n\n<p>可使用的选项：</p>\n<ul>\n<li>-l 锁定口令，即禁用账号。</li>\n<li>-u 口令解锁。</li>\n<li>-d 使账号无口令。</li>\n<li>-f 强迫用户下次登录时修改口令。</li>\n</ul>\n<p>如果默认用户名，则修改当前用户的口令。</p>\n<p>如果是超级用户，可以用下列形式指定任何用户的口令：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># passwd [username] \nNew password:******* \nRe-enter new password:*******</code></pre>\n\n<p>假设当前用户是普通，则下面的命令修改该用户自己的口令：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$ passwd \nOld password:****** \nNew password:******* \nRe-enter new password:*******</code></pre>\n\n\n\n<p>锁定用户</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@F4N home]# passwd -l zhangfan  \t#冻结账户\nLocking password for user zhangfan.\npasswd: Success</code></pre>\n\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@F4N home]# passwd -d zhangfan \t#删除密码而达到锁定目的\nRemoving password for user zhangfan.\npasswd: Success</code></pre>\n\n\n\n<h2 id=\"用户组\"><a href=\"#用户组\" class=\"headerlink\" title=\"用户组\"></a>用户组</h2><p>​    每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。用户组的管理涉及用户组的添加、删除和修改。</p>\n<p>​    组的增加、删除和修改实际上就是对<code>/etc/group</code>文件的更新。</p>\n<p><strong>groupadd创建用户组</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">groupadd 选项 用户组</code></pre>\n\n<p>可以使用的选项有：</p>\n<ul>\n<li>-g GID 指定新用户组的组标识号（GID）。</li>\n<li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li>\n</ul>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@F4N home]# groupadd zhangfan\n[root@F4N home]# cat &#x2F;etc&#x2F;group\nroot:x:0:\n...\nzhangfan:x:1001: #新组的组标识号是在当前已有的最大组标识号的基础上加1。\n[root@F4N home]# groupadd -g 250 zhangfan2\n[root@F4N home]# cat &#x2F;etc&#x2F;group\nroot:x:0:\n...\nzhangfan:x:1001:\nzhangfan2:x:250:</code></pre>\n\n\n\n<p><strong>groupmod修改用户组</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">groupmod 选项 用户组</code></pre>\n\n<p>常用的选项有：</p>\n<ul>\n<li>-g GID 为用户组指定新的组标识号。</li>\n<li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li>\n<li>-n新用户组 将用户组的名字改为新名字</li>\n</ul>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># groupmod –g 10000 -n group3 group2\n此命令将组group2的标识号改为10000，组名修改为group3。</code></pre>\n\n\n\n<p><strong>groupdel删除组</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">groupdel 用户组</code></pre>\n\n\n\n<h2 id=\"用户账号有关的系统文件\"><a href=\"#用户账号有关的系统文件\" class=\"headerlink\" title=\"用户账号有关的系统文件\"></a>用户账号有关的系统文件</h2><p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。</p>\n<p>与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括&#x2F;etc&#x2F;passwd, &#x2F;etc&#x2F;shadow, &#x2F;etc&#x2F;group等。</p>\n<p>下面分别介绍这些文件的内容。</p>\n<h3 id=\"1、-x2F-etc-x2F-passwd文件是用户管理工作涉及的最重要的一个文件。\"><a href=\"#1、-x2F-etc-x2F-passwd文件是用户管理工作涉及的最重要的一个文件。\" class=\"headerlink\" title=\"1、&#x2F;etc&#x2F;passwd文件是用户管理工作涉及的最重要的一个文件。\"></a>1、&#x2F;etc&#x2F;passwd文件是用户管理工作涉及的最重要的一个文件。</h3><p>Linux系统中的每个用户都在&#x2F;etc&#x2F;passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p>\n<p>这个文件对所有用户都是可读的。它的内容类似下面的例子：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">＃ cat &#x2F;etc&#x2F;passwd\n\nroot:x:0:0:Superuser:&#x2F;:\ndaemon:x:1:1:System daemons:&#x2F;etc:\nbin:x:2:2:Owner of system commands:&#x2F;bin:\nsys:x:3:3:Owner of system files:&#x2F;usr&#x2F;sys:\nadm:x:4:4:System accounting:&#x2F;usr&#x2F;adm:\nuucp:x:5:5:UUCP administrator:&#x2F;usr&#x2F;lib&#x2F;uucp:\nauth:x:7:21:Authentication administrator:&#x2F;tcb&#x2F;files&#x2F;auth:\ncron:x:9:16:Cron daemon:&#x2F;usr&#x2F;spool&#x2F;cron:\nlisten:x:37:4:Network daemon:&#x2F;usr&#x2F;net&#x2F;nls:\nlp:x:71:18:Printer administrator:&#x2F;usr&#x2F;spool&#x2F;lp:\nsam:x:200:50:Sam san:&#x2F;home&#x2F;sam:&#x2F;bin&#x2F;sh</code></pre>\n\n<p>从上面的例子我们可以看到，&#x2F;etc&#x2F;passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</code></pre>\n\n<p>1）”用户名”是代表用户账号的字符串。</p>\n<p>通常长度不超过8个字符，并且由大小写字母和&#x2F;或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。</p>\n<p>为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。</p>\n<p>2）“口令”一些系统中，存放着加密后的用户口令字。</p>\n<p>虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于&#x2F;etc&#x2F;passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux 系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到&#x2F;etc&#x2F;shadow文件中，而在&#x2F;etc&#x2F;passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</p>\n<p>3）“用户标识号”是一个整数，系统内部用它来标识用户。</p>\n<p>一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。</p>\n<p>通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。</p>\n<p>4）“组标识号”字段记录的是用户所属的用户组。</p>\n<p>它对应着&#x2F;etc&#x2F;group文件中的一条记录。</p>\n<p>5)“注释性描述”字段记录着用户的一些个人情况。</p>\n<p>例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux 系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用做finger命令的输出。</p>\n<p>6)“主目录”，也就是用户的起始工作目录。</p>\n<p>它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p>\n<p>7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。</p>\n<p>Shell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。常用的有sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX&#x2F;TOPS-20 type C Shell), bash(Bourne Again Shell)等。</p>\n<p>系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为&#x2F;bin&#x2F;sh。</p>\n<p>用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。</p>\n<p>利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。</p>\n<p>8)系统中有一类用户称为伪用户（pseudo users）。</p>\n<p>这些用户在&#x2F;etc&#x2F;passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。</p>\n<p>常见的伪用户如下所示：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">伪 用 户 含 义 \nbin 拥有可执行的用户命令文件 \nsys 拥有系统文件 \nadm 拥有帐户文件 \nuucp UUCP使用 \nlp lp或lpd子系统使用 \nnobody NFS使用</code></pre>\n\n<hr>\n<h3 id=\"2、拥有帐户文件\"><a href=\"#2、拥有帐户文件\" class=\"headerlink\" title=\"2、拥有帐户文件\"></a>2、拥有帐户文件</h3><p><strong>1、除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit, cron, mail, usenet等，它们也都各自为相关的进程和文件所需要。</strong></p>\n<p>由于&#x2F;etc&#x2F;passwd文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高的Linux系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是&#x2F;etc&#x2F;shadow文件。 有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。</p>\n<p><strong>2、&#x2F;etc&#x2F;shadow中的记录行与&#x2F;etc&#x2F;passwd中的一一对应，它由pwconv命令根据&#x2F;etc&#x2F;passwd中的数据自动产生</strong></p>\n<p>它的文件格式与&#x2F;etc&#x2F;passwd类似，由若干个字段组成，字段之间用”:”隔开。这些字段是：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</code></pre>\n\n<ol>\n<li>“登录名”是与&#x2F;etc&#x2F;passwd文件中的登录名相一致的用户账号</li>\n<li>“口令”字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { .&#x2F;0-9A-Za-z }中的字符，则对应的用户不能登录。</li>\n<li>“最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCO Linux 中，这个时间起点是1970年1月1日。</li>\n<li>“最小时间间隔”指的是两次修改口令之间所需的最小天数。</li>\n<li>“最大时间间隔”指的是口令保持有效的最大天数。</li>\n<li>“警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。</li>\n<li>“不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。</li>\n<li>“失效时间”字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。</li>\n</ol>\n<p>下面是&#x2F;etc&#x2F;shadow的一个例子：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">＃ cat &#x2F;etc&#x2F;shadow\n\nroot:Dnakfw28zf38w:8764:0:168:7:::\ndaemon:*::0:0::::\nbin:*::0:0::::\nsys:*::0:0::::\nadm:*::0:0::::\nuucp:*::0:0::::\nnuucp:*::0:0::::\nauth:*::0:0::::\ncron:*::0:0::::\nlisten:*::0:0::::\nlp:*::0:0::::\nsam:EkdiSECLWPdSa:9740:0:0::::</code></pre>\n\n<h3 id=\"3、用户组的所有信息都存放在-x2F-etc-x2F-group文件中。\"><a href=\"#3、用户组的所有信息都存放在-x2F-etc-x2F-group文件中。\" class=\"headerlink\" title=\"3、用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中。\"></a>3、用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中。</h3><p>将用户分组是Linux 系统中对用户进行管理及控制访问权限的一种手段。</p>\n<p>每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。</p>\n<p>当一个用户同时是多个组中的成员时，在&#x2F;etc&#x2F;passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p>\n<p>用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。</p>\n<p>用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中。此文件的格式也类似于&#x2F;etc&#x2F;passwd文件，由冒号(:)隔开若干个字段，这些字段有：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">组名:口令:组标识号:组内用户列表</code></pre>\n\n<ol>\n<li>“组名”是用户组的名称，由字母或数字构成。与&#x2F;etc&#x2F;passwd中的登录名一样，组名不应重复。</li>\n<li>“口令”字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。</li>\n<li>“组标识号”与用户标识号类似，也是一个整数，被系统内部用来标识组。</li>\n<li>“组内用户列表”是属于这个组的所有用户的列表&#x2F;b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</li>\n</ol>\n<p>&#x2F;etc&#x2F;group文件的一个例子如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">root::0:root\nbin::2:root,bin\nsys::3:root,uucp\nadm::4:root,adm\ndaemon::5:root,daemon\nlp::7:root,lp\nusers::20:root,sam</code></pre>\n\n\n\n\n\n<h1 id=\"磁盘管理\"><a href=\"#磁盘管理\" class=\"headerlink\" title=\"磁盘管理\"></a>磁盘管理</h1><p>Linux磁盘管理好坏直接关系到整个系统的性能问题。</p>\n<p>Linux磁盘管理常用三个命令为df、du和fdisk。</p>\n<ul>\n<li>df：列出文件系统的整体磁盘使用量</li>\n<li>du：检查磁盘空间使用量</li>\n<li>fdisk：用于磁盘分区</li>\n</ul>\n<h2 id=\"df-检查文件系统的磁盘空间占用情况\"><a href=\"#df-检查文件系统的磁盘空间占用情况\" class=\"headerlink\" title=\"df 检查文件系统的磁盘空间占用情况\"></a>df 检查文件系统的磁盘空间占用情况</h2><p>df命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>\n<p>语法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">df [-ahikHTm] [目录或文件名]</code></pre>\n\n<p>选项与参数：</p>\n<ul>\n<li>-a ：列出所有的文件系统，包括系统特有的 &#x2F;proc 等文件系统；</li>\n<li>-k ：以 KBytes 的容量显示各文件系统；</li>\n<li>-m ：以 MBytes 的容量显示各文件系统；</li>\n<li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li>\n<li>-H ：以 M&#x3D;1000K 取代 M&#x3D;1024K 的进位方式；</li>\n<li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li>\n<li>-i ：不用硬盘容量，而以 inode 的数量来显示</li>\n</ul>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@F4N home]# df -h\nFilesystem      Size  Used Avail Use% Mounted on\ndevtmpfs        908M     0  908M   0% &#x2F;dev\ntmpfs           919M   24K  919M   1% &#x2F;dev&#x2F;shm\ntmpfs           919M  556K  919M   1% &#x2F;run\ntmpfs           919M     0  919M   0% &#x2F;sys&#x2F;fs&#x2F;cgroup\n&#x2F;dev&#x2F;vda1        59G  3.8G   53G   7% &#x2F;\ntmpfs           184M     0  184M   0% &#x2F;run&#x2F;user&#x2F;0</code></pre>\n\n\n\n<h2 id=\"du-对文件和目录磁盘使用的空间的查看\"><a href=\"#du-对文件和目录磁盘使用的空间的查看\" class=\"headerlink\" title=\"du 对文件和目录磁盘使用的空间的查看\"></a>du 对文件和目录磁盘使用的空间的查看</h2><p>Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍Linux du命令。</p>\n<p>语法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">du [-ahskm] 文件或目录名称</code></pre>\n\n<p>选项与参数：</p>\n<ul>\n<li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li>\n<li>-h ：以人们较易读的容量格式 (G&#x2F;M) 显示；</li>\n<li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li>\n<li>-S ：不包括子目录下的总计，与 -s 有点差别。</li>\n<li>-k ：以 KBytes 列出容量显示；</li>\n<li>-m ：以 MBytes 列出容量显示；</li>\n</ul>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@F4N home]# du -sm &#x2F;*    #查看占用最多的文件夹\n0\t&#x2F;bin\n123\t&#x2F;boot\n1\t&#x2F;data\n0\t&#x2F;dev\n37\t&#x2F;etc\n...\n1\t&#x2F;srv\n0\t&#x2F;sys\n1\t&#x2F;tmp\n2791\t&#x2F;usr\n761\t&#x2F;var</code></pre>\n\n<h2 id=\"fdisk-磁盘分区表\"><a href=\"#fdisk-磁盘分区表\" class=\"headerlink\" title=\"fdisk 磁盘分区表\"></a>fdisk 磁盘分区表</h2><p>fdisk 是 Linux 的磁盘分区表操作工具。</p>\n<p>语法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">fdisk [-l] 装置名称</code></pre>\n\n<p>选项与参数：</p>\n<ul>\n<li>-l ：输出后面接的装置所有的分区内容。若仅有 fdisk -l 时， 则系统将会把整个系统内能够搜寻到的装置的分区均列出来。</li>\n</ul>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@F4N mnt]# fdisk -l\n\nDisk &#x2F;dev&#x2F;vda: 64.4 GB, 64424509440 bytes, 125829120 sectors\nUnits &#x3D; sectors of 1 * 512 &#x3D; 512 bytes\nSector size (logical&#x2F;physical): 512 bytes &#x2F; 512 bytes\nI&#x2F;O size (minimum&#x2F;optimal): 512 bytes &#x2F; 512 bytes\nDisk label type: dos\nDisk identifier: 0x0009ac89\n\n   Device Boot      Start         End      Blocks   Id  System\n&#x2F;dev&#x2F;vda1   *        2048   125829086    62913519+  83  Linux</code></pre>\n\n\n\n\n\n<h2 id=\"磁盘挂载与卸除\"><a href=\"#磁盘挂载与卸除\" class=\"headerlink\" title=\"磁盘挂载与卸除\"></a>磁盘挂载与卸除</h2><p>Linux 的磁盘挂载使用 <code>mount</code> 命令，卸载使用 <code>umount</code> 命令。</p>\n<p>磁盘挂载语法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n]  装置文件名  挂载点</code></pre>\n\n<p>用默认的方式，将刚刚创建的 &#x2F;dev&#x2F;hdc6 挂载到 &#x2F;mnt&#x2F;hdc6 上面！</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@www ~]# mkdir &#x2F;mnt&#x2F;hdc6\n[root@www ~]# mount &#x2F;dev&#x2F;hdc6 &#x2F;mnt&#x2F;hdc6\n[root@www ~]# df\nFilesystem           1K-blocks      Used Available Use% Mounted on\n.....中间省略.....\n&#x2F;dev&#x2F;hdc6              1976312     42072   1833836   3% &#x2F;mnt&#x2F;hdc6</code></pre>\n\n<p>磁盘卸载命令 <code>umount</code> 语法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">umount [-fn] 装置文件名或挂载点</code></pre>\n\n<p>选项与参数：</p>\n<ul>\n<li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li>\n<li>-n ：不升级 &#x2F;etc&#x2F;mtab 情况下卸除。</li>\n</ul>\n<p>卸载&#x2F;dev&#x2F;hdc6</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@www ~]# umount &#x2F;dev&#x2F;hdc6     </code></pre>\n\n\n\n\n\n<h1 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h1><p><strong>ps查看进程信息</strong></p>\n<p>Linux ps （英文全拼：process status）命令用于显示当前进程的状态，类似于 windows 的任务管理器。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">ps [options] [--help]</code></pre>\n\n<p>参数：</p>\n<ul>\n<li><p>-A 列出所有的进程</p>\n</li>\n<li><p>-a 列出当前运行的进程</p>\n</li>\n<li><p>-w 显示加宽可以显示较多的资讯</p>\n</li>\n<li><p>-au 显示较详细的资讯</p>\n</li>\n<li><p>-aux 显示所有包含其他使用者的行程</p>\n</li>\n<li><p>au(x) 输出格式 :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</code></pre>\n\n<ul>\n<li>USER: 行程拥有者</li>\n<li>PID: pid</li>\n<li>%CPU: 占用的 CPU 使用率</li>\n<li>%MEM: 占用的记忆体使用率</li>\n<li>VSZ: 占用的虚拟记忆体大小</li>\n<li>RSS: 占用的记忆体大小</li>\n<li>TTY: 终端的次要装置号码 (minor device number of tty)</li>\n<li>STAT: 该行程的状态:<ul>\n<li>D: 无法中断的休眠状态 (通常 IO 的进程)</li>\n<li>R: 正在执行中</li>\n<li>S: 静止状态</li>\n<li>T: 暂停执行</li>\n<li>Z: 不存在但暂时无法消除</li>\n<li>W: 没有足够的记忆体分页可分配</li>\n<li>&lt;: 高优先序的行程</li>\n<li>N: 低优先序的行程</li>\n<li>L: 有记忆体分页分配并锁在记忆体内 (实时系统或捱A I&#x2F;O)</li>\n</ul>\n</li>\n<li>START: 行程开始时间</li>\n<li>TIME: 执行的时间</li>\n<li>COMMAND:所执行的指令</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@F4N &#x2F;]# ps -au\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot      1334  0.0  0.0 110208   868 ttyS0    Ss+  Jun17   0:00 &#x2F;sbin&#x2F;agetty --keep-baud 115200,38400,9600 ttyS0\nroot      1335  0.0  0.0 110208   856 tty1     Ss+  Jun17   0:00 &#x2F;sbin&#x2F;agetty --noclear tty1 linux\nroot     19471  0.0  0.1 116420  3044 pts&#x2F;0    Ss   15:11   0:00 -bash\nroot     30682  0.0  0.0 155452  1868 pts&#x2F;0    R+   16:19   0:00 ps -au</code></pre>\n\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@F4N &#x2F;]# ps -aux|grep mysql\nroot     31007  0.0  0.0 112812   972 pts&#x2F;0    R+   16:21   0:00 grep --color&#x3D;auto mysql\n# | 在linux中成为管道符 A|B\n#grep进行过滤,筛选符合条件的字符串</code></pre>\n\n\n\n<p><strong>pstree进程树状图</strong></p>\n<p>Linux pstree命令将所有行程以树状图显示，树状图将会以 pid (如果有指定) 或是以 init 这个基本行程为根 (root)，如果有指定使用者 id，则树状图会只显示该使用者所拥有的行程。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pstree [-a] [-c] [-h|-Hpid] [-l] [-n] [-p] [-u] [-G|-U] [pid|user]</code></pre>\n\n<p>常用:</p>\n<ul>\n<li>-p 显示父id</li>\n<li>-u 显示用户组</li>\n</ul>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@F4N &#x2F;]# pstree -pu\nsystemd(1)─┬─YDLive(1698)─┬─&#123;YDLive&#125;(1699)\n           │              ├─&#123;YDLive&#125;(1700)\n...\n           ├─rshim(1045)───&#123;rshim&#125;(1065)\n           ├─rsyslogd(1262)─┬─&#123;rsyslogd&#125;(1280)\n           │                └─&#123;rsyslogd&#125;(1313)\n           ├─sgagent(1819)───&#123;sgagent&#125;(1820)\n           ├─sshd(1556)─┬─sshd(19464)───bash(19471)───pstree(32457)\n           │            └─sshd(19489)───sftp-server(19506)\n           ├─systemd-journal(365)\n           ├─systemd-logind(563)\n           ├─systemd-udevd(397)\n           ├─tat_agent(1275)─┬─&#123;tat_agent&#125;(1281)\n           │                 ├─&#123;tat_agent&#125;(1320)\n           │                 ├─&#123;tat_agent&#125;(1321)\n           │                 └─&#123;tat_agent&#125;(1325)\n           └─tuned(1040)─┬─&#123;tuned&#125;(1367)\n                         ├─&#123;tuned&#125;(1368)\n                         ├─&#123;tuned&#125;(1386)\n                         └─&#123;tuned&#125;(1392)</code></pre>\n\n\n\n<p><strong>kill结束进程</strong></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">kill [-s &lt;信息名称或编号&gt;][程序]　或　kill [-l &lt;信息编号&gt;]</code></pre>\n\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li>-l &lt;信息编号&gt; 　若不加&lt;信息编号&gt;选项，则 -l 参数会列出全部的信息名称。</li>\n<li>-s &lt;信息名称或编号&gt; 　指定要送出的信息。</li>\n<li>[程序] 　[程序]可以是程序的PID或是PGID，也可以是工作编号。</li>\n</ul>\n<p>使用 kill -l 命令列出所有可用信号。</p>\n<p>最常用的信号是：</p>\n<ul>\n<li>1 (HUP)：重新加载进程。</li>\n<li>9 (KILL)：杀死一个进程。</li>\n<li>15 (TERM)：正常停止一个进程。</li>\n</ul>\n<p>杀死进程</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># kill 12345</code></pre>\n\n<p>彻底杀死进程</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># kill -9 123456</code></pre>\n\n\n\n<h1 id=\"硬件信息查看\"><a href=\"#硬件信息查看\" class=\"headerlink\" title=\"硬件信息查看\"></a>硬件信息查看</h1><p><strong>lscpu命令</strong></p>\n<p>lscpu命令能够查看 CPU 和处理单元的信息。该命令没有任何其他选项或者别的功能。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">lscpu</code></pre>\n\n\n\n<p><strong>lspci查看PCI总线</strong></p>\n<p>lspci是另一个命令行工具，可以用来列出所有的 PCI 总线，还有与 PCI 总线相连的设备的详细信息，比如 VGA 适配器、显卡、网络适配器、usb 端口、SATA 控制器等。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">lspci -v | grep &quot;VGA&quot; -A 12 #可以过滤出特定设备的信息</code></pre>\n\n\n\n<h1 id=\"防火墙设置\"><a href=\"#防火墙设置\" class=\"headerlink\" title=\"防火墙设置\"></a>防火墙设置</h1><p>查看防火墙状态:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">systemctl status firewalld</code></pre>\n\n<p>开启防火墙:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">systemctl start firewalld</code></pre>\n\n<p>关闭防火墙:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">systemctl stop firewalld</code></pre>\n\n<p>开机启动和禁用防火墙:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">systemctl disable firewalld #开机禁用\nsystemctl enable firewalld \t#开机启用 </code></pre>\n\n<p>防火墙配置立刻生效:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">firewall-cmd --reload</code></pre>\n\n<p>查看防火墙开放的端口:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">firewall-cmd --zone&#x3D;public --list-ports</code></pre>\n\n<p>打开某一端口:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">firewall-cmd --permanent --zone&#x3D;public --add-port&#x3D;3306&#x2F;tcp\n#–zone #作用域\n#–add-port&#x3D;80&#x2F;tcp #添加端口，格式为：端口&#x2F;通讯协议\n#–permanent #永久生效，没有此参数重启后失效\n#firewall-cmd --reload 并不中断用户连接，即不丢失状态信息\n#开放端口后需重载防火墙\nfirewall-cmd --reload</code></pre>\n\n<p>关闭某一端口:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">firewall-cmd --zone&#x3D;public --remove-port&#x3D;8081&#x2F;tcp --permanent  </code></pre>\n\n\n\n\n\n\n\n<h1 id=\"程序安装\"><a href=\"#程序安装\" class=\"headerlink\" title=\"程序安装\"></a>程序安装</h1><p>一般安装软件有三种方式:</p>\n<ul>\n<li><p><code>rpm</code>。</p>\n<p>​    Linux rpm 命令用于管理套件。</p>\n<p>​    rpm（英文全拼：redhat package manager） 原本是 Red Hat Linux 发行版专门用来管理 Linux 各项套件的程序，由于它遵循 GPL 规则且功能强大方便，因而广受欢迎。逐渐受到其他发行版的采用。RPM 套件管理方式的出现，让 Linux 易于安装，升级，间接提升了 Linux 的适用度。</p>\n</li>\n<li><p><code>解压缩</code>。</p>\n</li>\n<li><p><code>yum</code>在线安装。</p>\n<p>yum常用命令:</p>\n<ul>\n<li>列出所有可更新的软件清单命令：<strong>yum check-update</strong></li>\n<li>更新所有软件命令：<strong>yum update</strong></li>\n<li>仅安装指定的软件命令：<strong>yum install <package_name></strong></li>\n<li>仅更新指定的软件命令：<strong>yum update <package_name></strong></li>\n<li>列出所有可安裝的软件清单命令：<strong>yum list</strong></li>\n<li>删除软件包命令：<strong>yum remove <package_name></strong></li>\n<li>查找软件包命令：<strong>yum search <keyword></strong></li>\n<li>清除缓存命令:<ul>\n<li><strong>yum clean packages</strong>: 清除缓存目录下的软件包</li>\n<li><strong>yum clean headers</strong>: 清除缓存目录下的 headers</li>\n<li><strong>yum clean oldheaders</strong>: 清除缓存目录下旧的 headers</li>\n<li><strong>yum clean, yum clean all (&#x3D; yum clean packages; yum clean oldheaders)</strong> :清除缓存目录下的软件包及旧的 headers</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"JDK安装\"><a href=\"#JDK安装\" class=\"headerlink\" title=\"JDK安装\"></a>JDK安装</h2><p>使用的解压缩安装，官方下载JDK，<code>jdk-8u161-linux-x64.tar.gz</code>，在&#x2F;usr目录下java文件夹，将jdk.gz放入，然后进行解压缩</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">tar -zxvf jdk-8u161-linux-x64.tar.gz</code></pre>\n\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@F4N etc]# cd &#x2F;usr&#x2F;java&#x2F;\n[root@F4N java]# ls\njdk1.8.0_161  jdk-8u161-linux-x64.tar.gz</code></pre>\n\n<p>然后在<code>/etc/profile</code>文件中添加环境变量:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">vim &#x2F;etc&#x2F;profile</code></pre>\n\n<p>在<code>profile</code>文件末尾中添加如下环境变量:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># Java Environment Path\nexport JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_161\nexport PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH\nexport CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar</code></pre>\n\n<p>执行<code>source</code>命令让文件生效:</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">source &#x2F;etc&#x2F;profile</code></pre>\n\n<p>查看Java是否安装成功，出现版本号表示安装成功。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@F4N etc]# source &#x2F;etc&#x2F;profile\n[root@F4N etc]# java -version\njava version &quot;1.8.0_161&quot;\nJava(TM) SE Runtime Environment (build 1.8.0_161-b12)\nJava HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)</code></pre>\n\n\n\n<h2 id=\"Tomcat安装\"><a href=\"#Tomcat安装\" class=\"headerlink\" title=\"Tomcat安装\"></a>Tomcat安装</h2><ol>\n<li><p>下载 tomcat9 的压缩包tar.gz。</p>\n<p>下载地址：<a href=\"https://downloads.apache.org/tomcat/tomcat-9/v9.0.48/bin/apache-tomcat-9.0.48.tar.gz\">https://downloads.apache.org/tomcat/tomcat-9/v9.0.48/bin/apache-tomcat-9.0.48.tar.gz</a></p>\n</li>\n<li><p>将下载的压缩包上传到云服务器的<code>/usr</code>目录下，新建目录 tomcat ，将压缩包移入并解压。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">tar -zxvf apache-tomcat-9.0.48.tar.gz</code></pre>\n</li>\n<li><p>解压后，进入<code>/usr/tomcat/apache-tomcat-9.0.48/bin</code>目录，执行<code>startup.sh</code> </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#启动 .&#x2F;startup.sh \n#终止 .&#x2F;shutdown.sh </code></pre>\n\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@F4N bin]# .&#x2F;startup.sh \nUsing CATALINA_BASE:   &#x2F;usr&#x2F;tomcat&#x2F;apache-tomcat-9.0.48\nUsing CATALINA_HOME:   &#x2F;usr&#x2F;tomcat&#x2F;apache-tomcat-9.0.48\nUsing CATALINA_TMPDIR: &#x2F;usr&#x2F;tomcat&#x2F;apache-tomcat-9.0.48&#x2F;temp\nUsing JRE_HOME:        &#x2F;usr&#x2F;java&#x2F;jdk1.8.0_161\nUsing CLASSPATH:       &#x2F;usr&#x2F;tomcat&#x2F;apache-tomcat-9.0.48&#x2F;bin&#x2F;bootstrap.jar:&#x2F;usr&#x2F;tomcat&#x2F;apache-tomcat-9.0.48&#x2F;bin&#x2F;tomcat-juli.jar\nUsing CATALINA_OPTS:   \nTomcat started.</code></pre>\n</li>\n<li><p>由于Tomcat使用的是<code>8080</code>端口，需要在防火墙中打开对应的端口访问权限</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[root@F4N bin]# systemctl status firewalld \t\t\t#查看防火墙状态，如果是关闭（dead）的，需要打开防火墙\n● firewalld.service - firewalld - dynamic firewall daemon\n   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;firewalld.service; disabled; vendor preset: enabled)\n   Active: active (running) since Tue 2021-06-22 10:15:18 CST; 26min ago\n     Docs: man:firewalld(1)\n Main PID: 10649 (firewalld)\n   CGroup: &#x2F;system.slice&#x2F;firewalld.service\n           └─10649 &#x2F;usr&#x2F;bin&#x2F;python2 -Es &#x2F;usr&#x2F;sbin&#x2F;firewalld --nofork --nopid\n\nJun 22 10:15:18 F4N systemd[1]: Starting firewalld - dynamic firewall daemon...\nJun 22 10:15:18 F4N systemd[1]: Started firewalld - dynamic firewall daemon.\nJun 22 10:15:18 F4N firewalld[10649]: WARNING: AllowZoneDrifting is enabled. This is considered an insecu... now.\nJun 22 10:19:42 F4N firewalld[10649]: WARNING: AllowZoneDrifting is enabled. This is considered an insecu... now.\nJun 22 10:28:48 F4N firewalld[10649]: WARNING: AllowZoneDrifting is enabled. This is considered an insecu... now.\nJun 22 10:32:34 F4N firewalld[10649]: WARNING: AllowZoneDrifting is enabled. This is considered an insecu... now.\nHint: Some lines were ellipsized, use -l to show in full.\n[root@F4N bin]# systemctl start firewalld\t\t\t#打开防火墙\n[root@F4N bin]# firewall-cmd --list-ports\t\t\t#查看开启的端口号,如果没有开启,需要手动开启端口\n3306&#x2F;tcp 80&#x2F;tcp 443&#x2F;tcp 22&#x2F;tcp 3389&#x2F;tcp 8080&#x2F;tcp\n[root@F4N bin]# firewall-cmd --permanent --zone&#x3D;public --add-port&#x3D;8080&#x2F;tcp\t#打开8080端口\nsuccess\n[root@F4N bin]# firewall-cmd --reload\t\t\t\t#重启防火墙\nsuccess</code></pre>\n</li>\n<li><p>在云服务器防火墙配置中打开8080端口</p>\n<p><img src=\"/../../../GitHub/LeetCodeNote/Linux%E5%9F%BA%E7%A1%80/image-20210622105303487.png\" alt=\"image-20210622105303487\"></p>\n</li>\n<li><p>可以通过公网IP地址进行访问了</p>\n<p><img src=\"/../../../GitHub/LeetCodeNote/Linux%E5%9F%BA%E7%A1%80/image-20210622105451317.png\" alt=\"image-20210622105451317\"></p>\n</li>\n</ol>\n<h2 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h2><p>​    Docker 是一个开源的应用容器引擎，基于 Go语言 并遵从 Apache2.0 协议开源。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p>\n<p>​    容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p>\n<ol>\n<li><p>卸载旧版本Docker</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@F4N bin]#  yum remove docker \\\n&gt;                   docker-client \\\n&gt;                   docker-client-latest \\\n&gt;                   docker-common \\\n&gt;                   docker-latest \\\n&gt;                   docker-latest-logrotate \\\n&gt;                   docker-logrotate \\\n&gt;                   docker-engine\nLoaded plugins: fastestmirror, langpacks\nNo Match for argument: docker\nNo Match for argument: docker-client\nNo Match for argument: docker-client-latest\nNo Match for argument: docker-common\nNo Match for argument: docker-latest\nNo Match for argument: docker-latest-logrotate\nNo Match for argument: docker-logrotate\nNo Match for argument: docker-engine\nNo Packages marked for removal</code></pre>\n</li>\n<li><p>安装前置需要的一些软件包</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yum install -y lvm2 device-mapper-persistent-data yum-utils\n\n[root@F4N bin]# yum install -y lvm2 device-mapper-persistent-data yum-utils\nLoaded plugins: fastestmirror, langpacks\nLoading mirror speeds from cached hostfile\nPackage 7:lvm2-2.02.187-6.el7_9.5.x86_64 already installed and latest version\nPackage device-mapper-persistent-data-0.8.5-3.el7_9.2.x86_64 already installed and latest version\nPackage yum-utils-1.1.31-54.el7_8.noarch already installed and latest version\nNothing to do</code></pre>\n</li>\n<li><p>安装Docker，使用阿里云镜像</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@F4N bin]# yum-config-manager   --add-repo   http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo\nLoaded plugins: fastestmirror, langpacks\nadding repo from: http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo\ngrabbing file http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo to &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo\nrepo saved to &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo</code></pre>\n</li>\n<li><p>更新yum软件包索引</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yum makecache fast</code></pre>\n</li>\n<li><p>下载安装Docker CE</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yum -y install docker-ce docker-ce-cli containerd.io</code></pre>\n</li>\n<li><p>启动docker</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">systemctl start docker</code></pre>\n</li>\n<li><p>测试docker是否安装成功,并运行hello world程序</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">[root@F4N bin]# docker version\nClient: Docker Engine - Community\n Version:           20.10.7\n API version:       1.41\n Go version:        go1.13.15\n Git commit:        f0df350\n Built:             Wed Jun  2 11:58:10 2021\n OS&#x2F;Arch:           linux&#x2F;amd64\n Context:           default\n Experimental:      true\n\nServer: Docker Engine - Community\n Engine:\n  Version:          20.10.7\n  API version:      1.41 (minimum version 1.12)\n  Go version:       go1.13.15\n  Git commit:       b0f5bc3\n  Built:            Wed Jun  2 11:56:35 2021\n  OS&#x2F;Arch:          linux&#x2F;amd64\n  Experimental:     false\n containerd:\n  Version:          1.4.6\n  GitCommit:        d71fcd7d8303cbf684402823e425e9dd2e99285d\n runc:\n  Version:          1.0.0-rc95\n  GitCommit:        b9ee9c6314599f1b4a7f497e1f1f856fe433d3b7\n docker-init:\n  Version:          0.19.0\n  GitCommit:        de40ad0\n  \n[root@F4N bin]# docker run hello-world\nUnable to find image &#39;hello-world:latest&#39; locally\nlatest: Pulling from library&#x2F;hello-world\nb8dfde127a29: Pull complete \nDigest: sha256:9f6ad537c5132bcce57f7a0a20e317228d382c3cd61edae14650eec68b2b345c\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https:&#x2F;&#x2F;hub.docker.com&#x2F;\n\nFor more examples and ideas, visit:\n https:&#x2F;&#x2F;docs.docker.com&#x2F;get-started&#x2F;</code></pre></li>\n</ol>\n","text":" Linux简介​ Linux，全称 GNU&#x2F;Linux，是一种免费使用和自由传播的类 UNIX 操作系统，其内核由林纳斯·本纳第克特·托瓦兹于1991年10月5日首次发布，它主要受到 Minix 和 Unix 思想的启发，是一个基于 POSIX 的多用户、多任务、支持...","link":"","photos":[],"count_time":{"symbolsCount":"42k","symbolsTime":"38 mins."},"categories":[{"name":"互联网八股","slug":"互联网八股","count":10,"path":"api/categories/互联网八股.json"}],"tags":[{"name":"Linux","slug":"Linux","count":2,"path":"api/tags/Linux.json"},{"name":"Linux命令","slug":"Linux命令","count":1,"path":"api/tags/Linux命令.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Linux%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">Linux简介</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Linux%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">Linux安装</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%99%BB%E5%BD%95%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">云服务器登录配置</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Linux-%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">Linux 系统启动过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%86%85%E6%A0%B8%E5%BC%95%E5%AF%BC\"><span class=\"toc-text\">1、内核引导</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E8%BF%90%E8%A1%8Cinit\"><span class=\"toc-text\">2、运行init</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">3、系统初始化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%BB%BA%E7%AB%8B%E7%BB%88%E7%AB%AF\"><span class=\"toc-text\">4、建立终端</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">5、用户登录系统</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">文件系统目录结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E7%BA%A7%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">一级目录</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%87%8D%E8%A6%81%E7%9A%84%E5%AD%90%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">重要的子目录</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Linux%E9%93%BE%E6%8E%A5%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">Linux链接概念</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">常用命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%85%B3%E6%9C%BA%E7%99%BB%E5%BD%95\"><span class=\"toc-text\">开关机登录</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">目录管理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%9F%A5%E7%9C%8B\"><span class=\"toc-text\">文件内容查看</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E5%92%8C%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">文件权限和属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">文件属性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90\"><span class=\"toc-text\">文件权限</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%BF%AE%E6%94%B9\"><span class=\"toc-text\">文件权限修改</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Vim%E7%BC%96%E8%BE%91%E5%99%A8\"><span class=\"toc-text\">Vim编辑器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#vi-x2F-vim-%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">vi&#x2F;vim 的使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">命令模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">输入模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%95%E7%BA%BF%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">底线命令模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">常用操作</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">用户和用户组管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E8%B4%A6%E5%8F%B7%E7%9A%84%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">用户账号的管理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E7%BB%84\"><span class=\"toc-text\">用户组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E8%B4%A6%E5%8F%B7%E6%9C%89%E5%85%B3%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">用户账号有关的系统文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81-x2F-etc-x2F-passwd%E6%96%87%E4%BB%B6%E6%98%AF%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E5%B7%A5%E4%BD%9C%E6%B6%89%E5%8F%8A%E7%9A%84%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E3%80%82\"><span class=\"toc-text\">1、&#x2F;etc&#x2F;passwd文件是用户管理工作涉及的最重要的一个文件。</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%8B%A5%E6%9C%89%E5%B8%90%E6%88%B7%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">2、拥有帐户文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E7%94%A8%E6%88%B7%E7%BB%84%E7%9A%84%E6%89%80%E6%9C%89%E4%BF%A1%E6%81%AF%E9%83%BD%E5%AD%98%E6%94%BE%E5%9C%A8-x2F-etc-x2F-group%E6%96%87%E4%BB%B6%E4%B8%AD%E3%80%82\"><span class=\"toc-text\">3、用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中。</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">磁盘管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#df-%E6%A3%80%E6%9F%A5%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5\"><span class=\"toc-text\">df 检查文件系统的磁盘空间占用情况</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#du-%E5%AF%B9%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E7%A3%81%E7%9B%98%E4%BD%BF%E7%94%A8%E7%9A%84%E7%A9%BA%E9%97%B4%E7%9A%84%E6%9F%A5%E7%9C%8B\"><span class=\"toc-text\">du 对文件和目录磁盘使用的空间的查看</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#fdisk-%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E8%A1%A8\"><span class=\"toc-text\">fdisk 磁盘分区表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A3%81%E7%9B%98%E6%8C%82%E8%BD%BD%E4%B8%8E%E5%8D%B8%E9%99%A4\"><span class=\"toc-text\">磁盘挂载与卸除</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">进程管理</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%A1%AC%E4%BB%B6%E4%BF%A1%E6%81%AF%E6%9F%A5%E7%9C%8B\"><span class=\"toc-text\">硬件信息查看</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">防火墙设置</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">程序安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JDK%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">JDK安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Tomcat%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">Tomcat安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">Docker安装</span></a></li></ol></li></ol>","author":{"name":"张 凡","slug":"张-凡","avatar":"/svg/coke.png","link":"/","description":"少年与爱永不老去 <br/>即使披荆斩棘,丢失怒马鲜衣。","socials":{"github":"https://github.com/Zhang-F4N","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/36174882"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode-cn.com/u/zhong-an-zu-zhi-hu-z/"}}}},"mapped":true,"prev_post":{"title":"三体","uid":"a6d58241b7800a45a8082a7ce6caaf95","slug":"三体","date":"2022-04-08T04:12:25.000Z","updated":"2022-04-08T06:57:47.137Z","comments":true,"path":"api/articles/三体.json","keywords":null,"cover":[],"text":"三体刘慈欣 在中国，任何超脱飞扬的思想都会砰然坠地的，现实的引力太沉重了。 城市就是森林，每一个男人都是猎手，每一个女人都是陷阱。 你看经济学的基本公理就是人类的唯利是图，没有这个前提，整个经济学就将崩溃；社会学的基本设定还没有定论，但可能比经济学的更黑暗，真理总沾着灰尘…… 给...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"文摘","slug":"文摘","count":3,"path":"api/categories/文摘.json"}],"tags":[{"name":"三体","slug":"三体","count":1,"path":"api/tags/三体.json"}],"author":{"name":"张 凡","slug":"张-凡","avatar":"/svg/coke.png","link":"/","description":"少年与爱永不老去 <br/>即使披荆斩棘,丢失怒马鲜衣。","socials":{"github":"https://github.com/Zhang-F4N","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/36174882"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode-cn.com/u/zhong-an-zu-zhi-hu-z/"}}}}},"next_post":{"title":"Java IO/集合类","uid":"21192bc96d4d1e6c92e0c329a20feea9","slug":"Java-IO-集合类","date":"2022-04-08T02:22:24.000Z","updated":"2022-04-08T02:26:43.455Z","comments":true,"path":"api/articles/Java-IO-集合类.json","keywords":null,"cover":[],"text":"集合类容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对(两个对象)的映射表。 Collectiona. SetSet:注重独一无二的性质,该体系集合可以知道某物是否已近存在于集合中,不会存储重复的元素 用于存储...","link":"","photos":[],"count_time":{"symbolsCount":"35k","symbolsTime":"32 mins."},"categories":[{"name":"互联网八股","slug":"互联网八股","count":10,"path":"api/categories/互联网八股.json"}],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"},{"name":"IO","slug":"IO","count":1,"path":"api/tags/IO.json"}],"author":{"name":"张 凡","slug":"张-凡","avatar":"/svg/coke.png","link":"/","description":"少年与爱永不老去 <br/>即使披荆斩棘,丢失怒马鲜衣。","socials":{"github":"https://github.com/Zhang-F4N","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/36174882"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode-cn.com/u/zhong-an-zu-zhi-hu-z/"}}}}}}